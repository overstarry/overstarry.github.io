[{"content":"前言 MCP Registry 是 MCP 官方提供的一个 提供 MCP Server 的平台，开发者可以将自己开发的 MCP Server 提交到 MCP Registry 以便其他用户可以方便的使用，MCP Registry 于 2025年 9月 8号推出了预览版，本文就讲述如何将自己开发的 MCP Server 提交到 MCP Registry。\n提交 MCP Server 本文所使用的 MCP Server 是 qweather-mcp-go ,是一个使用 Node.js 开发的 MCP Server, 环境是 windows 11, 其他系统类似。\n安装 Publisher CLI 要提交 MCP Server 需要使用安装使用 Publisher CLI\nmacOS/Linux/WSL 使用 Homebrew 安装: brew install mcp-publisher macOS/Linux/WSL 使用预编译的二进制文件安装: # 下载最新版本的预编译二进制文件 curl -L \u0026#34;https://github.com/modelcontextprotocol/registry/releases/download/v1.0.0/mcp-publisher_1.0.0_$(uname -s | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;)_$(uname -m | sed \u0026#39;s/x86_64/amd64/;s/aarch64/arm64/\u0026#39;).tar.gz\u0026#34; | tar xz mcp-publisher \u0026amp;\u0026amp; sudo mv mcp-publisher /usr/local/bin/ macOS/Linux/WSL 使用源码安装: 需要 Git、Make 和 Go 1.24 以上版本\n# Clone the registry repository git clone https://github.com/modelcontextprotocol/registry cd registry make publisher # The binary will be at bin/mcp-publisher export PATH=$PATH:$(pwd)/bin Windows PowerShell 使用预编译的二进制文件安装: $arch = if ([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture -eq \u0026#34;Arm64\u0026#34;) { \u0026#34;arm64\u0026#34; } else { \u0026#34;amd64\u0026#34; }; Invoke-WebRequest -Uri \u0026#34;https://github.com/modelcontextprotocol/registry/releases/download/v1.0.0/mcp-publisher_1.0.0_windows_$arch.tar.gz\u0026#34; -OutFile \u0026#34;mcp-publisher.tar.gz\u0026#34;; tar xf mcp-publisher.tar.gz mcp-publisher.exe; rm mcp-publisher.tar.gz 初始化及编辑 server.json 进入 qweather-mcp-go 项目目录，执行 mcp-publisher init 初始化 server.json 文件,初始的文件内容如下:\n根据文档的要求编辑 server.json 和 package.json 文件。\n验证 这里选择使用 Github 身份验证，执行 mcp-publisher login github,会打开浏览器，进行 oauth 验证。\n除了使用 Github 验证，还可以使用 DNS 验证，具体可以参考文档。\n发布 执行 mcp-publisher publish,会看到如下输出:\nPublishing to https://registry.modelcontextprotocol.io... ✓ Successfully published 怎么查看发布的 MCP Server 呢？可以访问使用以下命令:\ncurl https://registry.modelcontextprotocol.io/servers/io.github.overstarry/qweather-mcp 发现没有成功输出相关的 json 数据，通过查阅 issue, 发现是文档有误，可以使用以下命令:\ncurl \u0026#34;https://registry.modelcontextprotocol.io/v0/servers?search=io.github.overstarry/qweather-mcp\u0026#34; 可以看到已经成功发布了。\n小结 本文介绍了如何将自己开发的 MCP Server 提交到 MCP Registry, 通过使用 Publisher CLI 初始化、编辑、验证和发布，成功将 qweather-mcp-go 发布到了 MCP Registry 上，其他开发者可以方便的使用这个 MCP Server。\n参考 https://github.com/modelcontextprotocol/registry/blob/main/docs/guides/publishing/publish-server.md https://github.com/overstarry/qweather-mcp-go ","permalink":"https://jasminides.com/posts/%E5%B0%86-mcp-server-%E6%8F%90%E4%BA%A4%E5%88%B0-mcp-registry/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eMCP Registry 是 MCP 官方提供的一个 提供 MCP Server 的平台，开发者可以将自己开发的 MCP Server 提交到 MCP Registry 以便其他用户可以方便的使用，MCP Registry 于 2025年 9月 8号推出了预览版，本文就讲述如何将自己开发的 MCP Server 提交到 MCP Registry。\u003c/p\u003e\n\u003ch2 id=\"提交-mcp-server\"\u003e提交 MCP Server\u003c/h2\u003e\n\u003cp\u003e本文所使用的 MCP Server 是 \u003ca href=\"https://github.com/overstarry/qweather-mcp-go\"\u003eqweather-mcp-go\u003c/a\u003e ,是一个使用 Node.js 开发的 MCP Server, 环境是 windows 11, 其他系统类似。\u003c/p\u003e\n\u003ch3 id=\"安装-publisher-cli\"\u003e安装 Publisher CLI\u003c/h3\u003e\n\u003cp\u003e要提交 MCP Server 需要使用安装使用 Publisher CLI\u003c/p\u003e\n\u003ch4 id=\"macoslinuxwsl-使用-homebrew-安装\"\u003emacOS/Linux/WSL 使用 Homebrew 安装:\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install mcp-publisher\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"macoslinuxwsl-使用预编译的二进制文件安装\"\u003emacOS/Linux/WSL 使用预编译的二进制文件安装:\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 下载最新版本的预编译二进制文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -L \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://github.com/modelcontextprotocol/registry/releases/download/v1.0.0/mcp-publisher_1.0.0_\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003euname -s | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[:upper:]\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[:lower:]\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003euname -m | sed \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;s/x86_64/amd64/;s/aarch64/arm64/\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.tar.gz\u0026#34;\u003c/span\u003e | tar xz mcp-publisher \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo mv mcp-publisher /usr/local/bin/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"macoslinuxwsl-使用源码安装\"\u003emacOS/Linux/WSL 使用源码安装:\u003c/h4\u003e\n\u003cp\u003e需要 Git、Make 和 Go 1.24 以上版本\u003c/p\u003e","title":"将 MCP Server 提交到 MCP Registry"},{"content":"前言 zed 在 0.201.4 版本推出了应用 Agent Client Protocol (ACP) 协议的第一个正式版本，Agent Client Protocol (ACP) 是一个将外部 Agents 与编辑器集成的开放协议，zed 在这个版本中集成了 Google Gemini CLI , 开发者可以自己开发兼容 ACP 的自定义代理，本文就是讲述如何安装配置 acp-claude-code 以在 zed 更方便的使用 Claude Code.\n配置 acp-claude-code 的配置很简单，打开 zed 的设置，填入设置:\n{ \u0026#34;agent_servers\u0026#34;: { \u0026#34;Claude Code\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;npx\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;acp-claude-code\u0026#34;] } } } 设置完打开 Agent 面板就可以看到外部 Agents的选项中已有 Claude Code 选项。\n新建 Claude Code 线程，发现报错了，提示 program not found 。 根据以往的经验，这种错误主要发生在 windows 系统上，windows 系统的用户应该使用如下配置。\n{ \u0026#34;agent_servers\u0026#34;: { \u0026#34;claude-code\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;cmd\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;/c\u0026#34;, \u0026#34;npx\u0026#34;, \u0026#34;-y\u0026#34;, \u0026#34;acp-claude-code\u0026#34;], } }, } 配置修改完，不会报错了，但是仍然无法正常使用，提示\n/Users/xx/xx/xx/41ef69d0cb7a2cab/node_modules/@anthropic-ai/entrypoints/cli.js. Is options.pathToClaudeCodeExecutable set?` 。 通过查找 Claude Code 的 issue ，发现是 Claude Code 的 sdk 的问题，acp-claude-code 可以通过设置 agent_servers 的环境变量 ACP_PATH_TO_CLAUDE_CODE_EXECUTABLE 指定 Claude Code 的可执行文件路径。\n\u0026#34;agent_servers\u0026#34;: { \u0026#34;claude-code\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;cmd\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;/c\u0026#34;, \u0026#34;npx\u0026#34;, \u0026#34;-y\u0026#34;, \u0026#34;acp-claude-code\u0026#34;], \u0026#34;env\u0026#34;: { \u0026#34;ACP_PATH_TO_CLAUDE_CODE_EXECUTABLE\u0026#34;: \u0026#34;C:\\\\Users\\\\overstarry\\\\.local\\\\bin\\\\claude.exe\u0026#34;, \u0026#34;ACP_PERMISSION_MODE\u0026#34;: \u0026#34;acceptEdits\u0026#34; // \u0026#34;ACP_DEBUG\u0026#34;: \u0026#34;true\u0026#34; } } }, 设置完成后，重新启动 zed，输入问题，发现又出现了新的问题:\n通过查阅相关 issue ，应该是跟网络有关，开启 tun 模式后，可以正常使用了。\n小结 本文介绍了如何在 zed 中配置和使用 acp-claude-code，以便更方便地使用 Claude Code。通过设置环境变量和调整配置，克服了一系列不同的问题，最终实现了在 zed 中顺利使用 Claude Code 的目标。 zed 官方已经在开发官方版的 Claude Code 集成，期待后续官方集成的发布。\n参考 https://github.com/Xuanwo/acp-claude-code https://github.com/Xuanwo/acp-claude-code/issues/20 https://github.com/Xuanwo/acp-claude-code/pull/48 https://github.com/Xuanwo/acp-claude-code/issues/29 https://zed.dev/blog/bring-your-own-agent-to-zed https://zed.dev/docs/ai/external-agents https://github.com/anthropics/claude-code/issues/6686 https://github.com/anthropics/claude-code/issues/6867 https://www.npmjs.com/package/@zed-industries/claude-code-acp ","permalink":"https://jasminides.com/posts/zed-acp-claude-code/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003ezed 在 0.201.4 版本推出了应用  \u003ccode\u003eAgent Client Protocol (ACP)\u003c/code\u003e 协议的第一个正式版本，Agent Client Protocol (ACP) 是一个将外部 Agents 与编辑器集成的开放协议，zed 在这个版本中集成了 Google Gemini CLI  , 开发者可以自己开发兼容 ACP 的自定义代理，本文就是讲述如何安装配置 \u003ccode\u003eacp-claude-code\u003c/code\u003e 以在 zed 更方便的使用 Claude Code.\u003c/p\u003e\n\u003ch2 id=\"配置\"\u003e配置\u003c/h2\u003e\n\u003cp\u003eacp-claude-code 的配置很简单，打开 zed 的设置，填入设置:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{\n  \u0026#34;agent_servers\u0026#34;: {\n    \u0026#34;Claude Code\u0026#34;: {\n      \u0026#34;command\u0026#34;: \u0026#34;npx\u0026#34;,\n      \u0026#34;args\u0026#34;: [\u0026#34;acp-claude-code\u0026#34;]\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e设置完打开 Agent 面板就可以看到外部 Agents的选项中已有 Claude Code 选项。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/claude-code-acp/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e新建 Claude Code 线程，发现报错了，提示 \u003ccode\u003eprogram not found\u003c/code\u003e 。\n\u003cimg loading=\"lazy\" src=\"/img/claude-code-acp/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e根据以往的经验，这种错误主要发生在 windows 系统上，windows 系统的用户应该使用如下配置。\u003c/p\u003e","title":"Zed acp-claude-code"},{"content":"前言 Claude Code 是 Anthropic 公司开发的 AI 编程工具，它在终端运行，能理解整个项目架构，通过自然语言指令进行代码生成、Bug 修复、Git 操作和自动化开发流程，显著提升开发效率。它支持 macOS、Ubuntu 和 Windows (WSL)，并提供按量付费或包月订阅模式。\n本文将使用 Claude Code 来增强 qweather-mcp-go 项目，qweather-mcp-go 是一个 mcp 工具，可以方便的查询天气情况等数据。本文将一步步使用 Claude Code 来为 qweather-mcp-go 添加 Streamable HTTP 的支持。\n开始 开始编写代码之前，介绍一下使用的工具及环境:\n开发工具: zed mcp: context7 、 server-sequential-thinking AI 编程工具: claude code 模型: claude-sonnet-4 qweather-mcp-go 当前只支持 stdio 和 sse 协议，我们来为它添加 streamable http 的支持。\n初始化项目 打开终端，输入 /init 初始化项目，会在项目中生成 CLAUDE.md 文件，使 Claude Code 能够快速理解项目。\n实现 在 Claude Code 中输入以下内容:\n请按照以下步骤实现 Streamable HTTP 支持： 1. 首先阅读 GitHub issue：https://github.com/overstarry/qweather-mcp-go/issues/4，理解具体的需求和期望的功能 2. 使用 context7 工具获取 github.com/mark3labs/mcp-go 库中与 Streamable HTTP 相关的 API 文档，重点关注： - 流式 HTTP 请求和响应的接口定义 - 相关的结构体、方法和配置选项 - 使用示例和最佳实践 3. 基于获取的文档信息，分析当前 qweather-mcp-go 项目的代码结构，确定需要修改的文件和组件 4. 提出一个详细的实现方案，包括： - 需要实现的具体功能点 - 代码架构设计 - 主要的实现步骤 - 可能遇到的技术挑战和解决方案 5. 在开始编码前，先展示完整的实现计划供确认 输入后可以看到 Claude Code 会创建计划来一步步实现需求。 Claude Code 经过一系列调研后，会提供一个完善的实现方案: 确认实现方案后， Claude Code 会开始实现代码，实现过程中可以随时查看代码的实现情况，也可以随时停止实现。\n在编写代码中出现 mcp-go 相关 Streamable HTTP代码出现问题，及时叫停，让 AI 重新通过 context7 获取正确的信息并重新实现: 使用context7 获取github.com/mark3labs/mcp-go相关文档。\n经过重新指导后，代码能够编译成功，编译成功后会进行测试格式化。\n代码实现后会输出总结信息: AI 编写完代码后，由我们审核代码后，进行测试，运行代码使用 Streamable HTTP 协议启动，在 chatwise 中配置相应 MCP后，聊天使用，可以看出可以顺利正常使用。\n小结 Claude Code 能够很好的理解项目，通过自然语言指令进行代码生成、Bug 修复、Git 操作和自动化开发流程，显著提升开发效率。虽然 Claude Code 能够很好的理解项目，但是由于 Claude Code 会犯一些错误，例如代码实现错误，命名不规范等，需要我们进行 review 和测试，并且相较于 Cursor、Augment 的实现，Claude Code 是没有进行 代码的 RAG，完全使用常规的命令进行查找相关代码。\n参考 https://github.com/upstash/context7 https://github.com/overstarry/qweather-mcp-go https://github.com/mark3labs/mcp-go https://docs.anthropic.com/en/docs/claude-code/overview ","permalink":"https://jasminides.com/posts/enhancing-qweather-mcp-go/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eClaude Code 是 Anthropic 公司开发的 AI 编程工具，它在终端运行，能理解整个项目架构，通过自然语言指令进行代码生成、Bug 修复、Git 操作和自动化开发流程，显著提升开发效率。它支持 macOS、Ubuntu 和 Windows (WSL)，并提供按量付费或包月订阅模式。\u003c/p\u003e\n\u003cp\u003e本文将使用 Claude Code 来增强 qweather-mcp-go 项目，qweather-mcp-go 是一个 mcp 工具，可以方便的查询天气情况等数据。本文将一步步使用 Claude Code 来为 qweather-mcp-go 添加 Streamable HTTP 的支持。\u003c/p\u003e\n\u003ch2 id=\"开始\"\u003e开始\u003c/h2\u003e\n\u003cp\u003e开始编写代码之前，介绍一下使用的工具及环境:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e开发工具: zed\u003c/li\u003e\n\u003cli\u003emcp: context7 、 server-sequential-thinking\u003c/li\u003e\n\u003cli\u003eAI 编程工具: claude code\u003c/li\u003e\n\u003cli\u003e模型: claude-sonnet-4\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eqweather-mcp-go 当前只支持 stdio 和 sse 协议，我们来为它添加 streamable http 的支持。\u003c/p\u003e\n\u003ch3 id=\"初始化项目\"\u003e初始化项目\u003c/h3\u003e\n\u003cp\u003e打开终端，输入 \u003ccode\u003e/init\u003c/code\u003e 初始化项目，会在项目中生成 CLAUDE.md 文件，使 Claude Code 能够快速理解项目。\u003c/p\u003e\n\u003ch3 id=\"实现\"\u003e实现\u003c/h3\u003e\n\u003cp\u003e在 Claude Code 中输入以下内容:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e请按照以下步骤实现 Streamable HTTP 支持：\n\n1. 首先阅读 GitHub issue：https://github.com/overstarry/qweather-mcp-go/issues/4，理解具体的需求和期望的功能\n\n2. 使用 context7 工具获取 github.com/mark3labs/mcp-go 库中与 Streamable HTTP 相关的 API 文档，重点关注：\n   - 流式 HTTP 请求和响应的接口定义\n   - 相关的结构体、方法和配置选项\n   - 使用示例和最佳实践\n\n3. 基于获取的文档信息，分析当前 qweather-mcp-go 项目的代码结构，确定需要修改的文件和组件\n\n4. 提出一个详细的实现方案，包括：\n   - 需要实现的具体功能点\n   - 代码架构设计\n   - 主要的实现步骤\n   - 可能遇到的技术挑战和解决方案\n\n5. 在开始编码前，先展示完整的实现计划供确认\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e输入后可以看到 Claude Code 会创建计划来一步步实现需求。\n\u003cimg loading=\"lazy\" src=\"/img/claude-code1/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e","title":"Enhancing qweather-mcp-go"},{"content":"问题 最近升级 Docker-Desktop 后，发现 push 镜像到 nexus 注册表时，报错如下：\nerror from registry: unknown 升级到 v4.42.1 时，甚至出现镜像不能顺利上传的问题。\n解决 通过查阅相关 issue , 发现是 nexus 版本太低，不支持目前主流的 OCI 镜像标准，如果想要解决，可以有两种方法解决:\n1 升级 nexus 版本,从稳定版 Nexus 3.47.1 支持 OCI，升级到此版本以上即可解决。\n2 通过 \u0026ndash;provenance=false 参数解决，\u0026ndash;provenance 标志是 docker buildx build 命令的一个选项，用于控制是否生成 provenance 凭证 。它是 \u0026ndash;attest=type=provenance 的简写形式 。\n启用 Provenance (默认行为): 在较新版本的 Buildx 中，provenance 凭证是默认启用的 。您也可以显式地使用 true 来启用它，这会以 mode=min 的模式附加凭证 为了兼容旧的镜像仓库，可以禁用。\n小结 本文讲述了在使用 docker push 时遇到由于注册表版本太低导致的推送镜像失败问题，并提出了两个解决方案，对于两个方案，如果允许升级的话，最好还是更新 nexus 版本来解决，不能升级的话可以使用 \u0026ndash;provenance=false 参数解决。\n参考 https://github.com/docker/build-push-action/issues/780#issuecomment-1408361775 https://github.com/docker/buildx/issues/1653 https://central.sonatype.org/faq/what-happened-to-issues-sonatype-org/ https://github.com/docker/buildx/issues/1513#issuecomment-1401751716 ","permalink":"https://jasminides.com/posts/docker-push-error/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近升级 Docker-Desktop 后，发现 push 镜像到 nexus 注册表时，报错如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eerror from registry: unknown\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e升级到 v4.42.1 时，甚至出现镜像不能顺利上传的问题。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e通过查阅相关 issue , 发现是 nexus 版本太低，不支持目前主流的 OCI 镜像标准，如果想要解决，可以有两种方法解决:\u003c/p\u003e\n\u003cp\u003e1 升级 nexus 版本,从稳定版 Nexus 3.47.1 支持 OCI，升级到此版本以上即可解决。\u003c/p\u003e\n\u003cp\u003e2 通过 \u0026ndash;provenance=false 参数解决，\u0026ndash;provenance 标志是 docker buildx build 命令的一个选项，用于控制是否生成 provenance 凭证\n。它是 \u0026ndash;attest=type=provenance 的简写形式 。\u003c/p\u003e\n\u003cp\u003e启用 Provenance (默认行为): 在较新版本的 Buildx 中，provenance 凭证是默认启用的 。您也可以显式地使用 true 来启用它，这会以\nmode=min 的模式附加凭证\n为了兼容旧的镜像仓库，可以禁用。\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文讲述了在使用 docker push 时遇到由于注册表版本太低导致的推送镜像失败问题，并提出了两个解决方案，对于两个方案，如果允许升级的话，最好还是更新 nexus 版本来解决，不能升级的话可以使用 \u0026ndash;provenance=false 参数解决。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/docker/build-push-action/issues/780#issuecomment-1408361775\"\u003ehttps://github.com/docker/build-push-action/issues/780#issuecomment-1408361775\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/docker/buildx/issues/1653\"\u003ehttps://github.com/docker/buildx/issues/1653\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://central.sonatype.org/faq/what-happened-to-issues-sonatype-org/\"\u003ehttps://central.sonatype.org/faq/what-happened-to-issues-sonatype-org/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/docker/buildx/issues/1513#issuecomment-1401751716\"\u003ehttps://github.com/docker/buildx/issues/1513#issuecomment-1401751716\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Docker Push Error"},{"content":"前言 Dify 是一个开源的 LLM 应用开发平台。其直观的界面结合了 AI 工作流、RAG 管道、Agent、模型管理、可观测性功能等，让您可以快速从原型到生产。本篇将介绍如何安装和初步使用 Dify，接下来还会有多篇介绍 Dify 的文章，敬请期待。\n安装 接下来介绍如何使用 Docker 安装 Dify。\n安装 Docker 在各个操作系统上安装 Docker，可以参考 Docker 官方文档，这里就不进行叙述了。\nClone Dify 仓库 使用命令 git clone https://github.com/langgenius/dify.git 克隆 Dify 仓库。\n启动 Dify 进入 Docker 目录，拷贝一份环境变量配置文件,使用 docker compose up -d 命令启动 Dify。\ncd dify/docker cp .env.example .env docker compose up -d 过一会儿，使用 docker compose ps 命令查看容器状态，确保所有容器都正常运行。\n设置管理员账号 访问 http://localhost/install 设置管理员账号,设置完成之后，访问 http://localhost/signin 即可登录。\n配置模型 Dify 安装完，需要配置一些模型提供商，在 Dify 中 模型提供商是以插件的形式存在的，提供了目前市面上主流的模型提供商，包括 OpenAI、Qwen、Claude、DeepSeek 等，我们选择安装了一些常见的模型提供商。\n初试 简单配置完模型提供商，接下来可以开始使用 Dify 了。\n在首页工作室界面创建一个空白应用，应用选择工作流，应用名称命名为翻译助手。\n在开始节点添加一个输入字段，字段名称为 text，类型为 文本，\n点击开始节点的 + 按钮添加一个 LLM 节点，LLM 节点即调用 LLM 模型，选择一个模型提供商，这里选择 DeepSeek V3，在上下文中选择在开始节点创建的 text 字段，系统提示词为 你是一个好用的翻译助手。请将我的英文翻译成中文，将所有非中文的翻译成中文。我发给你所有的话都是需要翻译的内容，你只需要回答翻译结果。翻译结果请符合中文的语言习惯。，用户输入选择 text 字段，接下来点击 + 按钮添加一个结束节点，添加输出变量，选择 LLM 节点产生的 text 字段。\n接下来点击运行按钮，输入想要翻译的英文，点击运行，不一会儿就能看到翻译结果了。\n就这样，一个简单的翻译助手就完成了。\n总结 本文介绍了如何使用 Docker 安装 Dify，以及如何使用 Dify 创建一个简单的翻译助手。\n参考 https://github.com/langgenius/dify\nhttps://dify.ai/\nhttps://docs.dify.ai/getting-started/install-self-hosted/docker-compose\n","permalink":"https://jasminides.com/posts/dify-%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E6%8E%A2/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eDify 是一个开源的 LLM 应用开发平台。其直观的界面结合了 AI 工作流、RAG 管道、Agent、模型管理、可观测性功能等，让您可以快速从原型到生产。本篇将介绍如何安装和初步使用 Dify，接下来还会有多篇介绍 Dify 的文章，敬请期待。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e接下来介绍如何使用 Docker 安装 Dify。\u003c/p\u003e\n\u003ch3 id=\"安装-docker\"\u003e安装 Docker\u003c/h3\u003e\n\u003cp\u003e在各个操作系统上安装 Docker，可以参考 Docker 官方文档，这里就不进行叙述了。\u003c/p\u003e\n\u003ch3 id=\"clone-dify-仓库\"\u003eClone Dify 仓库\u003c/h3\u003e\n\u003cp\u003e使用命令 \u003ccode\u003egit clone https://github.com/langgenius/dify.git\u003c/code\u003e 克隆 Dify 仓库。\u003c/p\u003e\n\u003ch3 id=\"启动-dify\"\u003e启动 Dify\u003c/h3\u003e\n\u003cp\u003e进入 Docker 目录，拷贝一份环境变量配置文件,使用 \u003ccode\u003edocker compose up -d\u003c/code\u003e 命令启动 Dify。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd dify/docker\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecp .env.example .env\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker compose up -d\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e过一会儿，使用 \u003ccode\u003edocker compose ps\u003c/code\u003e 命令查看容器状态，确保所有容器都正常运行。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/dify1/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"设置管理员账号\"\u003e设置管理员账号\u003c/h3\u003e\n\u003cp\u003e访问 \u003ccode\u003ehttp://localhost/install\u003c/code\u003e 设置管理员账号,设置完成之后，访问 \u003ccode\u003ehttp://localhost/signin\u003c/code\u003e 即可登录。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/dify1/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e","title":"Dify 学习 - 安装和初探"},{"content":"前言 前段时间看到了一个项目 mi-gpt ,可以将你的小爱音箱接入 gpt，改造成专属于你的语音助手。\n接下来就由作者来介绍小爱同学从零接入 deepseek 的过程。\n设置环境变量和配置文件 mi-gpt 有两种部署方式，一是使用 docker 部署，二是使用 Node.js 进行部署，本文使用 docker 进行部署使用。\n需要提供两个文件 .env 和 .migpt.js 文件，.migpt.js 是配置文件，包括一些配置，.env 是环境变量文件，存放 gpt 密钥相关文件。文件的例子可以从仓库里复制，然后进行相应的修改。\n启动 使用以下命令启动 docker:\ndocker run -d --env-file $(pwd)/.env -v $(pwd)/.migpt.js:/app/.migpt.js idootop/mi-gpt:latest windows 环境下需要将$(pwd) 替换为绝对路径。\n启动后可以通过 callAIKeywords 设置的关键字调用 ai 来响应用户的消息。\n小结 本文介绍了使用 mi-gpt 升级你的闲置的小爱音箱，通过简单的测试和使用，个人感觉还不够完善，稳定性不够好，感兴趣的读者可以根据本文的内容进行自行搭建尝试。\n参考 https://github.com/idootop/mi-gpt ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-gpt-%E6%94%B9%E9%80%A0%E4%BD%A0%E7%9A%84%E5%B0%8F%E7%B1%B3%E9%9F%B3%E7%AE%B1/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e前段时间看到了一个项目 \u003ccode\u003emi-gpt\u003c/code\u003e ,可以将你的小爱音箱接入 gpt，改造成专属于你的语音助手。\u003c/p\u003e\n\u003cp\u003e接下来就由作者来介绍小爱同学从零接入 deepseek 的过程。\u003c/p\u003e\n\u003ch2 id=\"设置环境变量和配置文件\"\u003e设置环境变量和配置文件\u003c/h2\u003e\n\u003cp\u003emi-gpt 有两种部署方式，一是使用 docker 部署，二是使用 Node.js 进行部署，本文使用 docker 进行部署使用。\u003c/p\u003e\n\u003cp\u003e需要提供两个文件 .env 和 .migpt.js 文件，.migpt.js 是配置文件，包括一些配置，.env 是环境变量文件，存放 gpt 密钥相关文件。文件的例子可以从仓库里复制，然后进行相应的修改。\u003c/p\u003e\n\u003ch2 id=\"启动\"\u003e启动\u003c/h2\u003e\n\u003cp\u003e使用以下命令启动 docker:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edocker run -d --env-file $(pwd)/.env -v $(pwd)/.migpt.js:/app/.migpt.js idootop/mi-gpt:latest\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewindows 环境下需要将$(pwd) 替换为绝对路径。\u003c/p\u003e\n\u003cp\u003e启动后可以通过 callAIKeywords 设置的关键字调用 ai 来响应用户的消息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/mi-gpt/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文介绍了使用 mi-gpt 升级你的闲置的小爱音箱，通过简单的测试和使用，个人感觉还不够完善，稳定性不够好，感兴趣的读者可以根据本文的内容进行自行搭建尝试。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/idootop/mi-gpt\"\u003ehttps://github.com/idootop/mi-gpt\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"使用 gpt 改造你的小米音箱"},{"content":"前言 今天在编译构建一个 node.js 项目时，在构建过程中遇到了一些问题，本文将记录问题及对应的解决方案。\n问题 1 在执行 npm run build 遇到此提示：\nerror Expected linebreaks to be \u0026#39;LF\u0026#39; but found \u0026#39;CRLF\u0026#39; linebreak-style 根据信息可以看出是 eslint 的报错，查看 .eslintrc.js 文件，修改 linebreak-style 对应的行：\n\u0026#39;linebreak-style\u0026#39;: [\u0026#39;error\u0026#39;, process.platform === \u0026#39;win32\u0026#39; ? \u0026#39;windows\u0026#39; : \u0026#39;unix\u0026#39;], 重新运行命令，顺利构建成功。\n这个问题的原因是项目的作者可能是使用 Linux 或 Mac 构建的，没有考虑 Windows 的情况，通过这行配置，可以根据运行的环境来决定 lint 规则。\n问题 2 在执行 npm start 遇到了第二个问题：\nGenerating browser application bundles (phase: building)...node:internal/crypto/hash:79 this[kHandle] = new _Hash(algorithm, xofLen, algorithmId, getHashCache()); ^ Error: error:0308010C:digital envelope routines::unsupported at new Hash (node:internal/crypto/hash:79:19) at Object.createHash (node:crypto:139:10) at BulkUpdateDecorator.hashFactory (D:\\code\\xx\\node_modules\\webpack\\lib\\util\\createHash.js:145:18) at BulkUpdateDecorator.update (D:\\code\\xx\\node_modules\\webpack\\lib\\util\\createHash.js:46:50) at RawSource.updateHash (D:\\code\\xx\\node_modules\\webpack\\node_modules\\webpack-sources\\lib\\RawSource.js:77:8) at NormalModule._initBuildHash (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:880:17) at handleParseResult (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:946:10) at D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:1040:4 at processResult (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:755:11) at D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:819:5 { opensslErrorStack: [ \u0026#39;error:03000086:digital envelope routines::initialization error\u0026#39;, \u0026#39;error:0308010C:digital envelope routines::unsupported\u0026#39; ], library: \u0026#39;digital envelope routines\u0026#39;, reason: \u0026#39;unsupported\u0026#39;, code: \u0026#39;ERR_OSSL_EVP_UNSUPPORTED\u0026#39; } 根据这个报错，推测可能是啥 hash 算法不支持，通过查阅相关资料，得到以下解决方案：\n1 降级 Node.js 版本，降级版本至 V16 版本以使用不安全的 libssl 版本。显然这不是特别好的方法。\n2 通过环境变量，让程序使用旧的 OpenSSL 提供程序\nexport NODE_OPTIONS=--openssl-legacy-provider Windows\nset NODE_OPTIONS=--openssl-legacy-provider 3 升级依赖\n最佳作法是通过升级所使用的依赖。\n参考 https://stackoverflow.com/questions/37826449/expected-linebreaks-to-be-lf-but-found-crlf-linebreak-style\nhttps://stackoverflow.com/questions/69692842/error-message-error0308010cdigital-envelope-routinesunsupported\n","permalink":"https://jasminides.com/posts/node.js-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天在编译构建一个 node.js 项目时，在构建过程中遇到了一些问题，本文将记录问题及对应的解决方案。\u003c/p\u003e\n\u003ch2 id=\"问题-1\"\u003e问题 1\u003c/h2\u003e\n\u003cp\u003e在执行 \u003ccode\u003enpm run build\u003c/code\u003e 遇到此提示：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eerror  Expected linebreaks to be \u0026#39;LF\u0026#39; but found \u0026#39;CRLF\u0026#39;  linebreak-style\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e根据信息可以看出是  eslint 的报错，查看 .eslintrc.js 文件，修改 linebreak-style 对应的行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#39;linebreak-style\u0026#39;: [\u0026#39;error\u0026#39;, process.platform === \u0026#39;win32\u0026#39; ? \u0026#39;windows\u0026#39; : \u0026#39;unix\u0026#39;],\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重新运行命令，顺利构建成功。\u003c/p\u003e\n\u003cp\u003e这个问题的原因是项目的作者可能是使用 Linux 或 Mac 构建的，没有考虑 Windows 的情况，通过这行配置，可以根据运行的环境来决定 lint 规则。\u003c/p\u003e\n\u003ch2 id=\"问题-2\"\u003e问题 2\u003c/h2\u003e\n\u003cp\u003e在执行 \u003ccode\u003enpm start\u003c/code\u003e 遇到了第二个问题：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eGenerating browser application bundles (phase: building)...node:internal/crypto/hash:79\n  this[kHandle] = new _Hash(algorithm, xofLen, algorithmId, getHashCache());\n                  ^\n\nError: error:0308010C:digital envelope routines::unsupported\n    at new Hash (node:internal/crypto/hash:79:19)\n    at Object.createHash (node:crypto:139:10)\n    at BulkUpdateDecorator.hashFactory (D:\\code\\xx\\node_modules\\webpack\\lib\\util\\createHash.js:145:18)\n    at BulkUpdateDecorator.update (D:\\code\\xx\\node_modules\\webpack\\lib\\util\\createHash.js:46:50)\n    at RawSource.updateHash (D:\\code\\xx\\node_modules\\webpack\\node_modules\\webpack-sources\\lib\\RawSource.js:77:8)\n    at NormalModule._initBuildHash (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:880:17)\n    at handleParseResult (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:946:10)\n    at D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:1040:4\n    at processResult (D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:755:11)\n    at D:\\code\\xx\\node_modules\\webpack\\lib\\NormalModule.js:819:5 {\n  opensslErrorStack: [\n    \u0026#39;error:03000086:digital envelope routines::initialization error\u0026#39;,\n    \u0026#39;error:0308010C:digital envelope routines::unsupported\u0026#39;\n  ],\n  library: \u0026#39;digital envelope routines\u0026#39;,\n  reason: \u0026#39;unsupported\u0026#39;,\n  code: \u0026#39;ERR_OSSL_EVP_UNSUPPORTED\u0026#39;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e根据这个报错，推测可能是啥 hash 算法不支持，通过查阅相关资料，得到以下解决方案：\u003c/p\u003e","title":"node.js 项目构建问题及解决"},{"content":"问题 最近在使用 go 解析 csv 文件时，读取并打印 csv 的每行内容时，读取到第 11 行时，程序报错，提示：\nrecord on line 11: wrong number of fields 分析 遇到这个问题，我第一反应是 csv 文件的格式有问题，于是我使用 cat 命令查看 csv 文件，发现 csv 文件的格式是正确的，没有问题。 并查看分隔符是正确的，于是可以得出 csv 文件是没有问题的。\n接下来就查看所使用的标准库 encoding/csv，通过查阅文档及 issue, 发现 csv 包中的 FieldsPerRecord 字段，FieldsPerRecord 表示 csv 文件每行的预期字段数， 如果为正数，则读取的每条记录都必须有对应的字段数，如果为 0，则会以第一条记录的数量为标准，接下来每行都必须有对应的字段数，如果为负数，则不会检查字段数。\n修改后的代码如下：\npackage main import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; ) func main() { file, err := os.Open(\u0026#34;./xx.csv\u0026#34;) if err != nil { log.Fatal(err) } defer file.Close() // 创建一个 CSV reader reader := csv.NewReader(file) reader.FieldsPerRecord = -1 // 循环读取 CSV 文件中的每一行数据 for { record, err := reader.Read() if err == io.EOF { break } if err != nil { log.Fatal(err) } // 处理每一行数据 fmt.Println(record) fmt.Println(len(record)) } } 小结 本文记录了在使用 go 解析 csv 时遇到字段数不匹配的问题，并分析了问题的原因，并给出了相应的解决方法。\n参考 https://pkg.go.dev/encoding/csv#Reader.FieldsPerRecord https://stackoverflow.com/questions/61336787/how-do-i-fix-the-wrong-number-of-fields-with-the-missing-commas-in-csv-file-in ","permalink":"https://jasminides.com/posts/go-%E8%A7%A3%E6%9E%90-csv-%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在使用 go 解析 csv 文件时，读取并打印 csv 的每行内容时，读取到第 11 行时，程序报错，提示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erecord on line 11: wrong number of fields\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"分析\"\u003e分析\u003c/h2\u003e\n\u003cp\u003e遇到这个问题，我第一反应是 csv 文件的格式有问题，于是我使用 \u003ccode\u003ecat\u003c/code\u003e 命令查看 csv 文件，发现 csv 文件的格式是正确的，没有问题。\n并查看分隔符是正确的，于是可以得出 csv 文件是没有问题的。\u003c/p\u003e\n\u003cp\u003e接下来就查看所使用的标准库 encoding/csv，通过查阅文档及 issue, 发现 csv 包中的 FieldsPerRecord 字段，FieldsPerRecord 表示 csv 文件每行的预期字段数，\n如果为正数，则读取的每条记录都必须有对应的字段数，如果为 0，则会以第一条记录的数量为标准，接下来每行都必须有对应的字段数，如果为负数，则不会检查字段数。\u003c/p\u003e\n\u003cp\u003e修改后的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/csv\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;./xx.csv\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 创建一个 CSV reader\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ereader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecsv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewReader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ereader\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFieldsPerRecord\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 循环读取 CSV 文件中的每一行数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003erecord\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereader\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRead\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEOF\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 处理每一行数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erecord\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(len(\u003cspan style=\"color:#a6e22e\"\u003erecord\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文记录了在使用 go 解析 csv 时遇到字段数不匹配的问题，并分析了问题的原因，并给出了相应的解决方法。\u003c/p\u003e","title":"go 解析 csv 文件报错"},{"content":"前言 电子邮件是现代办公和通信中不可或缺的工具，它广泛应用于数据交换和工作沟通。为了更高效地处理邮件内容，我们可以借助程序来实现自动化处理。本文将详细介绍如何使用 Go 语言来接收和处理电子邮件。\n通过查阅资料，了解到可以通过 IMAP 协议来接收电子邮件，IMAP 协议是电子邮件接收协议，它允许客户端通过网络连接到邮件服务器，并从服务器上下载邮件。除了 IMAP 协议，还有 POP3 协议，POP3 协议与 IMAP 协议类似，但它在在客户端上对邮件的操作不会反馈到邮件服务器上，也就是说，在客户端的操作不会影响服务器上的邮件。当你需要从多个邮件客户端访问邮件时，IMAP 协议是一个更好的选择。\ngo-imap 通过对比不同的库，最后选择了 go-imap 库，它是一个基于 IMAP 协议的 Go 语言库，可以通过它构建客户端或者服务端。\n安装 可以通过以下命令安装：\ngo get github.com/emersion/go-imap 使用 我们将通过官方的例子进行切入：\n先通过 DialTLS 连接对应的电子邮箱 IMAP 服务器，然后通过登录邮箱，获取所有的邮箱文件夹，最后选择收件箱，获取收件箱中最新的 4 封邮件，并打印没封邮件的主题。\n运行代码：\n2024/11/23 16:16:11 Connecting to server... 2024/11/23 16:16:11 Connected 2024/11/23 16:16:12 Logged in 2024/11/23 16:16:12 Mailboxes: 2024/11/23 16:16:13 * 其他文件夹 2024/11/23 16:16:13 * Drafts 2024/11/23 16:16:13 * Deleted Messages 2024/11/23 16:16:13 * Sent Messages 2024/11/23 16:16:13 * Junk 2024/11/23 16:16:13 * INBOX 2024/11/23 16:16:13 Flags for INBOX: [\\Answered \\Flagged \\Deleted \\Draft \\Seen] 2024/11/23 16:16:13 Last 4 messages: 2024/11/23 16:16:13 * =?GBK?B?xx?= 2024/11/23 16:16:13 * =?GBK?B?xxx?= 2024/11/23 16:16:13 * =?GBK?B?xx==?= 2024/11/23 16:16:13 * =?GBK?B?xx+k=?= 2024/11/23 16:16:13 Done! 可以看到打印出来的邮件主题是乱码，通过查询资料，了解到邮件的字段是采用特殊编码的，需要进行解码。可以通过 https://github.com/emersion/go-message 这个库进行解码。\n修改后的代码如下：\n通过设置 CharsetReader 顺利解码，主题顺利打印成功。\n参考 https://www.cloudflare.com/learning/email-security/what-is-imap/ https://support.microsoft.com/en-us/office/what-are-imap-and-pop-ca2c5799-49f9-4079-aefe-ddca85d5b1c9 https://github.com/emersion/go-imap/tree/v1 https://datatracker.ietf.org/doc/html/rfc3501 https://github.com/emersion/go-message?tab=readme-ov-file ","permalink":"https://jasminides.com/posts/go-recivie-email/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e电子邮件是现代办公和通信中不可或缺的工具，它广泛应用于数据交换和工作沟通。为了更高效地处理邮件内容，我们可以借助程序来实现自动化处理。本文将详细介绍如何使用 Go 语言来接收和处理电子邮件。\u003c/p\u003e\n\u003cp\u003e通过查阅资料，了解到可以通过 IMAP 协议来接收电子邮件，IMAP 协议是电子邮件接收协议，它允许客户端通过网络连接到邮件服务器，并从服务器上下载邮件。除了 IMAP 协议，还有 POP3 协议，POP3 协议与 IMAP 协议类似，但它在在客户端上对邮件的操作不会反馈到邮件服务器上，也就是说，在客户端的操作不会影响服务器上的邮件。当你需要从多个邮件客户端访问邮件时，IMAP 协议是一个更好的选择。\u003c/p\u003e\n\u003ch2 id=\"go-imap\"\u003ego-imap\u003c/h2\u003e\n\u003cp\u003e通过对比不同的库，最后选择了 go-imap 库，它是一个基于 IMAP 协议的 Go 语言库，可以通过它构建客户端或者服务端。\u003c/p\u003e\n\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cp\u003e可以通过以下命令安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/emersion/go-imap\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"使用\"\u003e使用\u003c/h3\u003e\n\u003cp\u003e我们将通过官方的例子进行切入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/imap/carbon.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e先通过 DialTLS 连接对应的电子邮箱 IMAP 服务器，然后通过登录邮箱，获取所有的邮箱文件夹，最后选择收件箱，获取收件箱中最新的 4 封邮件，并打印没封邮件的主题。\u003c/p\u003e\n\u003cp\u003e运行代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:11 Connecting to server...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:11 Connected\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:12 Logged in\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:12 Mailboxes:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * 其他文件夹\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * Drafts\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * Deleted Messages\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * Sent Messages\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * Junk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * INBOX\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 Flags for INBOX: [\\Answered \\Flagged \\Deleted \\Draft \\Seen]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 Last 4 messages:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * =?GBK?B?xx?=\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * =?GBK?B?xxx?=\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * =?GBK?B?xx==?=\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 * =?GBK?B?xx+k=?=\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2024/11/23 16:16:13 Done!\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到打印出来的邮件主题是乱码，通过查询资料，了解到邮件的字段是采用特殊编码的，需要进行解码。可以通过 \u003ca href=\"https://github.com/emersion/go-message\"\u003ehttps://github.com/emersion/go-message\u003c/a\u003e 这个库进行解码。\u003c/p\u003e","title":"Go Recivie Email"},{"content":"前言 最近需要调用一个第三方的接口进行数据的采集，这个接口是基于 SOAP 协议的，所以需要使用 soap 相关的客户端进行调用。于是我调研了一些开源的 golang 的 soap 客户端，发现 go-soap 这个库的文档比较完善，而且使用起来也比较简单，所以就选择了这个库。\n安装 使用以下命令进行安装：\ngo get github.com/tiaguinho/gosoap 使用 由于目前没有特别好的例子，这里就以官方的例子进行说明。\n官方的代码如下：\npackage main import ( \u0026#34;encoding/xml\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/tiaguinho/gosoap\u0026#34; ) // GetIPLocationResponse will hold the Soap response type GetIPLocationResponse struct { GetIPLocationResult string `xml:\u0026#34;GetIpLocationResult\u0026#34;` } // GetIPLocationResult will type GetIPLocationResult struct { XMLName xml.Name `xml:\u0026#34;GeoIP\u0026#34;` Country string `xml:\u0026#34;Country\u0026#34;` State string `xml:\u0026#34;State\u0026#34;` } var ( r GetIPLocationResponse ) func main() { httpClient := \u0026amp;http.Client{ Timeout: 1500 * time.Millisecond, } soap, err := gosoap.SoapClient(\u0026#34;http://wsgeoip.lavasoft.com/ipservice.asmx?WSDL\u0026#34;, httpClient) if err != nil { log.Fatalf(\u0026#34;SoapClient error: %s\u0026#34;, err) } // Use gosoap.ArrayParams to support fixed position params params := gosoap.Params{ \u0026#34;sIp\u0026#34;: \u0026#34;8.8.8.8\u0026#34;, } res, err := soap.Call(\u0026#34;GetIpLocation\u0026#34;, params) if err != nil { log.Fatalf(\u0026#34;Call error: %s\u0026#34;, err) } res.Unmarshal(\u0026amp;r) // GetIpLocationResult will be a string. We need to parse it to XML result := GetIPLocationResult{} err = xml.Unmarshal([]byte(r.GetIPLocationResult), \u0026amp;result) if err != nil { log.Fatalf(\u0026#34;xml.Unmarshal error: %s\u0026#34;, err) } if result.Country != \u0026#34;US\u0026#34; { log.Fatalf(\u0026#34;error: %+v\u0026#34;, r) } log.Println(\u0026#34;Country: \u0026#34;, result.Country) log.Println(\u0026#34;State: \u0026#34;, result.State) } 可以看到 go-soap 的使用跟常规的 http client 的使用方法类似，都是创建一个连接，准备方法的参数，然后调用相应的方法。 这段代码展示了如何使用 go-soap 库连接 SOAP 服务、发送请求、处理响应，以及如何解析 XML 格式的返回数据。\n不足 在测试 go-soap 的过程中，发现 go-soap 缺少了一些功能，比如：接口鉴权功能，现在的一些接口都需要鉴权，go-soap 目前没有提供鉴权的功能，需要自己实现。\n除了使用 go-soap 之外，还可以手动 使用 http 库进行调用，但是这样需要自己处理一些细节，比如：请求头，请求体，响应体等，比较麻烦。所以如果需要调用 soap 服务的话，建议使用 go-soap 库。\n参考 https://github.com/tiaguinho/gosoap ","permalink":"https://jasminides.com/posts/go-soap-%E7%AE%80%E4%BB%8B/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近需要调用一个第三方的接口进行数据的采集，这个接口是基于 SOAP 协议的，所以需要使用 soap 相关的客户端进行调用。于是我调研了一些开源的 golang 的 soap 客户端，发现 go-soap 这个库的文档比较完善，而且使用起来也比较简单，所以就选择了这个库。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e使用以下命令进行安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/tiaguinho/gosoap\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e由于目前没有特别好的例子，这里就以官方的例子进行说明。\u003c/p\u003e\n\u003cp\u003e官方的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/xml\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/tiaguinho/gosoap\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// GetIPLocationResponse will hold the Soap response\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResponse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResult\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`xml:\u0026#34;GetIpLocationResult\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// GetIPLocationResult will\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResult\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eXMLName\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exml\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`xml:\u0026#34;GeoIP\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eCountry\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`xml:\u0026#34;Country\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eState\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`xml:\u0026#34;State\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResponse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttpClient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eTimeout\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1500\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMillisecond\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esoap\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egosoap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSoapClient\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://wsgeoip.lavasoft.com/ipservice.asmx?WSDL\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehttpClient\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SoapClient error: %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Use gosoap.ArrayParams to support fixed position params\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egosoap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParams\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sIp\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;8.8.8.8\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esoap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCall\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GetIpLocation\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Call error: %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// GetIpLocationResult will be a string. We need to parse it to XML\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResult\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003exml\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetIPLocationResult\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xml.Unmarshal error: %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCountry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;US\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error: %+v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Country: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCountry\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;State: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eState\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到 go-soap 的使用跟常规的 http client 的使用方法类似，都是创建一个连接，准备方法的参数，然后调用相应的方法。\n这段代码展示了如何使用 go-soap 库连接 SOAP 服务、发送请求、处理响应，以及如何解析 XML 格式的返回数据。\u003c/p\u003e","title":"go-soap 简介"},{"content":"前言 最近遇到 Docker Desktop 构建 node 项目时，由于网络问题导致的构建失败问题，本文将介绍两个给 Docker Desktop 设置网络代理的方法。\n修改 WSL2 配置 为了测试代理的效果，这里创建一个 go 服务，代码很简单，就是访问 https://www.google.com/ 并返回结果。如果能正常访问，说明代理设置成功。\npackage main import \u0026#34;net/http\u0026#34; func main() { resp, err := http.Get(\u0026#34;https://www.google.com/\u0026#34;) if err != nil { panic(err) } defer resp.Body.Close() println(resp.Status) } 第一种方法是修改 WSL2 的配置，在 windows C:\\Users\u0026lt;your_username\u0026gt; 目录下创建 .wslconfig 文件，输入以下内容：\n[experimental] autoMemoryReclaim=gradual networkingMode=mirrored dnsTunneling=true firewall=true autoProxy=true 然后重启 WSL: wsl --shutdown\nnetworkingMode 为 mirrored 表示网络模式使用镜像模式，会镜像宿主机的网络设置，能更好的集成宿主机和 WSL 的网络。\nautoProxy 开启了自动代理的功能，意味 WSL 自动配置代理设置。\n配置好，我们构建 Docker 镜像，运行：\n可以看到代理成功生效，可以正常访问。\n接下来介绍通过修改 Docker Desktop 的配置文件，设置代理。\n修改 Docker Desktop 配置 打开 Docker Desktop 的设置，找到 Resources Proxies 选项，设置代理。\n运行 Docker 镜像，可以看到代理成功生效，可以正常访问。\n小结 本文介绍了两种给 Docker Desktop 设置网络代理的方法，分别是修改 WSL2 配置和修改 Docker Desktop 配置。\n参考 https://docs.docker.com/engine/network/drivers/host/#docker-desktop ","permalink":"https://jasminides.com/posts/docker-desktop-%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近遇到 Docker Desktop 构建 node 项目时，由于网络问题导致的构建失败问题，本文将介绍两个给 Docker Desktop 设置网络代理的方法。\u003c/p\u003e\n\u003ch2 id=\"修改-wsl2-配置\"\u003e修改 WSL2 配置\u003c/h2\u003e\n\u003cp\u003e为了测试代理的效果，这里创建一个 go 服务，代码很简单，就是访问 \u003ccode\u003ehttps://www.google.com/\u003c/code\u003e 并返回结果。如果能正常访问，说明代理设置成功。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGet\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://www.google.com/\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprintln(\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStatus\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e第一种方法是修改 WSL2 的配置，在 windows C:\\Users\u0026lt;your_username\u0026gt; 目录下创建 .wslconfig 文件，输入以下内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[experimental]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eautoMemoryReclaim=gradual  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetworkingMode=mirrored\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ednsTunneling=true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efirewall=true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eautoProxy=true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后重启 WSL: \u003ccode\u003ewsl --shutdown\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003enetworkingMode 为 mirrored 表示网络模式使用镜像模式，会镜像宿主机的网络设置，能更好的集成宿主机和 WSL 的网络。\u003c/p\u003e\n\u003cp\u003eautoProxy 开启了自动代理的功能，意味 WSL 自动配置代理设置。\u003c/p\u003e\n\u003cp\u003e配置好，我们构建 Docker 镜像，运行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/wsl-proxy/image.png\" alt=\"wsl2 配置\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到代理成功生效，可以正常访问。\u003c/p\u003e","title":"Docker Desktop 设置网络代理"},{"content":"前言 本文将介绍当初我搭建这个博客网站的时候，是如何将 Hugo 网站部署到 GitHub 上的，本文会采用与 hugo 官方不同的方式进行部署。\n创建仓库 首先我们在 GitHub 上创建一个仓库，仓库名称为 username.github.io，其中 username 为你的 GitHub 用户名。这个仓库是用来存储 hugo 最终生成的静态网站文件的。再创建一个名称为 blogs 的仓库，这个仓库是用来存储 hugo 网站源内容文件的。\n启用 GitHub Pages 在 username.github.io 仓库中，点击 Settings 选项卡，在 GitHub Pages 中选择 Source 为 从分支部署，然后点击 Save 按钮。\n启用 GitHub Actions 接下来要实现提交 hugo 网站源文件到 blogs 仓库后，自动将 hugo 网站源文件编译成静态网站文件，并提交到 username.github.io 仓库中，这样就可以通过访问 username.github.io 仓库来访问 hugo 网站了。\n生成 personal_token 在配置 Actions 前，需要先生成 personal_token，用于在 GitHub Actions 中使用。我们进入 Settings 选项卡，在 Developer settings 中选择 Personal access tokens，然后选择 Tokens (classic)，然后点击 Generate new token 下的Generate new token(classic)按钮，在 Note 中输入 blog，在 Expiration 中选择 No expiration，在 Select scopes 中选择 repo 和 admin:repo_hook，然后点击 Generate token 按钮，生成 personal_token。\n保存好 personal_token，后面会用到。\n配置 personal_token secret 在 blogs 仓库中，点击 Settings 选项卡，在 Secrets and variables 中选择 Actions，然后点击 New repository secret，在 Name 中输入 ACTION_ACCESS_TOKEN，在 Value 中输入刚刚生成的 personal_token，然后点击 Add secret 按钮。\n配置 GitHub Actions 在 blogs 仓库中，在 .github/workflows 目录下创建一个名为 deploy.yml 的 GitHub Actions 配置文件，内容如下：\nname: github pages # 名字自取 on: push: branches: - master # 这里的意思是当 main 分支发生 push 的时候，运行下面的 jobs，这里先改为 github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-22.04\t# 在什么环境运行任务 steps: - uses: actions/checkout@v4\t# 引用 actions/checkout 这个 action，与所在的 github 仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取 submodule 主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo\t# 步骤名自取 uses: peaceiris/actions-hugo@v3\t# hugo 官方提供的 action，用于在任务环境中获取 hugo with: hugo-version: \u0026#39;latest\u0026#39;\t# 获取最新版本的 hugo # extended: true - name: Build run: hugo --minify\t# 使用 hugo 构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3\t# 一个自动发布 github pages 的 action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同 repo 的情况，不能用于发布到其他 repo external_repository: overstarry/overstarry.github.io\t# 发布到哪个 repo personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }}\t# 发布到其他 repo 需要提供上面生成的 personal access token publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为 hugo 默认生成静态网页到 public 文件夹，所以这里发布 public 文件夹里的内容 publish_branch: master\t# 发布到哪个 branch personal_token 修改为刚刚配置的 personal_token 名称，external_repository 修改为 username.github.io 仓库的地址，publish_branch 修改为 username.github.io 仓库的 branch。\n截止到此，我们就实现了使用 Github Pages 部署 Hugo 网站。如果你想要使用自定义域名，可以参考 Hugo Github Pages 自定义域名 进行配置。\n如果你想将 hugo 网站部署到 cloudflare pages 上，可以参考 Hugo Cloudflare Pages 进行配置。\n参考 https://hugo.opendocs.io/hosting-and-deployment/hosting-on-github/\nhttps://pages.github.com/\nhttps://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site\nhttps://overstarry.vip/posts/github_page%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/\nhttps://developers.cloudflare.com/pages/framework-guides/deploy-a-hugo-site/\n","permalink":"https://jasminides.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo-%E7%BD%91%E7%AB%99/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e本文将介绍当初我搭建这个博客网站的时候，是如何将 Hugo 网站部署到 GitHub 上的，本文会采用与 hugo 官方不同的方式进行部署。\u003c/p\u003e\n\u003ch2 id=\"创建仓库\"\u003e创建仓库\u003c/h2\u003e\n\u003cp\u003e首先我们在 GitHub 上创建一个仓库，仓库名称为 \u003ccode\u003eusername.github.io\u003c/code\u003e，其中 \u003ccode\u003eusername\u003c/code\u003e 为你的 GitHub 用户名。这个仓库是用来存储 hugo 最终生成的静态网站文件的。再创建一个名称为 blogs 的仓库，这个仓库是用来存储 hugo 网站源内容文件的。\u003c/p\u003e\n\u003ch3 id=\"启用-github-pages\"\u003e启用 GitHub Pages\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003eusername.github.io\u003c/code\u003e 仓库中，点击 \u003ccode\u003eSettings\u003c/code\u003e 选项卡，在 \u003ccode\u003eGitHub Pages\u003c/code\u003e 中选择 \u003ccode\u003eSource\u003c/code\u003e 为 从分支部署，然后点击 \u003ccode\u003eSave\u003c/code\u003e 按钮。\u003c/p\u003e\n\u003ch3 id=\"启用-github-actions\"\u003e启用 GitHub Actions\u003c/h3\u003e\n\u003cp\u003e接下来要实现提交 hugo 网站源文件到 \u003ccode\u003eblogs\u003c/code\u003e 仓库后，自动将 hugo 网站源文件编译成静态网站文件，并提交到 \u003ccode\u003eusername.github.io\u003c/code\u003e 仓库中，这样就可以通过访问 \u003ccode\u003eusername.github.io\u003c/code\u003e 仓库来访问 hugo 网站了。\u003c/p\u003e\n\u003ch4 id=\"生成-personal_token\"\u003e生成 personal_token\u003c/h4\u003e\n\u003cp\u003e在配置 Actions 前，需要先生成 personal_token，用于在 GitHub Actions 中使用。我们进入 \u003ccode\u003eSettings\u003c/code\u003e 选项卡，在 \u003ccode\u003eDeveloper settings\u003c/code\u003e 中选择 \u003ccode\u003ePersonal access tokens\u003c/code\u003e，然后选择 \u003ccode\u003eTokens (classic)\u003c/code\u003e，然后点击 \u003ccode\u003eGenerate new token\u003c/code\u003e 下的\u003ccode\u003eGenerate new token(classic)\u003c/code\u003e按钮，在 \u003ccode\u003eNote\u003c/code\u003e 中输入 \u003ccode\u003eblog\u003c/code\u003e，在 \u003ccode\u003eExpiration\u003c/code\u003e 中选择 \u003ccode\u003eNo expiration\u003c/code\u003e，在 \u003ccode\u003eSelect scopes\u003c/code\u003e 中选择 \u003ccode\u003erepo\u003c/code\u003e 和 \u003ccode\u003eadmin:repo_hook\u003c/code\u003e，然后点击 \u003ccode\u003eGenerate token\u003c/code\u003e 按钮，生成 personal_token。\u003c/p\u003e","title":"如何在 Github Pages 上部署 Hugo 网站"},{"content":"v0.dev chat 介绍 v0.dev chat 是 vercel 推出的最新的生成式 AI 聊天机器人，可以通过用户对话的方式来生成相应的 react 代码。\nv0.dev chat 相比 V0.dev 有以下优点：\n最新的 react、next.js、web 技术知识 可以运行 npm 包 更快更可靠的流失传输 接下来将通过官方的几个例子及个人尝试的效果来讲解。\n官方例子 解释 next 缓存机制 打开 https://v0.dev/chat/E8fIPvg，可以看到 bot 很好的通过图表及文字讲述了 next 的缓存机制。\n贪吃蛇游戏 打开这个 https://v0.dev/chat/AjJVzgx，可以看到用户上传蛇的皮肤并一步步引导 bot 生成贪吃蛇游戏。\n个人尝试 接下来将通过一个简单的视频网站例子来尝试 v0.dev chat 的效果。\n先通过简单的提示生成视频网站的初始代码： 可以看到 bot 生成的代码是非常完整的，并且可以运行预览的。接下来继续完善视频网站。\n接下来添加视频下载保存功能 接下来添加视频网站首页功能 通过不断的调整，可以慢慢的形成一个视频网站的雏形。\n总结 v0.dev chat 可以很好的通过对话的方式来生成 react 代码，并且可以运行 npm 包，可以很好的帮助我们快速生成代码。本文通过构建一个视频网站的例子来尝试 v0.dev，由于免费版限制了 message 的数量，感兴趣的可以自行尝试。视频网站的生成步骤可以通过此链接查看：https://v0.dev/chat/PsqNuwjpzXx\n参考 https://v0.dev/chat\nhttps://v0.dev/chat/E8fIPvg\nhttps://v0.dev/chat/AjJVzgx\nhttps://github.com/sharkqwy/v0prompt\nhttps://v0.dev/chat/PsqNuwjpzXx\n","permalink":"https://jasminides.com/posts/v0.dev-chat/","summary":"\u003ch2 id=\"v0dev-chat-介绍\"\u003ev0.dev chat 介绍\u003c/h2\u003e\n\u003cp\u003ev0.dev chat 是 vercel 推出的最新的生成式 AI 聊天机器人，可以通过用户对话的方式来生成相应的 react 代码。\u003c/p\u003e\n\u003cp\u003ev0.dev chat 相比 V0.dev 有以下优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最新的 react、next.js、web 技术知识\u003c/li\u003e\n\u003cli\u003e可以运行 npm 包\u003c/li\u003e\n\u003cli\u003e更快更可靠的流失传输\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来将通过官方的几个例子及个人尝试的效果来讲解。\u003c/p\u003e\n\u003ch2 id=\"官方例子\"\u003e官方例子\u003c/h2\u003e\n\u003ch3 id=\"解释-next-缓存机制\"\u003e解释 next 缓存机制\u003c/h3\u003e\n\u003cp\u003e打开 \u003ca href=\"https://v0.dev/chat/E8fIPvg\"\u003ehttps://v0.dev/chat/E8fIPvg\u003c/a\u003e，可以看到 bot 很好的通过图表及文字讲述了 next 的缓存机制。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"贪吃蛇游戏\"\u003e贪吃蛇游戏\u003c/h3\u003e\n\u003cp\u003e打开这个 \u003ca href=\"https://v0.dev/chat/AjJVzgx\"\u003ehttps://v0.dev/chat/AjJVzgx\u003c/a\u003e，可以看到用户上传蛇的皮肤并一步步引导 bot 生成贪吃蛇游戏。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"个人尝试\"\u003e个人尝试\u003c/h2\u003e\n\u003cp\u003e接下来将通过一个简单的视频网站例子来尝试 v0.dev chat 的效果。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先通过简单的提示生成视频网站的初始代码：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image-2.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到 bot 生成的代码是非常完整的，并且可以运行预览的。接下来继续完善视频网站。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e接下来添加视频下载保存功能\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image-3.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e接下来添加视频网站首页功能\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image-4.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/v0dev/image-5.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e通过不断的调整，可以慢慢的形成一个视频网站的雏形。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003ev0.dev chat 可以很好的通过对话的方式来生成 react 代码，并且可以运行 npm 包，可以很好的帮助我们快速生成代码。本文通过构建一个视频网站的例子来尝试 v0.dev，由于免费版限制了 message 的数量，感兴趣的可以自行尝试。视频网站的生成步骤可以通过此链接查看：https://v0.dev/chat/PsqNuwjpzXx\u003c/p\u003e","title":"V0.dev chat"},{"content":"前言 最近需要写总结报告，以前写总结报告时，往往使用 Word 进行编写，但由于显示排版等问题，本次采用了 Markdown 进行编写，在编写时使用了 Markdown Preview Enhanced 插件。本文介绍 Markdown Preview Enhanced 插件的安装及所使用的功能。\n安装 打开 vscode 编辑器，打开扩展栏，输入 Markdown Preview Enhanced ,第一个就是，点击安装后即可。\n功能介绍 接下来将介绍一些在编写文档中所使用的功能。\ndiagrams Markdown Preview Enhanced 插件支持 low charts, sequence diagrams, mermaid, PlantUML, WaveDrom, GraphViz，Vega \u0026amp; Vega-lite，Ditaa 图像渲染。\n在文档中我使用了 mermaid 和 Vega-lite，Vega-lite 用于绘制图表，mermaid 用于绘制流程图。\n接下来介绍 markdown 中如何使用 Vega-lite 绘制图表，使用以下代码即可绘制一个漂亮的饼图：\n如果想要居中的效果，可以添加 {align=\u0026quot;center\u0026quot;}来设置居中的效果。\nmermaid 可以用来绘制流程图，使用以下代码即可绘制一个简单的流程图：\n如果我们想要添加 css 效果该怎么办呢，可以通过 HTML + css 的形式来显示我们想要的效果：\na\u0026lt;strong style=\u0026#34;color:#F00\u0026#34;\u0026gt;上线\u0026lt;/strong\u0026gt; 可以看到通过这种方式，我们就可以轻松实现我们想要的效果。\n小结 Markdown Preview Enhanced 插件功能非常强大，除了文中介绍的功能，还有 幻灯片、自定义 CSS、主题、自定义 markdown parse 等功能，有兴趣的可以自行探索。\n参考 https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced\nhttps://github.com/shd101wyy/markdown-preview-enhanced\nhttps://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/\nhttps://vega.github.io/vega-lite/\nhttps://github.com/knsv/mermaid\n","permalink":"https://jasminides.com/posts/markdown-preview-enhanced-plugin-introduction-and-simple-use/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近需要写总结报告，以前写总结报告时，往往使用 Word 进行编写，但由于显示排版等问题，本次采用了 Markdown 进行编写，在编写时使用了 Markdown Preview Enhanced 插件。本文介绍  Markdown Preview Enhanced 插件的安装及所使用的功能。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e打开 vscode 编辑器，打开扩展栏，输入 \u003ccode\u003eMarkdown Preview Enhanced\u003c/code\u003e ,第一个就是，点击安装后即可。\u003c/p\u003e\n\u003ch2 id=\"功能介绍\"\u003e功能介绍\u003c/h2\u003e\n\u003cp\u003e接下来将介绍一些在编写文档中所使用的功能。\u003c/p\u003e\n\u003ch3 id=\"diagrams\"\u003ediagrams\u003c/h3\u003e\n\u003cp\u003eMarkdown Preview Enhanced 插件支持 low charts, sequence diagrams, mermaid, PlantUML, WaveDrom, GraphViz，Vega \u0026amp; Vega-lite，Ditaa 图像渲染。\u003c/p\u003e\n\u003cp\u003e在文档中我使用了 mermaid 和 Vega-lite，Vega-lite 用于绘制图表，mermaid 用于绘制流程图。\u003c/p\u003e\n\u003cp\u003e接下来介绍 markdown 中如何使用 Vega-lite 绘制图表，使用以下代码即可绘制一个漂亮的饼图：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/markdown-plugin/carbon%20%281%29.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/markdown-plugin/Snipaste_2024-08-24_00-33-24.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e如果想要居中的效果，可以添加 \u003ccode\u003e{align=\u0026quot;center\u0026quot;}\u003c/code\u003e来设置居中的效果。\u003c/p\u003e\n\u003cp\u003emermaid 可以用来绘制流程图，使用以下代码即可绘制一个简单的流程图：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/markdown-plugin/carbon%20%283%29.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/markdown-plugin/Snipaste_2024-08-24_00-33-32.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e如果我们想要添加 css 效果该怎么办呢，可以通过 HTML + css 的形式来显示我们想要的效果：\u003c/p\u003e","title":"Markdown Preview Enhanced plugin introduction and simple use"},{"content":"前言 今天在 Github 查看一些开源项目时，发现了一个\u0026quot;人性化\u0026quot;的项目 go-humanize，此项目可以将一些常见的容量、时间、千分位转换为人们可以理解的形式，例如一个文件大小是 2000000 bytes，我们不能很好的理解，但如果告诉你是 2mb，我们就能很好的理解了。go-humanize 就是方便的将一些不太能快速理解的数字转换为人们可以理解的形式。\n安装 使用以下命令安装：\ngo get github.com/dustin/go-humanize 使用 接下来分别介绍一些常见的功能。\n容量转换 现在我们有一个文件大小是 52854982 bytes，我们使用 humanize 包的 Bytes 方法将其转换为人们可以理解的形式 53MB，也可以使用 IBytes 方法转换为 MIB 单位的值。也可以使用 ParseBytes 方法将可以理解的形式转换为 bytes 单位的值。\nfmt.Printf(\u0026#34;That file is %s.\\n\u0026#34;, humanize.IBytes(52854982)) fmt.Printf(\u0026#34;That file is %s.\u0026#34;, humanize.Bytes(52854982)) 时间转换 时间转换与容量转换类型，使用方法十分类似，使用方法如下：\nt := time.Now().Add(time.Hour * -7) fmt.Printf(\u0026#34;This was touched %s.\u0026#34;, humanize.Time(t)) //This was touched 7 hours ago. Time 根据相对时间转换为人们可以理解的形式，例如：xx 天之前、xx 小时之后等形式。\n千分位转换 如果我们想在数字中添加逗号，就可以使用 Comma 方法，例如在处理金额时，我们通常会使用逗号将数字分隔开，例如 1,000,000,000\nfmt.Printf(\u0026#34;num is %s.\u0026#34;, humanize.Comma(1000000000)) 还可以使用 Commaf 方法将浮点数转换为千分位形式。\n位序 在日常使用中，我们有时需要表示位序例如 1st、2nd、3rd、4th 等，humanize 包也提供了相应的功能。\nfmt.Printf(\u0026#34;num is %s.\u0026#34;, humanize.Ordinal(1000000000)) 简单看了下源码，发现函数十分简单：\nfunc Ordinal(x int) string { suffix := \u0026#34;th\u0026#34; switch x % 10 { case 1: if x%100 != 11 { suffix = \u0026#34;st\u0026#34; } case 2: if x%100 != 12 { suffix = \u0026#34;nd\u0026#34; } case 3: if x%100 != 13 { suffix = \u0026#34;rd\u0026#34; } } return strconv.Itoa(x) + suffix } 小结 本文介绍了 go-humanize 包的一些使用方法，可以方便的将一些数字转换为人们可以理解的形式。go-humanize 还有一些格式化的函数，感兴趣的读者可以自行查看源码。\n参考 https://groups.google.com/g/golang-nuts/c/l8NhI74jl-4 https://github.com/dustin/go-humanize ","permalink":"https://jasminides.com/posts/go-humanize-%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天在 Github 查看一些开源项目时，发现了一个\u0026quot;人性化\u0026quot;的项目 go-humanize，此项目可以将一些常见的容量、时间、千分位转换为人们可以理解的形式，例如一个文件大小是 2000000 bytes，我们不能很好的理解，但如果告诉你是 2mb，我们就能很好的理解了。go-humanize 就是方便的将一些不太能快速理解的数字转换为人们可以理解的形式。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e使用以下命令安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/dustin/go-humanize\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e接下来分别介绍一些常见的功能。\u003c/p\u003e\n\u003ch3 id=\"容量转换\"\u003e容量转换\u003c/h3\u003e\n\u003cp\u003e现在我们有一个文件大小是 52854982 bytes，我们使用 humanize 包的 Bytes 方法将其转换为人们可以理解的形式 53MB，也可以使用 IBytes 方法转换为 MIB 单位的值。也可以使用 ParseBytes 方法将可以理解的形式转换为 bytes 单位的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;That file is %s.\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehumanize\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eIBytes\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e52854982\u003c/span\u003e)) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;That file is %s.\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehumanize\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBytes\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e52854982\u003c/span\u003e)) \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"时间转换\"\u003e时间转换\u003c/h3\u003e\n\u003cp\u003e时间转换与容量转换类型，使用方法十分类似，使用方法如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHour\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This was touched %s.\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehumanize\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e)) \u003cspan style=\"color:#75715e\"\u003e//This was touched 7 hours ago.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTime 根据相对时间转换为人们可以理解的形式，例如：xx 天之前、xx 小时之后等形式。\u003c/p\u003e\n\u003ch3 id=\"千分位转换\"\u003e千分位转换\u003c/h3\u003e\n\u003cp\u003e如果我们想在数字中添加逗号，就可以使用 Comma 方法，例如在处理金额时，我们通常会使用逗号将数字分隔开，例如 1,000,000,000\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;num is %s.\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehumanize\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eComma\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1000000000\u003c/span\u003e)) \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e还可以使用 Commaf 方法将浮点数转换为千分位形式。\u003c/p\u003e\n\u003ch3 id=\"位序\"\u003e位序\u003c/h3\u003e\n\u003cp\u003e在日常使用中，我们有时需要表示位序例如 1st、2nd、3rd、4th 等，humanize 包也提供了相应的功能。\u003c/p\u003e","title":"go humanize 介绍"},{"content":"前言 最近在使用 WSL 时，想要在 WSL 中使用代理，但由于一些历史原因，宿主机开启的代理，WSL 无法使用，为了解决这个问题，查找了相关文档，在本文记录一下。\n解决 在 windows C:\\Users\u0026lt;your_username\u0026gt; 目录下创建 .wslconfig 文件，输入以下内容：\n[experimental] autoMemoryReclaim=gradual networkingMode=mirrored dnsTunneling=true firewall=true autoProxy=true 然后重启 WSL: wsl --shutdown\nnetworkingMode 为 mirrored 表示网络模式使用镜像模式，会镜像宿主机的网络设置，能更好的集成宿主机和 WSL 的网络。\nautoProxy 开启了自动代理的功能，意味 WSL 自动配置代理设置。\n参考 https://github.com/microsoft/WSL/issues/10753 https://learn.microsoft.com/en-us/windows/wsl/wsl-config#experimental-settings ","permalink":"https://jasminides.com/posts/%E8%A7%A3%E5%86%B3%E6%A3%80%E6%B5%8B%E5%88%B0-localhost-%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%BD%86%E6%9C%AA%E9%95%9C%E5%83%8F%E5%88%B0-wslnat-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84-wsl-%E4%B8%8D%E6%94%AF%E6%8C%81-localhost-%E4%BB%A3%E7%90%86/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在使用 WSL 时，想要在 WSL 中使用代理，但由于一些历史原因，宿主机开启的代理，WSL 无法使用，为了解决这个问题，查找了相关文档，在本文记录一下。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e在 windows C:\\Users\u0026lt;your_username\u0026gt; 目录下创建 .wslconfig 文件，输入以下内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[experimental]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eautoMemoryReclaim=gradual  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetworkingMode=mirrored\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ednsTunneling=true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efirewall=true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eautoProxy=true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后重启 WSL: \u003ccode\u003ewsl --shutdown\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003enetworkingMode 为 mirrored 表示网络模式使用镜像模式，会镜像宿主机的网络设置，能更好的集成宿主机和 WSL 的网络。\u003c/p\u003e\n\u003cp\u003eautoProxy 开启了自动代理的功能，意味 WSL 自动配置代理设置。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/WSL/issues/10753\"\u003ehttps://github.com/microsoft/WSL/issues/10753\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/windows/wsl/wsl-config#experimental-settings\"\u003ehttps://learn.microsoft.com/en-us/windows/wsl/wsl-config#experimental-settings\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"解决检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。"},{"content":"介绍 cody 是一个 AI 编程助手，可以帮助你更快更好的理解代码，编写代码，解决代码中的问题。通过本地代码仓库和远程代码库提取上下文，让你能够更好的理解和编写代码。Cody 目前可以在以下编程工具中使用:\nVS Code JetBrains IDE Neovim (实验性) Web (实验性) Cody 主要有以下功能:\n自动完成 基于代码上下文的自动补全 聊天 在聊天视图中询问代码相关的问题 命令 为常见的操作提供了快捷命令，例如：生成文档，添加测试，检测代码问题 调试 在编辑器中调试代码，帮你寻找代码中的问题 忽略 可以过滤某些文件及过滤某些仓库 价格 介绍完 Cody 的特点后，接下来介绍大家关心的价格问题，Cody 有 3 个版本，分别是 Free、Pro、Enterprise.\nFree 版本为免费版，目前每月提供 20 次聊天次数、500 次代码自动完成，今天查看 sourcegraph 的 blog，发现 Free 版本的额度提高了，代码自动完成次数为无限次，聊天和命令次数增加了 10 倍为 200 次。\nPro 版本为每个月 9 美元，提供了不限次数的代码补全及聊天功能及提供了 GPT-4o 等高级 LLM.\nEnterprise 的价格需要联系 sourcegraph 的销售人员，Enterprise 相较于 Pro 版提供了更多的团队功能。\n安装 接下来介绍如何安装 Cody，主要介绍 VS Code 中如何安装：\n1 打开 VS Code\n2 打开扩展界面，搜索 Cody AI，点击安装\n3 安装完可能需要重启 VS Code\n4 安装完，Cody 就会在活动栏中显示\n使用 接下来介绍 Cody 的主要功能\n代码补全 代码补全是基础功能，Cody 使用了 StarCoder 模型，可以很好的帮助代码的补全，只要输入部分代码或注释，就会出现相应的提示代码。\n聊天 打开一个代码仓库，这里打开 gaby 仓库，gaby 是 Go 官方团队的新型使用了 AI 技术的 Github bot, 新建一个 Chat 窗口，询问 gaby 仓库的相关信息，可以看到很好的回答了项目的每个文件夹的功能。\n在聊天中，Cody 也可以针对问题生成代码，你可以选择相应的代码插入原有的代码中。\n命令 在 Cody 菜单中有一个独立的命令面板，里面提供了常见的聊天，编辑代码，解释代码等功能，可以方便的使用。还可以通过自定义命令功能创建重复使用的提示词，以适应相应的开发流程。\nOpenCtx 通过 OpenCtx，用户提供相关的上下文信息，可以更好的理解代码。\n解释代码，编写代码单元测试这些功能就不一一介绍了，都是编程助手中常用的功能。\n小结 本文简单的介绍了 Cody 的功能，通过 Cody 可以更好的理解代码，编写代码，解决代码中的问题。\n相较于作者使用过的其它编程助手，Cody 提供的 LLM 更多，并且能更好的通过代码仓库上下文理解代码。\n参考 https://sourcegraph.com/docs/cody https://sourcegraph.com/blog/making-cody-free-10x-better ","permalink":"https://jasminides.com/posts/ai-%E7%BC%96%E7%A8%8B%E5%8A%A9%E6%89%8B-cody/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003ecody 是一个 AI 编程助手，可以帮助你更快更好的理解代码，编写代码，解决代码中的问题。通过本地代码仓库和远程代码库提取上下文，让你能够更好的理解和编写代码。Cody 目前可以在以下编程工具中使用:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003eVS Code\u003c/li\u003e\n\u003cli\u003eJetBrains IDE\u003c/li\u003e\n\u003cli\u003eNeovim (实验性)\u003c/li\u003e\n\u003cli\u003eWeb (实验性)\u003c/li\u003e\n\u003c/ol\u003e\u003c/blockquote\u003e\n\u003cp\u003eCody 主要有以下功能:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e自动完成 基于代码上下文的自动补全\u003c/li\u003e\n\u003cli\u003e聊天 在聊天视图中询问代码相关的问题\u003c/li\u003e\n\u003cli\u003e命令 为常见的操作提供了快捷命令，例如：生成文档，添加测试，检测代码问题\u003c/li\u003e\n\u003cli\u003e调试 在编辑器中调试代码，帮你寻找代码中的问题\u003c/li\u003e\n\u003cli\u003e忽略 可以过滤某些文件及过滤某些仓库\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"价格\"\u003e价格\u003c/h2\u003e\n\u003cp\u003e介绍完 Cody 的特点后，接下来介绍大家关心的价格问题，Cody 有 3 个版本，分别是 Free、Pro、Enterprise.\u003c/p\u003e\n\u003cp\u003eFree 版本为免费版，目前每月提供 20 次聊天次数、500 次代码自动完成，今天查看 sourcegraph 的 blog，发现 Free 版本的额度提高了，代码自动完成次数为无限次，聊天和命令次数增加了 10 倍为 200 次。\u003c/p\u003e\n\u003cp\u003ePro 版本为每个月 9 美元，提供了不限次数的代码补全及聊天功能及提供了 GPT-4o 等高级 LLM.\u003c/p\u003e\n\u003cp\u003eEnterprise 的价格需要联系 sourcegraph 的销售人员，Enterprise 相较于 Pro 版提供了更多的团队功能。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e接下来介绍如何安装 Cody，主要介绍 VS Code 中如何安装：\u003c/p\u003e","title":"AI 编程助手 - Cody"},{"content":"katana 介绍 katana 是一款强大的新一代的网络爬虫工具，通过使用 katana，用户能够快速的进行互联网资源的爬取和渗透测试阶段的收集任务。\n特点 katana 有以下特点：\n快速及高可配置的网络爬虫 标准及无头模式 主动和被动模式 JavaScript 脚本爬取解析 定制的表单内容自动填充 爬取范围控制 可自定义设置输出字段 输入数据 支持标准输入 (STDIN)，URL 和列表 (LIST) 输出数据 支持 STDOUT、文件和 JSON 格式 安装 接下来介绍如何安装 katana\nkatana 的安装需要 go1.18 版本以上，可以执行以下命令或下载 Github 仓库的发布版本。\ngo install github.com/projectdiscovery/katana/cmd/katana@latest windows 在安装中可能会遇到以下报错：\ngithub.com/smacker/go-tree-sitter/javascript: build constraints exclude all Go files in C:\\Users\\overstarry\\go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\javascript # github.com/smacker/go-tree-sitter go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:17:18: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:21:21: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:25:20: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:30:26: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:34:20: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:38:32: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:43:9: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:46:18: undefined: Node go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:68:40: undefined: Node 可以使用以下命令解决：\nchoco install zig set CGO_ENABLED=1\u0026amp;set GOOS=windows\u0026amp;set GOARCH=amd64\u0026amp;set CC=zig cc\u0026amp;set CXX=zig c++ go install github.com/projectdiscovery/katana/cmd/katana@latest Docker 安装 katana 还支持 Docker 进行使用，执行以下命令：\ndocker pull projectdiscovery/katana:latest docker run projectdiscovery/katana:latest -u https://tesla.com 使用 接下来的使用环境会以 Docker 环境为主。\n爬取多个 url 使用 -u 参数，可以爬取指定网站的数据，可以看到 overstarry.vip 的网站链接都显示了。\ndocker run projectdiscovery/katana:latest -u https://overstarry.vip\n如果想要一次获取多个网站的数据，直接添加多个 URL 即可，多个 URL 之间以逗号分隔。\n需要注意的是，爬取 url 时，会将当前 url 上的所有链接都会获取下来，包括超链接。\n爬取模式 1 标准\n标准模式使用 go 原生 http 进行数据采集，采集速度会更快，但不会处理 Javascript 和 Dom 渲染，不适合用于一些有复杂动态渲染的网站，\n2 无头浏览器模式\n无头模式使用无头浏览器，在浏览器上下文进行数据的获取，有以下优点:\nHttp 指纹合法 可以处理更复杂的一些网站 爬取范围 如果没有限定爬取范围，katana 爬取可能会是无止境的，所有一般需要限定爬取的数据范围。\n-field-scope 有三个选项:\n* rdn 爬取根域名及所有子域名 (默认) * fqdn 限定爬取的子域名 * dn 爬取的范围为指定关键字域名 -crawl-scope -crawl-out-scope 定义不爬取的内容范围，支持正则表达式\n其它 除了这些参数，katana 还支持很多其它参数，感兴趣的读者可以自行研究\nkatana 库 除了 cli 使用外，katana 还支持在代码中进行使用。\n参考 https://github.com/projectdiscovery/katana https://github.com/projectdiscovery/katana/issues/866 https://github.com/projectdiscovery/katana/issues/624#issuecomment-1764007669 ","permalink":"https://jasminides.com/posts/katana-%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7/","summary":"\u003ch2 id=\"katana-介绍\"\u003ekatana 介绍\u003c/h2\u003e\n\u003cp\u003ekatana 是一款强大的新一代的网络爬虫工具，通过使用 katana，用户能够快速的进行互联网资源的爬取和渗透测试阶段的收集任务。\u003c/p\u003e\n\u003ch3 id=\"特点\"\u003e特点\u003c/h3\u003e\n\u003cp\u003ekatana 有以下特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e快速及高可配置的网络爬虫\u003c/li\u003e\n\u003cli\u003e标准及无头模式\u003c/li\u003e\n\u003cli\u003e主动和被动模式\u003c/li\u003e\n\u003cli\u003eJavaScript 脚本爬取解析\u003c/li\u003e\n\u003cli\u003e定制的表单内容自动填充\u003c/li\u003e\n\u003cli\u003e爬取范围控制\u003c/li\u003e\n\u003cli\u003e可自定义设置输出字段\u003c/li\u003e\n\u003cli\u003e输入数据 支持标准输入 (STDIN)，URL 和列表 (LIST)\u003c/li\u003e\n\u003cli\u003e输出数据 支持 STDOUT、文件和 JSON 格式\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e接下来介绍如何安装 katana\u003c/p\u003e\n\u003cp\u003ekatana 的安装需要 go1.18 版本以上，可以执行以下命令或下载 Github 仓库的发布版本。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install github.com/projectdiscovery/katana/cmd/katana@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewindows 在安装中可能会遇到以下报错：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egithub.com/smacker/go-tree-sitter/javascript: build constraints exclude all Go files in C:\\Users\\overstarry\\go\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\javascript\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# github.com/smacker/go-tree-sitter\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:17:18: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:21:21: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:25:20: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:30:26: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:34:20: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:38:32: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:43:9: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:46:18: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego\\pkg\\mod\\github.com\\smacker\\go-tree-sitter@v0.0.0-20230720070738-0d0a9f78d8f8\\iter.go:68:40: undefined: Node\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以使用以下命令解决：\u003c/p\u003e","title":"katana 新一代的爬虫工具"},{"content":"介绍 Tianji 是一个集网站分析、网站状态监控、服务状态监控集一体的工具平台。\n在我们日常使用中，我们在观察监控一个网站使往往需要使用多个工具一起使用，例如使用 GA 来进行 PV/UV 数据的收集，使用 uptime monitor 来查看服务器的网络及连通性，使用 prometheus 来查看服务器的状态等 那么有没有一个工具能满足这些需求呢？Tianji 就是这样一个工具，能够更方便更简洁的满足用户的需求。\n安装 docker 安装 Tianji wget https://raw.githubusercontent.com/msgbyte/tianji/master/docker-compose.yml docker compose up -d 默认账号密码是 admin/admin\nkubernetes 安装 Tianji kubernetes 环境下可以使用 Helm 安装\nhelm repo add msgbyte https://msgbyte.github.io/charts helm search repo tianji helm install tianji msgbyte/tianji 本文使用了 Docker 进行安装，接下来的介绍也会以这个环境为主。\n使用 安装完浏览器打开 http://localhost:12345/ 输入默认账号密码即进入主界面。\n可以看到有六个栏目，接下来依次介绍这六个栏目的使用。\n网站 网站顾名思义就是统计网站的 PV/UV 数据，创建好一个网站后，可以在你的网站中嵌入相应的脚本代码，就可追踪相应的用户数据。\n监控器 监控器就是针对网站云服务进行一个相应的监控，保证服务的稳定性。\n与传统的监控服务相比，Tianji 支持通过自定义脚本的方式来支持更多的定制化的场景，具体的可以查看相应的文档。\n服务器 服务器就是在服务器上安装相应的 agent 服务来接收相应的服务器 CPU 等数据。\n遥测 遥测是一种常见的技术，它涉及最少和匿名的信息报告，以解决隐私问题，同时仍满足内容创建者的基本分析需求。通过创建一个 1px 大小的空白透明像素图像，我们可以收集我们无法控制的网站上的访问者数据。\n页面 就是通过一个页面来展示创建的监控器。通过创建页面，你可以通过一个域名来对外展示服务器的健康状态。\n小结 本文介绍了一个集健康遥测服务器状态监控等的工具 Tianji，介绍了 Tianji 的安装及简单使用。\n参考 https://tianji.msgbyte.com/ https://github.com/msgbyte/tianji https://tianji.msgbyte.com/docs/monitor/custom-script https://juejin.cn/post/7344970197130346535?searchId=202406221440178AD4D52AAE13871164DA ","permalink":"https://jasminides.com/posts/tianji-%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eTianji 是一个集网站分析、网站状态监控、服务状态监控集一体的工具平台。\u003c/p\u003e\n\u003cp\u003e在我们日常使用中，我们在观察监控一个网站使往往需要使用多个工具一起使用，例如使用 GA 来进行 PV/UV 数据的收集，使用 uptime monitor 来查看服务器的网络及连通性，使用 prometheus 来查看服务器的状态等 那么有没有一个工具能满足这些需求呢？Tianji 就是这样一个工具，能够更方便更简洁的满足用户的需求。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003ch3 id=\"docker-安装-tianji\"\u003edocker 安装 Tianji\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://raw.githubusercontent.com/msgbyte/tianji/master/docker-compose.yml\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker compose up -d\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e默认账号密码是 admin/admin\u003c/p\u003e\n\u003ch3 id=\"kubernetes-安装-tianji\"\u003ekubernetes 安装 Tianji\u003c/h3\u003e\n\u003cp\u003ekubernetes 环境下可以使用 Helm  安装\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm repo add msgbyte https://msgbyte.github.io/charts\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm search repo tianji\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm install tianji msgbyte/tianji\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e本文使用了 Docker 进行安装，接下来的介绍也会以这个环境为主。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e安装完浏览器打开 http://localhost:12345/ 输入默认账号密码即进入主界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/tianji/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到有六个栏目，接下来依次介绍这六个栏目的使用。\u003c/p\u003e\n\u003ch3 id=\"网站\"\u003e网站\u003c/h3\u003e\n\u003cp\u003e网站顾名思义就是统计网站的 PV/UV 数据，创建好一个网站后，可以在你的网站中嵌入相应的脚本代码，就可追踪相应的用户数据。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/tianji/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"监控器\"\u003e监控器\u003c/h3\u003e\n\u003cp\u003e监控器就是针对网站云服务进行一个相应的监控，保证服务的稳定性。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/tianji/image-2.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e","title":"Tianji 介绍"},{"content":"magika 介绍 Magika 是 Google 推出的一个新型工具，使用 AI 用来文件类型的检测，采用了高度优化的 Keras 模型，具有较高的准确性、模型较小等优点，支持100多种文件类型，准确性高达 99%,推测每个文件的时间大约 5 ms。\nMagika 在 Google 内部已被大量使用，用于 Gmail，网络硬盘等应用，检测各种文件，提高了用户的安全性。\nMagika 提供了 Pyhton 命令行、Pyhton API 和 js 包等多种方式使用，还支持批量处理提高推理速度。\n安装 可以使用 pip 命令进行安装：pip install magika\n如果没有 Python 环境，还可以 Docker 中进行使用：\ngit clone https://github.com/google/magika cd magika/ docker build -t magika . docker run -it --rm -v $(pwd):/magika magika -r /magika/tests_data 如果 Docker 环境也没有，那你可以使用 Google 部署的网站进行试用 https://google.github.io/magika/。\n运行 运行仓库提供的测试数据 (magika -r /magika/tests_data): 可以看到文件的类型很精准的被识别出来了。\n接下来做个试验，将一个 png 的图片的后缀修改为 jpg ,看看还能否正确识别，可以看到还是成功精准识别了。\n小结 本文介绍了一种使用 AI 进行文件类型检测的工具 magika，相较于其它类型检测工具，magika 依托于数据集和模型的精度，可以大大提高识别文件类型的精度和速度。\n参考 https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html https://github.com/google/magika https://github.com/google/magika/blob/main/js/README.md https://github.com/google/magika/blob/main/docs/command_line_interface.md https://google.github.io/magika/ ","permalink":"https://jasminides.com/posts/ai-%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B-magika/","summary":"\u003ch2 id=\"magika-介绍\"\u003emagika 介绍\u003c/h2\u003e\n\u003cp\u003eMagika 是 Google 推出的一个新型工具，使用 AI 用来文件类型的检测，采用了高度优化的 Keras  模型，具有较高的准确性、模型较小等优点，支持\u003ca href=\"https://github.com/google/magika/blob/main/docs/supported_content_types_list.md\"\u003e100\u003c/a\u003e多种文件类型，准确性高达 99%,推测每个文件的时间大约 5 ms。\u003c/p\u003e\n\u003cp\u003eMagika 在 Google 内部已被大量使用，用于 Gmail，网络硬盘等应用，检测各种文件，提高了用户的安全性。\u003c/p\u003e\n\u003cp\u003eMagika 提供了 Pyhton 命令行、Pyhton API 和 js 包等多种方式使用，还支持批量处理提高推理速度。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e可以使用 pip 命令进行安装：\u003ccode\u003epip install magika\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果没有 Python 环境，还可以 Docker 中进行使用：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit clone https://github.com/google/magika\ncd magika/\ndocker build -t magika .\ndocker run -it --rm -v $(pwd):/magika magika -r /magika/tests_data\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果 Docker 环境也没有，那你可以使用 Google 部署的网站进行试用 \u003ca href=\"https://google.github.io/magika/\"\u003ehttps://google.github.io/magika/\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"运行\"\u003e运行\u003c/h2\u003e\n\u003cp\u003e运行仓库提供的测试数据 (\u003ccode\u003emagika -r /magika/tests_data\u003c/code\u003e):\n\u003cimg loading=\"lazy\" src=\"/img/magika/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到文件的类型很精准的被识别出来了。\u003c/p\u003e\n\u003cp\u003e接下来做个试验，将一个 png 的图片的后缀修改为 jpg ,看看还能否正确识别，可以看到还是成功精准识别了。\u003c/p\u003e","title":"AI 检测文件类型 Magika"},{"content":"前言 Coze 是新一代一站式 AI Bot 开发平台。无论你是否有编程基础，都可以在 Coze 平台上快速搭建基于 AI 模型的各类问答 Bot，从解决简单的问答到处理复杂逻辑的对话。并且，你可以将搭建的 Bot 发布到各类社交平台和通讯软件上，与这些平台/软件上的用户互动。\nCoze 具有以下功能及优势：\nCoze 提供了丰富的插件集合，可以扩展你的 Bot 的能力。用户也可进行插件的自定义，将现有的 API 能力通过配置的方式让 Bot 进行调用。 提供了知识库功能来管理和存储数据，可以让 Bot 使用知识库的内容进行回答。 长期记忆能力，Coze 提供了用于长期记忆的数据库功能，Bot 可以持久化的记住用户输入的参数和内容。 定时任务支持，Coze 支持为 Bot 创建定时任务，无需编写任何代码，只需输入任务描述，Bot 会暗示执行任务。 工作流，Coze 支持通过可视化的方式来创建工作流。 多 Agent 支持 Coze 有国内版 (www.coze.cn) 和国际版[www.coze.com]，本篇文章使用国际版进行介绍如何创建一个 Bot。\n创建 Bot 注册完 Coze 账号，先创建 Bot，点击 Create Bot\n输入 Bot 名称，这里由于想搭建一个 blog 助手，于是输入 Blog Assistant，然后上次 Bot 图像，如果没有合适的图像，也可以使用 DALL·E-3 生成头像。\n设置 创建完 Bot 后，就进入 Bot 的设置页面。\n接下来分别会介绍界面上的功能：\n设置大语言模型 图中 1 处这里可以设置大语言模型，可以选择不同的模型，有刚发布的 GPT-4o 等，并可进行相应的参数设置，这里我们选择 GPT-4o ,不修改默认设置。\n设置 Bot 的提示词 图中 2 处是重要的一环，编写提示词 prompt，好的提示词可以让大语言模型更好理解用户的输入。\n我们先简单输入一段提示词： 你是一名知识渊博的助理，专门负责 Overstarry 的博客。你的技能是回答有关博客内容的询问，并引导用户全面了解博客内容。\n然后使用 Optimize 可以让大语言模型进行优化提示词。根据优化后的提示词进行修改，最后的提示词如下：\n# 角色 你是一个对 Overstarry 博客有深入了解的知识渊博的助理。你对博客的所有内容和信息都拥有绝对的熟悉度。 ## 技能 ### 技能 1：回答关于博客内容的询问 - 当用户关于博客内容提出疑问时，提供详尽准确的答复。你的回答应该围绕博客主题，鼓励和指引用户深入了解更多的博客内容。 ### 技能 2：详细介绍博客内容 - 根据用户需求，深入介绍博客的各个方面，无论是主题、风格、写作技巧，还是特别的内容。 ### 技能 3：引导用户全面了解博客 - 通过提供概要、提示或者直接回答用户问题，引导用户全面、深入地阅读和理解博客。 ## 约束： - 只讨论与博客内容相关的话题。 - 坚持提供精确、清晰、轻松理解的答案。 - 根据用户希望了解的信息做出有针对性的回应。 - 不要涉及任何与博客无关的信息。 skills 设定完 Bot 的角色及技能后，我们可以通过 skills 功能加强 Bot 的能力。\n本文只使用了 Coze 的插件功能，我们添加 Google Web Search 和 Browser,添加完插件后我们还得修改提示词，不然 Bot 不会使用 插件进行搜索。\n你是一个对Overstarry博客有深度了解的资深助理。你精通博客的所有内容和数据。 ## 技能 ### 技能 1：回答博客内容的问题 - 通过browse(url: \u0026#34;overstarry.vip\u0026#34;)全面理解用户查询并生成正确的答案。 - 如果不熟悉某一博客条目，转用googleWebSearch(\u0026#34;overstarry.vip + inquiry\u0026#34;)来寻找合适的答案。 ### 技能 2：全方位介绍博客内容 - 根据用户需求，深入浅出地介绍博客的各个方面——主题、风格、写作技巧或特色内容。 ### 技能 3：引导用户全方位理解博客 - 通过提供大纲、点醒或直接回答用户问题，引导用户深入、全面地浏览和理解博客。 ## 约束： - 只讨论与博客内容相关的话题。 - 始终提供精确、易懂、清晰的答案。 - 针对性地回应用户需求的信息。 - 避免涉及任何与博客无关的信息。 Knowledge Knowledge 可以设置 Bot 的知识库，可以通过接口和上传文件的方式，让 Bot 通过知识库的内容更好更精确的回答用户的问题\nMemory Variable 可以通过使用变量功能记录用户偏好或行为，例如记录用户的语言偏好\nDatabase Database 可以通过创建数据表的方式，将用户询问中的一些数据记录下来，这里我们创建一个记录 tag 和文章列表的数据表\nDialog Dialog 是设定一些 Bot 的常规参数，如 Bot 的开场白，以及是否根据上下文提供 3 个选项等功能。\nPreview Preview 面板是用来进行测试用的，配置好 Bot 后，可以在此处进行测试 Bot 是否符合预期。\nPublish Publish 可以将你调试好的 bot 发布到商店和其它 IM 平台。\n小结 本文介绍了如何使用 coze 平台搭建专属的 AI bot。本文创建的 bot 已发布到 store 中，感兴趣的小伙伴可以通过 https://www.coze.com/store/bot/7375447781130960903?panel=1 访问。\n参考 https://www.coze.com/docs/guides/welcome?_lang=zh https://overstarry.vip/ ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-coze-%E6%89%93%E9%80%A0%E4%B8%93%E5%B1%9E-ai-bot/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eCoze 是新一代一站式 AI Bot 开发平台。无论你是否有编程基础，都可以在 Coze 平台上快速搭建基于 AI 模型的各类问答 Bot，从解决简单的问答到处理复杂逻辑的对话。并且，你可以将搭建的 Bot 发布到各类社交平台和通讯软件上，与这些平台/软件上的用户互动。\u003c/p\u003e\n\u003cp\u003eCoze 具有以下功能及优势：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCoze 提供了丰富的插件集合，可以扩展你的 Bot 的能力。用户也可进行插件的自定义，将现有的 API 能力通过配置的方式让 Bot 进行调用。\u003c/li\u003e\n\u003cli\u003e提供了知识库功能来管理和存储数据，可以让 Bot 使用知识库的内容进行回答。\u003c/li\u003e\n\u003cli\u003e长期记忆能力，Coze 提供了用于长期记忆的数据库功能，Bot 可以持久化的记住用户输入的参数和内容。\u003c/li\u003e\n\u003cli\u003e定时任务支持，Coze 支持为 Bot 创建定时任务，无需编写任何代码，只需输入任务描述，Bot 会暗示执行任务。\u003c/li\u003e\n\u003cli\u003e工作流，Coze 支持通过可视化的方式来创建工作流。\u003c/li\u003e\n\u003cli\u003e多 Agent 支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCoze 有国内版 (\u003ca href=\"https://www.coze.cn\"\u003ewww.coze.cn\u003c/a\u003e) 和国际版[www.coze.com]，本篇文章使用国际版进行介绍如何创建一个 Bot。\u003c/p\u003e\n\u003ch2 id=\"创建-bot\"\u003e创建 Bot\u003c/h2\u003e\n\u003cp\u003e注册完 Coze 账号，先创建 Bot，点击 Create Bot\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/coze-bot/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e输入 Bot 名称，这里由于想搭建一个 blog 助手，于是输入 Blog Assistant，然后上次 Bot 图像，如果没有合适的图像，也可以使用 DALL·E-3 生成头像。\u003c/p\u003e\n\u003ch2 id=\"设置\"\u003e设置\u003c/h2\u003e\n\u003cp\u003e创建完 Bot 后，就进入 Bot 的设置页面。\u003c/p\u003e","title":"使用 Coze 打造专属 AI Bot"},{"content":"slug 介绍 slug 在不同的场景有不同的意义，在 URL 中表示一种用于描述资源的短简洁易于理解的资源描述符，在数据库系统中还可以用于描述资源的唯一标识符，总的来说 slug 可以用来标识和描述资源的文本标识符，有很好的可读性和唯一性。\n本文将介绍 golang 中如何根据字符串生成相应的 slug 文本。\n安装 执行 go get -u github.com/gosimple/slug 来安装 slug\n使用 先介绍 slug 库的基础使用方法：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/gosimple/slug\u0026#34; ) func main() { text := slug.Make(\u0026#34;overstarry home\u0026#34;) fmt.Println(text) text = slug.Make(\u0026#34;text generate\u0026#34;) fmt.Println(text) } 运行后：\noverstarry-home text-generate 除了基础的转换功能，slug 还支持将不同的语言进行转换，查看下面的例子：\nfunc main() { text := slug.Make(\u0026#34;overstarry home\u0026#34;) fmt.Println(text) text = slug.Make(\u0026#34;text generate\u0026#34;) fmt.Println(text) text = slug.Make(\u0026#34;Hellö Wörld хелло ворлд\u0026#34;) fmt.Println(text) someText := slug.Make(\u0026#34;影師\u0026#34;) fmt.Println(someText) enText := slug.MakeLang(\u0026#34;This \u0026amp; that\u0026#34;, \u0026#34;en\u0026#34;) fmt.Println(enText) } overstarry-home text-generate hello-world-khello-vorld ping-guo this-and-that 如果想要保留大写字母，可以设置 slug.Lowercase 参数来实现。如果想实现自定义的替换可以使用 slug.CustomSub 来实现。\n参考 https://pkg.go.dev/github.com/gosimple/slug https://www.practical-go-lessons.com/post/how-to-create-a-slug-with-go-c9msh2glarts70kje1ag https://github.com/gosimple/slug ","permalink":"https://jasminides.com/posts/golang-%E7%94%9F%E6%88%90-slug-%E5%AD%97%E7%AC%A6%E4%B8%B2/","summary":"\u003ch2 id=\"slug-介绍\"\u003eslug 介绍\u003c/h2\u003e\n\u003cp\u003eslug 在不同的场景有不同的意义，在 URL 中表示一种用于描述资源的短简洁易于理解的资源描述符，在数据库系统中还可以用于描述资源的唯一标识符，总的来说 slug 可以用来标识和描述资源的文本标识符，有很好的可读性和唯一性。\u003c/p\u003e\n\u003cp\u003e本文将介绍 golang 中如何根据字符串生成相应的 slug 文本。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e执行 \u003ccode\u003ego get -u github.com/gosimple/slug\u003c/code\u003e 来安装 slug\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e先介绍 slug 库的基础使用方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gosimple/slug\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;overstarry home\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text generate\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行后：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoverstarry-home\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etext-generate\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了基础的转换功能，slug 还支持将不同的语言进行转换，查看下面的例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;overstarry home\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text generate\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hellö Wörld хелло ворлд\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esomeText\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMake\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;影師\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esomeText\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eenText\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMakeLang\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This \u0026amp; that\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eenText\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoverstarry-home\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etext-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello-world-khello-vorld\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping-guo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ethis-and-that\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果想要保留大写字母，可以设置 slug.Lowercase 参数来实现。如果想实现自定义的替换可以使用 slug.CustomSub  来实现。\u003c/p\u003e","title":"golang 生成 slug 字符串"},{"content":"前言 前面的文章介绍过一个开源的大数据可视化工具 - Apache Superset，本文将介绍作者最近了解到的另一个可视化工具 Metabase。\nMetabase 介绍 Metabase 是一个简单易用的开源项目，旨在为公司中的每个人提供商业智能和分析的最简单、最快捷的方法。Metabase 具有以下核心优势和主要功能：\n短时间内完成设置。 团队成员不需要 SQL 知识基础。 提供 SQL 编辑器来进行更复杂的查询。 构建漂亮、交互式的仪表盘，包括过滤器、自动刷新、全屏显示和自定义点击行为等功能。 定义规范的细分和指标供团队使用 使用仪表板订阅按计划将数据发送到 Slack 或发送电子邮件。 设置警报，让数据更改时通知您。 在应用程序中嵌入图表及仪表盘。 配置了细粒度的数据权限功能，方便进行数据安全控制。 安装 接下来介绍如何安装 Metabase，我们将使用 docker 部署的方式进行安装。\ndocker-compose.yaml 内容如下：\nversion: \u0026#39;3.9\u0026#39; services: metabase: image: metabase/metabase:latest container_name: metabase hostname: metabase volumes: - /dev/urandom:/dev/random:ro ports: - 3000:3000 environment: MB_DB_TYPE: postgres MB_DB_DBNAME: metabaseappdb MB_DB_PORT: 5432 MB_DB_USER: metabase MB_DB_PASS: mysecretpassword MB_DB_HOST: postgres networks: - metanet1 healthcheck: test: curl --fail -I http://localhost:3000/api/health || exit 1 interval: 15s timeout: 5s retries: 5 postgres: image: postgres:latest container_name: postgres hostname: postgres environment: POSTGRES_USER: metabase POSTGRES_DB: metabaseappdb POSTGRES_PASSWORD: mysecretpassword networks: - metanet1 networks: metanet1: driver: bridge 执行 docker compose up -d 即可启动服务。接下来访问 http://127.0.0.1:3000/ 进行安装，设置完语言密码默认数据库，安装即算完成。\n添加数据库 在 Metabase 的管理后台我们可以进行数据库的添加，可以看到相较于 Superset Metabase 支持的数据源不够多。填写完相关信息，点击保存会进行连接的测试，连接成功就可以在数据源列表中看到。\n浏览数据表 添加完数据库，我们可以查看添加的数据库中的数据表。\n可视化 添加完数据源，查看了数据表，接下来进行可视化的介绍，Metabase 提供了两种可视化的方式:1) 可视化查询 2) SQL 语句查询。\n可视化查询 在浏览数据表时，点击右上角的 创建 按钮，然后选择 问题，即可进入查询构建页面。简单来说就是将 SQL 的语句转换为表单的填写控制。右上角可以查看相应的 SQL 语句。点击可视化就会生成相应的图表。\nSQL 编辑器 熟悉 SQL 的可使用 SQL 编辑器功能，同样点击右上角的 创建 按钮，然后选择 SQL 查询，选择相应的数据源，输入语句并运行，同样会生成相应的图表。\n仪表盘 在分析中心可以创建仪表盘，并将前面创建的可视化图表添加进仪表盘中，并可对仪表盘进行排列调整，方便打造美观的布局效果。\n小结 本文简单的介绍了 Metabase 开源可视化平台的安装及使用，Metabase 的一些复杂的功能，感兴趣的读者可自行学习研究。\n参考 https://www.metabase.com/docs/latest/ ","permalink":"https://jasminides.com/posts/metabase-%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e前面的文章介绍过一个开源的大数据可视化工具 - Apache Superset，本文将介绍作者最近了解到的另一个可视化工具 Metabase。\u003c/p\u003e\n\u003ch2 id=\"metabase-介绍\"\u003eMetabase 介绍\u003c/h2\u003e\n\u003cp\u003eMetabase 是一个简单易用的开源项目，旨在为公司中的每个人提供商业智能和分析的最简单、最快捷的方法。Metabase 具有以下核心优势和主要功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e短时间内完成设置。\u003c/li\u003e\n\u003cli\u003e团队成员不需要 SQL  知识基础。\u003c/li\u003e\n\u003cli\u003e提供 SQL  编辑器来进行更复杂的查询。\u003c/li\u003e\n\u003cli\u003e构建漂亮、交互式的仪表盘，包括过滤器、自动刷新、全屏显示和自定义点击行为等功能。\u003c/li\u003e\n\u003cli\u003e定义规范的细分和指标供团队使用\u003c/li\u003e\n\u003cli\u003e使用仪表板订阅按计划将数据发送到 Slack 或发送电子邮件。\u003c/li\u003e\n\u003cli\u003e设置警报，让数据更改时通知您。\u003c/li\u003e\n\u003cli\u003e在应用程序中嵌入图表及仪表盘。\u003c/li\u003e\n\u003cli\u003e配置了细粒度的数据权限功能，方便进行数据安全控制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e接下来介绍如何安装 Metabase，我们将使用 docker 部署的方式进行安装。\u003c/p\u003e\n\u003cp\u003edocker-compose.yaml 内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3.9\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003emetabase\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabase/metabase:latest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003econtainer_name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ehostname\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003e/dev/urandom:/dev/random:ro\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_TYPE\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_DBNAME\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabaseappdb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_PORT\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5432\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_USER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_PASS\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emysecretpassword\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eMB_DB_HOST\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003emetanet1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ehealthcheck\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecurl --fail -I http://localhost:3000/api/health || exit 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003einterval\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e15s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003etimeout\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eretries\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003epostgres\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres:latest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003econtainer_name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ehostname\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epostgres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003ePOSTGRES_USER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003ePOSTGRES_DB\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emetabaseappdb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003ePOSTGRES_PASSWORD\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emysecretpassword\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003emetanet1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003emetanet1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebridge\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行 docker compose up -d 即可启动服务。接下来访问 \u003ccode\u003ehttp://127.0.0.1:3000/\u003c/code\u003e 进行安装，设置完语言密码默认数据库，安装即算完成。\u003c/p\u003e","title":"metabase 介绍及简单使用"},{"content":"Google Analytics 介绍 Google Analytics（分析）4 是一项分析服务，用于衡量您的网站和应用中的流量和互动情况。本文将介绍如何通过调用 Google Analytics admin API 来生成 Google Analytics 衡量 ID.\n配置 启用 API 在 Google Cloud console 后台 API 和服务 启用 Google Analytics Admin API。\n配置服务账号 为了调用 API，我们需要创建一个服务账号，然后为创建的服务账号添加密钥。\n需要注意的是还需要在 Google Analytics 为服务账号添加权限，不然请求接口会没数据。\n安装 go 客户端 接下来安装 go 客户端：\ngo get google.golang.org/api/analyticsadmin/v1alpha 生成流程 接下来我们会按照常规的 id 生成流程编写相应的代码，流程: 1 获取账号信息\n通过 List 接口获取当前服务账号所拥有的所有 Google Analytics 账户信息。\naccountsService := analyticsadmin.NewAccountsService(service) accountsReply, err := accountsService.List().Do(); if err != nil { log.Fatal(\u0026#34;list account err\u0026#34;,err) return } for _,acc := range accountsReply.Accounts { fmt.Println(acc.Name) } 2 创建媒体资源\n通过 List 接口获得第一个账号的所有媒体资源信息，并通过 Create 接口创建一个新的媒体资源。\npropertiesService := analyticsadmin.NewPropertiesService(service) propertiesReply,err := propertiesService.List().Filter(fmt.Sprintf(\u0026#34;parent:%s\u0026#34;,accountsReply.Accounts[0].Name)).Do() if err != nil { log.Fatal(\u0026#34;list properties err\u0026#34;,err) return } for _,pro := range propertiesReply.Properties { fmt.Println(pro) } propertie,err := propertiesService.Create(\u0026amp;analyticsadmin.GoogleAnalyticsAdminV1betaProperty{ Account: accountsReply.Accounts[0].Name, CurrencyCode: \u0026#34;CNY\u0026#34;, DisplayName: \u0026#34;overstarrytest\u0026#34;, // 行业类型 IndustryCategory: \u0026#34;ONLINE_COMMUNITIES\u0026#34;, Parent: accountsReply.Accounts[0].Name, PropertyType: \u0026#34;PROPERTY_TYPE_ORDINARY\u0026#34;, TimeZone: \u0026#34;Asia/Shanghai\u0026#34;, }).Do() if err != nil { log.Fatal(\u0026#34;create propertie err\u0026#34;,err) return } 3 设置数据流\n接下来通过上面创建的媒体渠道创建新的数据流。\npropertiesDataStreamsService := analyticsadmin.NewPropertiesDataStreamsService(service) res,err := propertiesDataStreamsService.Create(propertie.Name,\u0026amp;analyticsadmin.GoogleAnalyticsAdminV1betaDataStream{ DisplayName: \u0026#34;测试链接\u0026#34;, Type: \u0026#34;WEB_DATA_STREAM\u0026#34;, WebStreamData: \u0026amp;analyticsadmin.GoogleAnalyticsAdminV1betaDataStreamWebStreamData{ DefaultUri: \u0026#34;https://www.overstarry.vip\u0026#34;, MeasurementId: \u0026#34;\u0026#34;, }, }).Do() fmt.Printf(\u0026#34;%v\u0026#34;,res.WebStreamData.MeasurementId) 代码 完整代码如下： 运行代码： 可以看到衡量 id 顺利产生。\n小结 本文简单介绍了如何通过代码调用 analyticsadmin api 接口快速简单的生成衡量 id，相关的代码可以在 https://github.com/overstarry/google-analytics-id-generate 找到。\n参考 https://developers.google.com/analytics/devguides/config/admin/v1?hl=zh-cn https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/properties?hl=zh-cn#IndustryCategory https://github.com/overstarry/google-analytics-id-generate ","permalink":"https://jasminides.com/posts/go-%E7%94%9F%E6%88%90-google-analytics-%E8%A1%A1%E9%87%8F-id/","summary":"\u003ch2 id=\"google-analytics-介绍\"\u003eGoogle Analytics 介绍\u003c/h2\u003e\n\u003cp\u003eGoogle Analytics（分析）4 是一项分析服务，用于衡量您的网站和应用中的流量和互动情况。本文将介绍如何通过调用 Google Analytics admin API 来生成 Google Analytics 衡量 ID.\u003c/p\u003e\n\u003ch2 id=\"配置\"\u003e配置\u003c/h2\u003e\n\u003ch3 id=\"启用-api\"\u003e启用 API\u003c/h3\u003e\n\u003cp\u003e在 Google Cloud console 后台 API 和服务 启用 Google Analytics Admin API。\u003c/p\u003e\n\u003ch3 id=\"配置服务账号\"\u003e配置服务账号\u003c/h3\u003e\n\u003cp\u003e为了调用 API，我们需要创建一个服务账号，然后为创建的服务账号添加密钥。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/googleanalyticsid/image.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/googleanalyticsid/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e需要注意的是还需要在 Google Analytics 为服务账号添加权限，不然请求接口会没数据。\u003c/p\u003e\n\u003ch3 id=\"安装-go-客户端\"\u003e安装 go 客户端\u003c/h3\u003e\n\u003cp\u003e接下来安装 go 客户端：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get google.golang.org/api/analyticsadmin/v1alpha\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"生成流程\"\u003e生成流程\u003c/h3\u003e\n\u003cp\u003e接下来我们会按照常规的 id 生成流程编写相应的代码，流程:\n1 获取账号信息\u003c/p\u003e\n\u003cp\u003e通过 List 接口获取当前服务账号所拥有的所有 Google Analytics 账户信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eaccountsService\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eanalyticsadmin\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewAccountsService\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eservice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eaccountsReply\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaccountsService\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(); \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;list account err\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaccountsReply\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAccounts\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2 创建媒体资源\u003c/p\u003e","title":"Go 生成 Google analytics 衡量 ID"},{"content":"前言 Docker 是一个广受欢迎的开发平台，它允许用户通过容器化技术来构建、打包和部署应用程序。尽管 Docker 提供了强大的功能和灵活性，但对于初学者而言，在项目中配置 Docker 可能会遇到一些挑战。\n不过，Docker 官方为了降低使用门槛，推出了一个便捷的命令docker init。这个命令旨在快速初始化 Docker 配置，从而简化将 Docker 集成到项目中的流程。通过使用这个命令，用户可以轻松地为项目设置必要的 Docker 支持，进而享受到 Docker 带来的便利和效率提升。\ndocker init 简介 docker init 命令会根据用户指定的选项生成运行容器的一些文件，极大的加快了项目的容器化：\n.dockerignore : docker 构建时忽略的文件列表 Dockerfile: 镜像的核心文件 Compose.yaml: docker compose 的配置文件 README.Docker.md 如果你的项目中已有以上文件，会让你选择是否覆盖旧文件避免文件冲突问题。\ndocker init 提供了一组项目的模板文件，包括了 Go、Python、ASP.NET Core 等常见的服务器应用程序及一个其它类型应用程序模板。开发者使用 init 命令时，可以根据选择的模板生成相应的文件，使开发者可以快速的构建并启动容器。\n使用 接下来介绍如何使用 docker init 进行项目容器的初始化，这里以前文的 go 项目为例子进行介绍。\n进入项目根目录执行 init 命令，选择 go 模板，会让你选择使用的 go 版本，主程序的位置及应用所使用的端口： 执行完可以看到会生成相应的文件及如何构建并运行的命令。\n查看生成的 Dockerfile 和 Compose.yaml 文件：\n# syntax=docker/dockerfile:1 # Comments are provided throughout this file to help you get started. # If you need more help, visit the Dockerfile reference guide at # https://docs.docker.com/go/dockerfile-reference/ # Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7 ################################################################################ # Create a stage for building the application. ARG GO_VERSION=1.21.0 FROM --platform=$BUILDPLATFORM golang:${GO_VERSION} AS build WORKDIR /src # Download dependencies as a separate step to take advantage of Docker\u0026#39;s caching. # Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds. # Leverage bind mounts to go.sum and go.mod to avoid having to copy them into # the container. RUN --mount=type=cache,target=/go/pkg/mod/ \\ --mount=type=bind,source=go.sum,target=go.sum \\ --mount=type=bind,source=go.mod,target=go.mod \\ go mod download -x # This is the architecture you’re building for, which is passed in by the builder. # Placing it here allows the previous steps to be cached across architectures. ARG TARGETARCH # Build the application. # Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds. # Leverage a bind mount to the current directory to avoid having to copy the # source code into the container. RUN --mount=type=cache,target=/go/pkg/mod/ \\ --mount=type=bind,target=. \\ CGO_ENABLED=0 GOARCH=$TARGETARCH go build -o /bin/server ./retry/server ################################################################################ # Create a new stage for running the application that contains the minimal # runtime dependencies for the application. This often uses a different base # image from the build stage where the necessary files are copied from the build # stage. # # The example below uses the alpine image as the foundation for running the app. # By specifying the \u0026#34;latest\u0026#34; tag, it will also use whatever happens to be the # most recent version of that image when you build your Dockerfile. If # reproducability is important, consider using a versioned tag # (e.g., alpine:3.17.2) or SHA (e.g., alpine@sha256:c41ab5c992deb4fe7e5da09f67a8804a46bd0592bfdf0b1847dde0e0889d2bff). FROM alpine:latest AS final # Install any runtime dependencies that are needed to run your application. # Leverage a cache mount to /var/cache/apk/ to speed up subsequent builds. RUN --mount=type=cache,target=/var/cache/apk \\ apk --update add \\ ca-certificates \\ tzdata \\ \u0026amp;\u0026amp; \\ update-ca-certificates # Create a non-privileged user that the app will run under. # See https://docs.docker.com/go/dockerfile-user-best-practices/ ARG UID=10001 RUN adduser \\ --disabled-password \\ --gecos \u0026#34;\u0026#34; \\ --home \u0026#34;/nonexistent\u0026#34; \\ --shell \u0026#34;/sbin/nologin\u0026#34; \\ --no-create-home \\ --uid \u0026#34;${UID}\u0026#34; \\ appuser USER appuser # Copy the executable from the \u0026#34;build\u0026#34; stage. COPY --from=build /bin/server /bin/ # Expose the port that the application listens on. EXPOSE 9000 # What the container should run when it is started. ENTRYPOINT [ \u0026#34;/bin/server\u0026#34; ] 可以看到 Dockerfile 是一个常见的多阶段构建镜像流程。\n# Comments are provided throughout this file to help you get started. # If you need more help, visit the Docker Compose reference guide at # https://docs.docker.com/go/compose-spec-reference/ # Here the instructions define your application as a service called \u0026#34;server\u0026#34;. # This service is built from the Dockerfile in the current directory. # You can add other services your application may depend on here, such as a # database or a cache. For examples, see the Awesome Compose repository: # https://github.com/docker/awesome-compose services: server: build: context: . target: final ports: - 9000:9000 # The commented out section below is an example of how to define a PostgreSQL # database that your application can use. `depends_on` tells Docker Compose to # start the database before your application. The `db-data` volume persists the # database data between container restarts. The `db-password` secret is used # to set the database password. You must create `db/password.txt` and add # a password of your choosing to it before running `docker compose up`. # depends_on: # db: # condition: service_healthy # db: # image: postgres # restart: always # user: postgres # secrets: # - db-password # volumes: # - db-data:/var/lib/postgresql/data # environment: # - POSTGRES_DB=example # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password # expose: # - 5432 # healthcheck: # test: [ \u0026#34;CMD\u0026#34;, \u0026#34;pg_isready\u0026#34; ] # interval: 10s # timeout: 5s # retries: 5 # volumes: # db-data: # secrets: # db-password: # file: db/password.txt docker-compose 文件也是常规的内容，可以看到文件中还提供了默认的数据库服务配置，使开发者可以快速的启动一个数据库服务。\n小结 本文讲述了 docker 提供的一种快速生成 docker 镜像构建文件的命令：init ,通过这个命令使开发者能够快速方便的为项目启用容器能力。\n参考 https://docs.docker.com/reference/cli/docker/init/ https://www.docker.com/blog/docker-init-initialize-dockerfiles-and-compose-files-with-a-single-cli-command/ https://www.docker.com/blog/streamline-dockerization-with-docker-init-ga/ https://www.youtube.com/watch?v=f4cHtDRZv5U ","permalink":"https://jasminides.com/posts/docker-init-%E5%91%BD%E4%BB%A4/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eDocker 是一个广受欢迎的开发平台，它允许用户通过容器化技术来构建、打包和部署应用程序。尽管 Docker 提供了强大的功能和灵活性，但对于初学者而言，在项目中配置 Docker 可能会遇到一些挑战。\u003c/p\u003e\n\u003cp\u003e不过，Docker 官方为了降低使用门槛，推出了一个便捷的命令\u003ccode\u003edocker init\u003c/code\u003e。这个命令旨在快速初始化 Docker 配置，从而简化将 Docker 集成到项目中的流程。通过使用这个命令，用户可以轻松地为项目设置必要的 Docker 支持，进而享受到 Docker 带来的便利和效率提升。\u003c/p\u003e\n\u003ch2 id=\"docker-init-简介\"\u003edocker init 简介\u003c/h2\u003e\n\u003cp\u003edocker init 命令会根据用户指定的选项生成运行容器的一些文件，极大的加快了项目的容器化：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e.dockerignore : docker 构建时忽略的文件列表\u003c/li\u003e\n\u003cli\u003eDockerfile: 镜像的核心文件\u003c/li\u003e\n\u003cli\u003eCompose.yaml: docker compose 的配置文件\u003c/li\u003e\n\u003cli\u003eREADME.Docker.md\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你的项目中已有以上文件，会让你选择是否覆盖旧文件避免文件冲突问题。\u003c/p\u003e\n\u003cp\u003edocker init 提供了一组项目的模板文件，包括了 Go、Python、ASP.NET Core 等常见的服务器应用程序及一个其它类型应用程序模板。开发者使用 init 命令时，可以根据选择的模板生成相应的文件，使开发者可以快速的构建并启动容器。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e接下来介绍如何使用 docker init 进行项目容器的初始化，这里以前文的 go 项目为例子进行介绍。\u003c/p\u003e\n\u003cp\u003e进入项目根目录执行 init 命令，选择 go 模板，会让你选择使用的 go 版本，主程序的位置及应用所使用的端口：\n\u003cimg loading=\"lazy\" src=\"/img/docker-init/image.png\" alt=\"alt text\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"/img/docker-init/image-1.png\" alt=\"alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e执行完可以看到会生成相应的文件及如何构建并运行的命令。\u003c/p\u003e\n\u003cp\u003e查看生成的 Dockerfile 和 Compose.yaml 文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# syntax=docker/dockerfile:1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Comments are provided throughout this file to help you get started.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# If you need more help, visit the Dockerfile reference guide at\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# https://docs.docker.com/go/dockerfile-reference/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e################################################################################\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Create a stage for building the application.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eARG\u003c/span\u003e GO_VERSION\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e.21.0\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e--platform=$BUILDPLATFORM\u003c/span\u003e golang:\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eGO_VERSION\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e AS build\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWORKDIR\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e/src\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Download dependencies as a separate step to take advantage of Docker\u0026#39;s caching.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Leverage bind mounts to go.sum and go.mod to avoid having to copy them into\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# the container.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecache,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/go/pkg/mod/ \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebind,source\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ego.sum,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ego.sum \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebind,source\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ego.mod,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ego.mod \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    go mod download -x\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# This is the architecture you’re building for, which is passed in by the builder.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Placing it here allows the previous steps to be cached across architectures.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eARG\u003c/span\u003e TARGETARCH\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Build the application.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Leverage a bind mount to the current directory to avoid having to copy the\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# source code into the container.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecache,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/go/pkg/mod/ \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebind,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e. \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    CGO_ENABLED\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e GOARCH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$TARGETARCH go build -o /bin/server ./retry/server\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e################################################################################\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Create a new stage for running the application that contains the minimal\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# runtime dependencies for the application. This often uses a different base\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# image from the build stage where the necessary files are copied from the build\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# stage.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# The example below uses the alpine image as the foundation for running the app.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# By specifying the \u0026#34;latest\u0026#34; tag, it will also use whatever happens to be the\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# most recent version of that image when you build your Dockerfile. If\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# reproducability is important, consider using a versioned tag\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# (e.g., alpine:3.17.2) or SHA (e.g., alpine@sha256:c41ab5c992deb4fe7e5da09f67a8804a46bd0592bfdf0b1847dde0e0889d2bff).\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ealpine:latest\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eAS\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003efinal\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Install any runtime dependencies that are needed to run your application.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Leverage a cache mount to /var/cache/apk/ to speed up subsequent builds.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e --mount\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecache,target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/var/cache/apk \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    apk --update add \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        ca-certificates \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        tzdata \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        update-ca-certificates\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Create a non-privileged user that the app will run under.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# See https://docs.docker.com/go/dockerfile-user-best-practices/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eARG\u003c/span\u003e UID\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10001\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRUN\u003c/span\u003e adduser \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --disabled-password \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --gecos \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --home \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/nonexistent\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --shell \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/sbin/nologin\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --no-create-home \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --uid \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eUID\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    appuser\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eUSER\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eappuser\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Copy the executable from the \u0026#34;build\u0026#34; stage.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCOPY\u003c/span\u003e --from\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebuild /bin/server /bin/\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# Expose the port that the application listens on.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eEXPOSE\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e9000\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e# What the container should run when it is started.\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eENTRYPOINT\u003c/span\u003e [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/bin/server\u0026#34;\u003c/span\u003e ]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到 Dockerfile 是一个常见的多阶段构建镜像流程。\u003c/p\u003e","title":"docker init 命令"},{"content":"gRPC 中的负载均衡包括服务端负载均衡和客户端负载均衡，本文将介绍客户端负载均衡，gRPC 中的客户端负载均衡主要有 2 个部分:1) Name Resolver 2) Load Balancing Policy 接下来将依次介绍。\nName Resolver gRPC 中的默认 name-system 是 DNS , 同时各种客户端还提供了插件以使用自定义 name-system。gRPC Name Resolver 会根据 name-system 进行对应的解析，将用户提供的名称转换为对应的地址。\nLoad Balancing Policy gRPC 中内置了多种负载均衡策略，本文将介绍常见的几种负载均衡策略:1) pick_first 2) round_robin\npick_first pick_first 是默认的负载均衡策略，该策略从 Name Resolver 获得到服务器的地址列表，按顺序依次对每个服务器地址进行连接，直到连接成功，如果某个地址连接成功则所有的 RPC 请求都会发送到这个服务器地址。\nround_robin round_robin 策略，该策略从 Name Resolver 获得到服务器的地址列表，依次将请求发送到每一个地址，例如第一个请求将发送到 backend1 ,第二个请求将发送到 backend2。\n接下来分别使用这两种策略进行测试。\n例子 我们先创建服务端，循环创建了 3 个服务端，分别使用 30051、30052、30053 端口。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; pb \u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34; ) var ( addrs = []string{\u0026#34;:30051\u0026#34;, \u0026#34;:30052\u0026#34;,\u0026#34;:30053\u0026#34;} ) type ecServer struct { pb.UnimplementedEchoServer addr string } func (s *ecServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) { return \u0026amp;pb.EchoResponse{Message: fmt.Sprintf(\u0026#34;%s (from %s)\u0026#34;, req.Message, s.addr)}, nil } func startServer(addr string) { lis, err := net.Listen(\u0026#34;tcp\u0026#34;, addr) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } s := grpc.NewServer() pb.RegisterEchoServer(s, \u0026amp;ecServer{addr: addr}) log.Printf(\u0026#34;serving on %s\\n\u0026#34;, addr) if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } func main() { var wg sync.WaitGroup for _, addr := range addrs { wg.Add(1) go func(addr string) { defer wg.Done() startServer(addr) }(addr) } wg.Wait() } 接下来创建对应的客户端连接：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;google.golang.org/grpc/credentials/insecure\u0026#34; pb \u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34; \u0026#34;google.golang.org/grpc/resolver\u0026#34; ) const ( exampleScheme = \u0026#34;example\u0026#34; exampleServiceName = \u0026#34;lb.overstarry.grpc.io\u0026#34; ) var addrs = []string{\u0026#34;localhost:30051\u0026#34;, \u0026#34;localhost:30052\u0026#34;, \u0026#34;localhost:30053\u0026#34;} func callUnaryEcho(c pb.EchoClient, message string) { ctx, cancel := context.WithTimeout(context.Background(), time.Second) defer cancel() r, err := c.UnaryEcho(ctx, \u0026amp;pb.EchoRequest{Message: message}) if err != nil { log.Fatalf(\u0026#34;could not greet: %v\u0026#34;, err) } fmt.Println(r.Message) } func makeRPCs(cc *grpc.ClientConn, n int) { hwc := pb.NewEchoClient(cc) for i := 0; i \u0026lt; n; i++ { callUnaryEcho(hwc, \u0026#34;this is examples/load_balancing\u0026#34;) } } func main() { pickfirstConn, err := grpc.Dial( fmt.Sprintf(\u0026#34;%s:///%s\u0026#34;, exampleScheme, exampleServiceName), grpc.WithTransportCredentials(insecure.NewCredentials()), ) if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer pickfirstConn.Close() makeRPCs(pickfirstConn, 10) fmt.Println() roundrobinConn, err := grpc.Dial( fmt.Sprintf(\u0026#34;%s:///%s\u0026#34;, exampleScheme, exampleServiceName), grpc.WithDefaultServiceConfig(`{\u0026#34;loadBalancingConfig\u0026#34;: [{\u0026#34;round_robin\u0026#34;:{}}]}`), // This sets the initial balancing policy. grpc.WithTransportCredentials(insecure.NewCredentials()), ) if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer roundrobinConn.Close() makeRPCs(roundrobinConn, 10) } type exampleResolverBuilder struct{} func (*exampleResolverBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) { r := \u0026amp;exampleResolver{ target: target, cc: cc, addrsStore: map[string][]string{ exampleServiceName: addrs, }, } r.start() return r, nil } func (*exampleResolverBuilder) Scheme() string { return exampleScheme } type exampleResolver struct { target resolver.Target cc resolver.ClientConn addrsStore map[string][]string } func (r *exampleResolver) start() { addrStrs := r.addrsStore[r.target.Endpoint()] addrs := make([]resolver.Address, len(addrStrs)) for i, s := range addrStrs { addrs[i] = resolver.Address{Addr: s} } r.cc.UpdateState(resolver.State{Addresses: addrs}) } func (*exampleResolver) ResolveNow(o resolver.ResolveNowOptions) {} func (*exampleResolver) Close() {} func init() { resolver.Register(\u0026amp;exampleResolverBuilder{}) } 可以看到通过 grpc.WithDefaultServiceConfig 可以指定使用的负载均衡策略，由于测试的需要，我们还创建了自定义的 Name Resolver 用来测试使用。\n运行代码：\n2024/03/30 17:37:33 pick_first this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) 2024/03/30 17:37:33 round_robin this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30052) this is examples/load_balancing (from :30053) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30052) this is examples/load_balancing (from :30053) this is examples/load_balancing (from :30051) this is examples/load_balancing (from :30052) this is examples/load_balancing (from :30053) 可以看到结果与相应的策略效果一致。\n参考 https://github.com/grpc/grpc/blob/master/doc/naming.md https://github.com/grpc/grpc/blob/master/doc/load-balancing.md ","permalink":"https://jasminides.com/posts/grpc-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","summary":"\u003cp\u003egRPC 中的负载均衡包括服务端负载均衡和客户端负载均衡，本文将介绍客户端负载均衡，gRPC 中的客户端负载均衡主要有 2 个部分:1) Name Resolver 2) Load Balancing Policy 接下来将依次介绍。\u003c/p\u003e\n\u003ch2 id=\"name-resolver\"\u003eName Resolver\u003c/h2\u003e\n\u003cp\u003egRPC 中的默认  name-system 是 DNS , 同时各种客户端还提供了插件以使用自定义 name-system。gRPC Name Resolver  会根据 name-system 进行对应的解析，将用户提供的名称转换为对应的地址。\u003c/p\u003e\n\u003ch2 id=\"load-balancing-policy\"\u003eLoad Balancing Policy\u003c/h2\u003e\n\u003cp\u003egRPC 中内置了多种负载均衡策略，本文将介绍常见的几种负载均衡策略:1) pick_first 2) round_robin\u003c/p\u003e\n\u003ch3 id=\"pick_first\"\u003epick_first\u003c/h3\u003e\n\u003cp\u003epick_first 是默认的负载均衡策略，该策略从 Name Resolver 获得到服务器的地址列表，按顺序依次对每个服务器地址进行连接，直到连接成功，如果某个地址连接成功则所有的 RPC 请求都会发送到这个服务器地址。\u003c/p\u003e\n\u003ch3 id=\"round_robin\"\u003eround_robin\u003c/h3\u003e\n\u003cp\u003eround_robin 策略，该策略从 Name Resolver 获得到服务器的地址列表，依次将请求发送到每一个地址，例如第一个请求将发送到 backend1 ,第二个请求将发送到 backend2。\u003c/p\u003e\n\u003cp\u003e接下来分别使用这两种策略进行测试。\u003c/p\u003e\n\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\u003cp\u003e我们先创建服务端，循环创建了 3 个服务端，分别使用 30051、30052、30053 端口。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eaddrs\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:30051\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:30052\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:30053\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnimplementedEchoServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eUnaryEcho\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoRequest\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s (from %s)\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e)}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estartServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to listen: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterEchoServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;serving on %s\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to serve: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddrs\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003estartServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来创建对应的客户端连接：\u003c/p\u003e","title":"gRPC 客户端负载均衡"},{"content":"前面的文章介绍了 gRPC 相关的功能，今天继续介绍 gRPC 的功能，本文将介绍 gRPC 的重试功能。\n介绍 请求的重试是一个常见的功能，在我们日常的使用中，如果需要重试请求往往需要使用外部包进行实现，在 gRPC 中内置了重试了功能，不需要我们自己实现。\n通过查阅 gRPC 的文档可以看到，gRPC 会根据开发者设定的策略进行失败 RPC 的重试，有两种策略 1) 重试策略：重试失败的 RPC 请求 2) hedging 策略：并行发生相同 RPC 请求。单个 RPC 请求可以选择两种重试策略中的一种，不能同时选择多种策略。\n重试策略有以下参数可以使用：\nmaxAttempts: 必填 RPC 最大请求次数，包括原始请求 initialBackoff, maxBackoff, backoffMultiplier: 必填 决定下次重试前的延迟时间 random(0, min(initialBackoff*backoffMultiplier**(n-1), maxBackoff)) retryableStatusCodes: 必填 收到服务器非正常状态码时，根据 retryableStatusCodes 中的状态码列表决定是否重试请求 hedging 策略可以主动发送单个请求的多个副本，而无需等待响应。需要注意的是，此策略可能会导致后端多次执行，因此最好仅对可以多次执行不会有不利影响的请求开启此策略。有如下参数：\nmaxAttempts 必填 hedgingDelay 可选 nonFatalStatusCodes 可选 一个请求在没有收到成功响应时，经过 hedgingDelay 没收到响应 将继续发送请求，直至达到 maxAttempts 最大次数或请求成功。当收到成功响应时，所有未完成的其它请求将停止。本质上 hedging 策略可以看作在收到失败响应前重试请求。\n使用 接下来讲解如何在 gRPC go 语言版本中配置使用重试功能。\n服务端 服务端创建一个服务，只有当请求次数达到第三次时，才返回成功响应。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;google.golang.org/grpc/codes\u0026#34; \u0026#34;google.golang.org/grpc/status\u0026#34; pb \u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34; ) var port = flag.Int(\u0026#34;port\u0026#34;, 9000, \u0026#34;port number\u0026#34;) type failingServer struct { pb.UnimplementedEchoServer mu sync.Mutex reqCounter uint reqModulo uint } func (s *failingServer) maybeFailRequest() error { s.mu.Lock() defer s.mu.Unlock() s.reqCounter++ if (s.reqModulo \u0026gt; 0) \u0026amp;\u0026amp; (s.reqCounter%s.reqModulo == 0) { return nil } return status.Errorf(codes.Unavailable, \u0026#34;maybeFailRequest: failing it\u0026#34;) } func (s *failingServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) { if err := s.maybeFailRequest(); err != nil { log.Println(\u0026#34;request failed count:\u0026#34;, s.reqCounter) return nil, err } log.Println(\u0026#34;request succeeded count:\u0026#34;, s.reqCounter) return \u0026amp;pb.EchoResponse{Message: req.Message}, nil } func main() { flag.Parse() address := fmt.Sprintf(\u0026#34;:%v\u0026#34;, *port) lis, err := net.Listen(\u0026#34;tcp\u0026#34;, address) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } fmt.Println(\u0026#34;listen on address\u0026#34;, address) s := grpc.NewServer() failingservice := \u0026amp;failingServer{ reqCounter: 0, reqModulo: 3, } pb.RegisterEchoServer(s, failingservice) if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } 客户端 客户端通过 WithDefaultServiceConfig 设置配置好重试功能\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;google.golang.org/grpc/credentials/insecure\u0026#34; pb \u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34; ) var ( addr = flag.String(\u0026#34;addr\u0026#34;, \u0026#34;127.0.0.1:9000\u0026#34;, \u0026#34;the address to connect to\u0026#34;) // see https://github.com/grpc/grpc/blob/master/doc/service_config.md to know more about service config retryPolicy = `{ \u0026#34;methodConfig\u0026#34;: [{ \u0026#34;name\u0026#34;: [{\u0026#34;service\u0026#34;: \u0026#34;grpc.examples.echo.Echo\u0026#34;}], \u0026#34;waitForReady\u0026#34;: true, \u0026#34;retryPolicy\u0026#34;: { \u0026#34;MaxAttempts\u0026#34;: 4, \u0026#34;InitialBackoff\u0026#34;: \u0026#34;.01s\u0026#34;, \u0026#34;MaxBackoff\u0026#34;: \u0026#34;.01s\u0026#34;, \u0026#34;BackoffMultiplier\u0026#34;: 1.0, \u0026#34;RetryableStatusCodes\u0026#34;: [ \u0026#34;UNAVAILABLE\u0026#34; ] } }]}` ) func retryDial() (*grpc.ClientConn, error) { return grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithDefaultServiceConfig(retryPolicy)) } func main() { flag.Parse() // Set up a connection to the server. conn, err := retryDial() if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer func() { if e := conn.Close(); e != nil { log.Printf(\u0026#34;failed to close connection: %s\u0026#34;, e) } }() c := pb.NewEchoClient(conn) ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second) defer cancel() reply, err := c.UnaryEcho(ctx, \u0026amp;pb.EchoRequest{Message: \u0026#34;Try and Success\u0026#34;}) if err != nil { log.Fatalf(\u0026#34;UnaryEcho error: %v\u0026#34;, err) } log.Printf(\u0026#34;UnaryEcho reply: %v\u0026#34;, reply) } 接下来先启动服务端，再启动客户端，可以看到相应的日志：\n2024/03/23 23:10:03 request failed count: 1 2024/03/23 23:10:03 request failed count: 2 2024/03/23 23:10:03 request succeeded count: 3 在客户端代码中我们可以看到相关的配置代码：\nretryPolicy = `{ \u0026#34;methodConfig\u0026#34;: [{ \u0026#34;name\u0026#34;: [{\u0026#34;service\u0026#34;: \u0026#34;grpc.examples.echo.Echo\u0026#34;}], \u0026#34;waitForReady\u0026#34;: true, \u0026#34;retryPolicy\u0026#34;: { \u0026#34;MaxAttempts\u0026#34;: 4, \u0026#34;InitialBackoff\u0026#34;: \u0026#34;.01s\u0026#34;, \u0026#34;MaxBackoff\u0026#34;: \u0026#34;.01s\u0026#34;, \u0026#34;BackoffMultiplier\u0026#34;: 1.0, \u0026#34;RetryableStatusCodes\u0026#34;: [ \u0026#34;UNAVAILABLE\u0026#34; ] } }]}` retryPolicy 就是上文讲述的重试策略配置，name 表示对哪些 RPC 请求开启重试。\n小结 本文简单介绍了 gRPC 的重试功能及 go 语言如何实现重试功能，本文的相关代码可以在 https://github.com/overstarry/grpc-example 看到。\n参考 https://github.com/grpc/proposal/blob/master/A6-client-retries.md https://github.com/grpc/grpc-go/tree/master/examples/features/retry https://github.com/grpc/grpc/blob/master/doc/service_config.md ","permalink":"https://jasminides.com/posts/grpc-%E8%AF%B7%E6%B1%82%E9%87%8D%E8%AF%95/","summary":"\u003cp\u003e前面的文章介绍了 gRPC 相关的功能，今天继续介绍 gRPC 的功能，本文将介绍 gRPC 的重试功能。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003e请求的重试是一个常见的功能，在我们日常的使用中，如果需要重试请求往往需要使用外部包进行实现，在 gRPC 中内置了重试了功能，不需要我们自己实现。\u003c/p\u003e\n\u003cp\u003e通过查阅 gRPC 的文档可以看到，gRPC 会根据开发者设定的策略进行失败 RPC 的重试，有两种策略 1) 重试策略：重试失败的 RPC 请求 2) hedging 策略：并行发生相同 RPC 请求。单个 RPC 请求可以选择两种重试策略中的一种，不能同时选择多种策略。\u003c/p\u003e\n\u003cp\u003e重试策略有以下参数可以使用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emaxAttempts: 必填 RPC 最大请求次数，包括原始请求\u003c/li\u003e\n\u003cli\u003einitialBackoff, maxBackoff,  backoffMultiplier: 必填 决定下次重试前的延迟时间 random(0, min(initialBackoff*backoffMultiplier**(n-1), maxBackoff))\u003c/li\u003e\n\u003cli\u003eretryableStatusCodes:  必填 收到服务器非正常状态码时，根据 retryableStatusCodes 中的状态码列表决定是否重试请求\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ehedging 策略可以主动发送单个请求的多个副本，而无需等待响应。需要注意的是，此策略可能会导致后端多次执行，因此最好仅对可以多次执行不会有不利影响的请求开启此策略。有如下参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emaxAttempts 必填\u003c/li\u003e\n\u003cli\u003ehedgingDelay 可选\u003c/li\u003e\n\u003cli\u003enonFatalStatusCodes 可选\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一个请求在没有收到成功响应时，经过 hedgingDelay 没收到响应 将继续发送请求，直至达到 maxAttempts 最大次数或请求成功。当收到成功响应时，所有未完成的其它请求将停止。本质上 hedging 策略可以看作在收到失败响应前重试请求。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e接下来讲解如何在 gRPC go 语言版本中配置使用重试功能。\u003c/p\u003e\n\u003ch3 id=\"服务端\"\u003e服务端\u003c/h3\u003e\n\u003cp\u003e服务端创建一个服务，只有当请求次数达到第三次时，才返回成功响应。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc/codes\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc/status\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/overstarry/grpc-example/proto/echo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInt\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;port\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;port number\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efailingServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnimplementedEchoServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003emu\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMutex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ereqModulo\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003euint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efailingServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003emaybeFailRequest\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLock\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnlock\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqModulo\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqModulo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrorf\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecodes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnavailable\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;maybeFailRequest: failing it\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efailingServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eUnaryEcho\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoRequest\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emaybeFailRequest\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request failed count:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request succeeded count:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:%v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to listen: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;listen on address\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efailingservice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efailingServer\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ereqCounter\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ereqModulo\u003c/span\u003e:  \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterEchoServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efailingservice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to serve: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"客户端\"\u003e客户端\u003c/h3\u003e\n\u003cp\u003e客户端通过 WithDefaultServiceConfig 设置配置好重试功能\u003c/p\u003e","title":"gRPC 请求重试"},{"content":"问题 最近收到了阿里云云数据库的报警信息，提示数据库连接数过高，通过监控可以看到，数据库的连接数升高了 50%,其它指标保持正常。\n分析及解决 通过阿里云后台的一键诊断中的会话管理可以看到占用大量连接的 ip 地址，可以看到 100.104.205.90、100.104.205.83 和 100.104.205.6 这三个 ip 占用了大量连接，可以看到并没有 sql 请求，只是单纯的保持数据库连接，通过查看阿里云文档和询问客服，可以得知这个 ip 地址是阿里云 dms 服务的地址，。\n找到原因后就好解决了，可以使用SELECT pg_terminate_backend(pid)语句释放数据库连接，使用语句释放与这三个 ip 相关的数据库连接:select pg_terminate_backend(pid) from pg_stat_activity where client_addr in ('100.104.205.90','100.104.205.83') ,过了一会数据库连接恢复正常了。\n小结 本文通过阿里云数据库连接过高的问题，分析遇到此类问题时如何排查并解决。\n参考 https://help.aliyun.com/zh/dms/configure-an-ip-address-whitelist ","permalink":"https://jasminides.com/posts/%E9%98%BF%E9%87%8C%E4%BA%91-dms-%E5%8D%A0%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近收到了阿里云云数据库的报警信息，提示数据库连接数过高，通过监控可以看到，数据库的连接数升高了 50%,其它指标保持正常。\u003c/p\u003e\n\u003ch2 id=\"分析及解决\"\u003e分析及解决\u003c/h2\u003e\n\u003cp\u003e通过阿里云后台的一键诊断中的会话管理可以看到占用大量连接的 ip 地址，可以看到 100.104.205.90、100.104.205.83\n和 100.104.205.6 这三个 ip 占用了大量连接，可以看到并没有 sql 请求，只是单纯的保持数据库连接，通过查看阿里云文档和询问客服，可以得知这个 ip 地址是阿里云 dms 服务的地址，。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/aliyundms/img.png\" alt=\"img.png\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"/img/aliyundms/img_1.png\" alt=\"img_1.png\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"/img/aliyundms/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e找到原因后就好解决了，可以使用\u003ccode\u003eSELECT pg_terminate_backend(pid)\u003c/code\u003e语句释放数据库连接，使用语句释放与这三个 ip 相关的数据库连接:\u003ccode\u003eselect pg_terminate_backend(pid) from pg_stat_activity where client_addr in ('100.104.205.90','100.104.205.83') \u003c/code\u003e,过了一会数据库连接恢复正常了。\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文通过阿里云数据库连接过高的问题，分析遇到此类问题时如何排查并解决。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://help.aliyun.com/zh/dms/configure-an-ip-address-whitelist\"\u003ehttps://help.aliyun.com/zh/dms/configure-an-ip-address-whitelist\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"阿里云 dms 占用数据库连接问题及解决"},{"content":"前言 Kubernetes 的 pod 可以按照节点的资源进行调度，默认情况下 pod 能够使用节点的全部资源，这样往往会出现因为节点自身运行的一些驱动及 Kubernetes 系统守护进程，导致资源不足的问题。 例如有一个应用在运行中使用了大量的系统资源，导致 kubelet 和 apiserver 的心跳出现故障，导致节点处于 Not Ready 的状态，节点出现 Not Ready 的状况后，过一会儿会将 pod 调度到其它 node 节点上运行，往往会导致节点雪崩，一个接一个的出现 Not Ready 状况。\n那么如何解决这个问题呢？这时可以通过 为 Kubernetes 集群配置资源预留，kubelet 暴露了一个名为 Node Allocatable 的特性，有助于为系统守护进程预留计算资源，Kubernetes 也是推荐集群管理员按照每个节点上的工作负载来配置 Node Allocatable。\nNode Allocatable Kubernetes 节点上的 Allocatable 被定义为 Pod 可用计算资源量。调度器不会超额申请 Allocatable。目前支持 CPU、内存 和 存储 这几个参数。可以通过 kubectl describe node 命令查看节点可分配资源的数据： 可以看到有 Capacity 和 Allocatable 两个内容，Allocatable 这个就是节点可分配资源，由于没有设置，所以默认 Capacity 和 Allocatable 是一致的。\nCapacity 是节点所有的系统资源，kube-reserved 是给 kube 组件预留的资源，system-reserved 是给系统进程预留的资源，eviction-hard 是 Kubelet 的驱逐阈值。\n因此节点的可用资源大概为 Node Capacity - Kube-reserved - system-reserved - eviction-hard,当节点的使用资源超过可用大小时，会将 pod 驱逐到其它节点。\n设置 Kube-reserved 先来设置 Kube-reserved ,要配置 Kube-reserved，需要把 kubelet 的 \u0026ndash;kube-reserved-cgroup 标志的值设置为 kube 守护进程的父控制组。不过需要注意，如果 \u0026ndash;kube-reserved-cgroup 不存在，Kubelet 不会创建它，启动 Kubelet 将会失败。，修改 node 节点的 kubelet 配置文件，添加以下配置：\nenforceNodeAllocatable: - pods - kube-reserved kubeReserved: cpu: 500m memory: 1Gi ephemeral-storage: 1Gi kubeReservedCgroup: /kubelet.slice 修改完重启服务，发现服务启动失败，查看日志，发现 cgroup 没创建，创建相应的路径即可：\nMar 09 14:22:47 node01 kubelet[4800]: E0309 14:22:47.058618 4800 kubelet.go:1542] \u0026#34;Failed to start ContainerManager\u0026#34; err=\u0026#34;Failed to enforce Kube Reserved Cgroup Limits on \\\u0026#34;/kubelet.slice\\\u0026#34;: cgroup [\\\u0026#34;kubelet\\\u0026#34;] has some missing paths: /sys/fs/cgroup/memory/kubelet.slice, /sys/fs/cgroup/pids/kubelet.slice, /sys/fs/cgroup/hugetlb/kubelet.slice, /sys/fs/cgroup/cpuset/kubelet.slice, /sys/fs/cgroup/cpu,cpuacct/kubelet.slice, /sys/fs/cgroup/systemd/kubelet.slice, /sys/fs/cgroup/cpu,cpuacct/kubelet.slice\u0026#34; mkdir -p /sys/fs/cgroup/cpu,cpuacct/kubelet.slice mkdir -p /sys/fs/cgroup/memory/kubelet.slice mkdir -p /sys/fs/cgroup/systemd/kubelet.slice mkdir -p /sys/fs/cgroup/pids/kubelet.slice mkdir -p /sys/fs/cgroup/cpu,cpuacct/kubelet.slice mkdir -p /sys/fs/cgroup/cpuset/kubelet.slice mkdir -p /sys/fs/cgroup/hugetlb/kubelet.slice 创建完重启 kubelet 服务，发现服务恢复正常了，再次查看节点信息，发现 Allocatable 值已经修改成功。\nsystem-reserved 设置 system-reserved 也可以使用同样的方式进行设置，同样需要注意的是同样需要配置 system-reserved-cgroup 参数，这里就不过多赘述了。\n设置 eviction-hard 如何修改驱逐阈值了，同样修改 kubelet 的配置文件，添加以下配置：\nevictionHard: memory.available: \u0026#34;100Mi\u0026#34; nodefs.available: \u0026#34;10%\u0026#34; nodefs.inodesFree: \u0026#34;5%\u0026#34; imagefs.available: \u0026#34;15%\u0026#34; 当节点的内存达到保留值以下时，会进行 pod 的驱逐。配置完，再次查看节点的可使用资源，可以看到可分配资源再次减少。\n小结 本文讲解了如何为 Kubernetes 节点设置可分配的资源限制，通过设置节点可分配资源大小，可以提高 Kubernetes 系统的稳定性，但需要注意的是配置参数时，需要注意参数的大小，不当的参数可能会导致系统出现异常。\n参考 https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/reserve-compute-resources/ https://cloud.tencent.com/developer/article/1774753 https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ ","permalink":"https://jasminides.com/posts/kubernetes-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E9%A2%84%E7%95%99/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eKubernetes 的 pod 可以按照节点的资源进行调度，默认情况下 pod 能够使用节点的全部资源，这样往往会出现因为节点自身运行的一些驱动及 Kubernetes 系统守护进程，导致资源不足的问题。\n例如有一个应用在运行中使用了大量的系统资源，导致 kubelet 和 apiserver 的心跳出现故障，导致节点处于 Not Ready  的状态，节点出现 Not Ready  的状况后，过一会儿会将 pod 调度到其它 node 节点上运行，往往会导致节点雪崩，一个接一个的出现 Not Ready  状况。\u003c/p\u003e\n\u003cp\u003e那么如何解决这个问题呢？这时可以通过 为 Kubernetes 集群配置资源预留，kubelet 暴露了一个名为 Node Allocatable 的特性，有助于为系统守护进程预留计算资源，Kubernetes 也是推荐集群管理员按照每个节点上的工作负载来配置 Node Allocatable。\u003c/p\u003e\n\u003ch2 id=\"node-allocatable\"\u003eNode Allocatable\u003c/h2\u003e\n\u003cp\u003eKubernetes 节点上的 Allocatable 被定义为 Pod 可用计算资源量。调度器不会超额申请 Allocatable。目前支持 CPU、内存 和 存储 这几个参数。可以通过 \u003ccode\u003ekubectl describe node\u003c/code\u003e 命令查看节点可分配资源的数据：\n\u003cimg loading=\"lazy\" src=\"/img/kubernetes_revserve_compute_resources/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到有 Capacity 和 Allocatable 两个内容，Allocatable 这个就是节点可分配资源，由于没有设置，所以默认 Capacity 和 Allocatable 是一致的。\u003c/p\u003e\n\u003cp\u003eCapacity 是节点所有的系统资源，kube-reserved 是给 kube 组件预留的资源，system-reserved 是给系统进程预留的资源，eviction-hard 是 Kubelet 的驱逐阈值。\u003c/p\u003e","title":"Kubernetes 系统资源预留"},{"content":"前言 最近出现了服务器 cpu、内存升高导致服务器宕机的问题，发生宕机后，往往由于对系统资源数据收集的不齐全，导致无法快速查明发生宕机的原因。在通过云厂商客服和网络相关资料帮助下，了解了 atop 这个工具，本机对 atop 的安装及使用进行介绍。\natop 介绍 atop 是一款用于监控 Linux 系统资源与进程的工具，能够报告所有进程的活动。其以一定的频率记录系统和进程活动，采集的数据包含 CPU、内存、磁盘、网络的资源使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中。对于每个进程，会显示 CPU 使用率、内存增长、磁盘使用率、优先级、用户名、状态和退出码等。当服务器出现问题后，可以根据相应的 atop 日志文件进行分析。\n安装 atop 不是系统的内部自带命令，需要进行安装，接下来以 Ubuntu 系统为例子，介绍如何安装 atop 命令。\n1 更新软件源\n执行 sudo apt update 进行软件源的更新。\n2 安装 atop\n执行 sudo apt install atop 命令安装 atop。\n配置 安装完 atop 后，可以使用 atop 的默认配置使用，也可根据使用情况修改默认配置，atop 默认配置在 /etc/sysconfig/atop,查看默认配置文件内容：\n# /etc/default/atop # see man atoprc for more possibilities to configure atop execution LOGOPTS=\u0026#34;-R\u0026#34; LOGINTERVAL=600 LOGGENERATIONS=28 LOGPATH=/var/log/atop LOGINTERVAL 是监控周期，默认 600s，LOGGENERATIONS 是日志文件保留周期，默认是 28 天，可以根据具体的需求进行修改。\n使用 命令行输入 atop 命令即可使用，可以看到分为 2 块，上部是系统资源的使用情况，下部是没个进程的使用情况。 如果想看内存的使用情况，可以添加 -m 参数或者在 atop 命令输入 m\n如果想看磁盘的情况可以输入 d，输入 c 可以查看各个进程的 cpu 使用情况。\natop 还有其它命令参数，具体可以执行 atop -h 查看。\n分析日志 系统出现问题时，往往无法实时的查看系统资源的情况，这时我们可以通过 atop 的日志文件进行针对分析，atop 的日志文件存放在 /var/log/atop 路径下， 可以使用 atop -r /var/log/atop/atop_xx 命令进行查看分析，执行命令后同样进入相应的界面，但此界面不会实时更新数据，我们可以使用相应的命令进行 cpu 内存 磁盘等资源的分析。\n小结 本文介绍了 linux 上一个常用的系统资源进程监控工具，通过此工具可以分析系统资源和进程的使用情况，并且可以针对不同时间点进行分析研究。 atop 是一个复杂的工具，需要我们持续学习使用。\n参考 https://www.lyyyuna.com/2018/07/04/perftest-atop/ ","permalink":"https://jasminides.com/posts/atop-%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近出现了服务器 cpu、内存升高导致服务器宕机的问题，发生宕机后，往往由于对系统资源数据收集的不齐全，导致无法快速查明发生宕机的原因。在通过云厂商客服和网络相关资料帮助下，了解了 atop 这个工具，本机对 atop 的安装及使用进行介绍。\u003c/p\u003e\n\u003ch2 id=\"atop-介绍\"\u003eatop 介绍\u003c/h2\u003e\n\u003cp\u003eatop 是一款用于监控 Linux 系统资源与进程的工具，能够报告所有进程的活动。其以一定的频率记录系统和进程活动，采集的数据包含 CPU、内存、磁盘、网络的资源使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中。对于每个进程，会显示 CPU 使用率、内存增长、磁盘使用率、优先级、用户名、状态和退出码等。当服务器出现问题后，可以根据相应的 atop 日志文件进行分析。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003eatop 不是系统的内部自带命令，需要进行安装，接下来以 Ubuntu 系统为例子，介绍如何安装 atop 命令。\u003c/p\u003e\n\u003cp\u003e1 更新软件源\u003c/p\u003e\n\u003cp\u003e执行 \u003ccode\u003esudo apt  update\u003c/code\u003e 进行软件源的更新。\u003c/p\u003e\n\u003cp\u003e2 安装 atop\u003c/p\u003e\n\u003cp\u003e执行 \u003ccode\u003esudo apt install atop\u003c/code\u003e 命令安装 atop。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/atop/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"配置\"\u003e配置\u003c/h2\u003e\n\u003cp\u003e安装完 atop 后，可以使用 atop 的默认配置使用，也可根据使用情况修改默认配置，atop 默认配置在 \u003ccode\u003e/etc/sysconfig/atop\u003c/code\u003e,查看默认配置文件内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# /etc/default/atop\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# see man atoprc for more possibilities to configure atop execution\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLOGOPTS=\u0026#34;-R\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLOGINTERVAL=600\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLOGGENERATIONS=28\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLOGPATH=/var/log/atop\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLOGINTERVAL 是监控周期，默认 600s，LOGGENERATIONS 是日志文件保留周期，默认是 28 天，可以根据具体的需求进行修改。\u003c/p\u003e","title":"atop 工具介绍及使用"},{"content":"前言 我们知道 kubernetes 内部服务之间是通过 service 进行相互访问的，那么如果现在有一个非 kubernetes 部署的服务，我们可以也通过 service 进行内部交互使用吗？答案是可以，我们可以使用 service 的 ExternalName 类型将 service 映射到外部服务上。\n最近需要将一个外部服务映射到 kubernetes service 上，通过查找资料学习，本文记录如何将 kubernetes service 映射到外部服务的流程步骤。\n外部域名映射内部 service 先讲解如何将外部服务通过域名的方式映射到内部 service 上，通过配置 externalName 字段来配置映射关系。例如，以下 Service 定义将 test 命名空间中的 my-service 服务映射到 my.overstarry.vip:\napiVersion: v1 kind: Service metadata: name: my-service namespace: test spec: type: ExternalName externalName: my.overstarry.vip 虽然 externalName 也支持填写 ip 地址，但不会被 kubernetes 解析，如果需要使用 ip 地址，可以使用无头服务 Headless，下文会进行介绍。\n外部服务 ip 映射 service 接下来介绍没有域名的外部服务和 service 如何进行映射。上文讲过虽然 externalName 也支持填写 ip 地址，但不会被 kubernetes 解析，如果需要，则应该使用 Headless Service 进行映射。\napiVersion: v1 kind: Service metadata: name: test spec: clusterIP: None type: ClusterIP --- apiVersion: v1 kind: Endpoints metadata: name: test subsets: - addresses: - ip: 10.0.1.10 创建 service 不指定 selector，手动维护创建 endpoint，创建之后就可以通过 test 访问 10.0.1.10 这个外部服务。\n小结 本文简单的介绍了 kubernetes 如何将 service 和 外部服务进行映射，通过查阅资料可以得知两种方式映射外部服务是没有经过中间层代理的，都是通过 DNS 劫持实现。通过外部服务映射的功能，我们可以使用不同命名空间的 service 访问不同的数据库。\n参考 https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#externalname ","permalink":"https://jasminides.com/posts/kubernetes-externalname/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e我们知道 kubernetes 内部服务之间是通过 service 进行相互访问的，那么如果现在有一个非 kubernetes 部署的服务，我们可以也通过 service 进行内部交互使用吗？答案是可以，我们可以使用 service 的 ExternalName\n类型将 service 映射到外部服务上。\u003c/p\u003e\n\u003cp\u003e最近需要将一个外部服务映射到 kubernetes service 上，通过查找资料学习，本文记录如何将  kubernetes service 映射到外部服务的流程步骤。\u003c/p\u003e\n\u003ch2 id=\"外部域名映射内部-service\"\u003e外部域名映射内部 service\u003c/h2\u003e\n\u003cp\u003e先讲解如何将外部服务通过域名的方式映射到内部 service 上，通过配置 externalName 字段来配置映射关系。例如，以下 Service 定义将 test 命名空间中的 my-service 服务映射到 my.overstarry.vip:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emy-service\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003etype\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eExternalName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eexternalName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emy.overstarry.vip\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然 externalName 也支持填写 ip 地址，但不会被 kubernetes 解析，如果需要使用 ip 地址，可以使用无头服务 Headless，下文会进行介绍。\u003c/p\u003e\n\u003ch2 id=\"外部服务-ip-映射-service\"\u003e外部服务 ip 映射 service\u003c/h2\u003e\n\u003cp\u003e接下来介绍没有域名的外部服务和 service 如何进行映射。上文讲过虽然 externalName 也支持填写 ip 地址，但不会被 kubernetes 解析，如果需要，则应该使用 Headless Service 进行映射。\u003c/p\u003e","title":"Kubernetes ExternalName"},{"content":"前言 cdn 刷新是 cdn 使用过程中的一项重要的功能，通过刷新功能，您可以删除 CDN 节点上已经缓存的资源，并强制 CDN 节点回源站获取最新资源，适用于源站资源更新和发布、违规资源清理、域名配置变更等。\n接下来将分别讲述 阿里云 CDN、AWS cloudfront、Cloudflare cdn 使用 go 语言进行 cdn 的刷新操作的。\n阿里云刷新 cdn 如何刷新 阿里云 cdn 的缓存呢？只需使用 阿里云 openapi 的 go sdk 即可，通过查阅文档，我们只需使用 RefreshObjectCaches API 即可刷新阿里云 cdn 的缓存，RefreshObjectCaches 有以下参数：\nObjectPath: 刷新的url ,多个 url 使用换行符进行分隔 ObjectType: 刷新任务的类型，有以下类型 File（默认值）：文件刷新。 Directory：目录刷新。 Regex：正则刷新。 IgnoreParams：去参数刷新。去参数指的是去除请求 URL 中?及?之后的参数，去参数刷新指的是用户先通过接口提交去参数后的 URL，然后用户提交的待刷新 URL 将会与已缓存资源的 URL 进行去参数匹配，如果已缓存资源的 URL 去参数以后与待刷新 URL 匹配，那么 CDN 节点将对缓存资源执行刷新处理。 Force: 当回源内容和源站资源对比后不一致时，是否刷新对应目录下的资源。默认为 false。 下面是一个例子：\npackage main import ( cdn20180510 \u0026#34;github.com/alibabacloud-go/cdn-20180510/v4/client\u0026#34; openapi \u0026#34;github.com/alibabacloud-go/darabonba-openapi/v2/client\u0026#34; util \u0026#34;github.com/alibabacloud-go/tea-utils/v2/service\u0026#34; \u0026#34;github.com/alibabacloud-go/tea/tea\u0026#34; \u0026#34;os\u0026#34; ) func CreateClient(accessKeyId *string, accessKeySecret *string) (result *cdn20180510.Client, err error) { config := \u0026amp;openapi.Config{ AccessKeyId: accessKeyId, AccessKeySecret: accessKeySecret, } config.Endpoint = tea.String(\u0026#34;cdn.ap-southeast-1.aliyuncs.com\u0026#34;) result = \u0026amp;cdn20180510.Client{} result, err = cdn20180510.NewClient(config) return result, err } func main() { client, err := CreateClient(tea.String(os.Getenv(\u0026#34;ALIBABA_CLOUD_ACCESS_KEY_ID\u0026#34;)), tea.String(os.Getenv(\u0026#34;ALIBABA_CLOUD_ACCESS_KEY_SECRET\u0026#34;))) if err != nil { return } refreshObjectCachesRequest := \u0026amp;cdn20180510.RefreshObjectCachesRequest{ ObjectPath: tea.String(\u0026#34;http://example.com/image/1.png\\\\\\n\\t\\thttp://aliyundoc.com/image/2.png\u0026#34;), } runtime := \u0026amp;util.RuntimeOptions{} _, err = client.RefreshObjectCachesWithOptions(refreshObjectCachesRequest, runtime) if err != nil { return } return } aws cloudfront 接下来讲解 aws cloudfront 如何刷新 cdn，cloudfront 刷新缓存的操作叫使文件失效，通过查阅 cloudfront 的 API 文档，发现可以使用 CreateInvalidation 来创建失效。可以使用 aws go sdk 来进行操作。\n这个 API 有以下参数：\nInvalidationBatch: 必填 CallerReference： 用来表示请求唯一的值，防止发送重复的请求。 Paths： 失效的路径 API 的 go 实现如下：\nfunc (c *Client) CreateInvalidation(ctx context.Context, params *CreateInvalidationInput, optFns ...func(*Options)) (*CreateInvalidationOutput, error) { if params == nil { params = \u0026amp;CreateInvalidationInput{} } result, metadata, err := c.invokeOperation(ctx, \u0026#34;CreateInvalidation\u0026#34;, params, optFns, c.addOperationCreateInvalidationMiddlewares) if err != nil { return nil, err } out := result.(*CreateInvalidationOutput) out.ResultMetadata = metadata return out, nil } 接下来讲解 cloudflare 刷新 cdn 缓存。\ncloudflare cloudflare 提供了以下方式来清除缓存：\n单文件清除 清除全部 标记清除：由与提供的某个值相匹配的 Cache-Tag 响应标头提供服务的任何资产都将从缓存中清除。 按主机名清除：URL 中其主机与提供的某个值相匹配的任何资产都将从缓存中清除 按前缀清除：此目录中的所有资产都将从缓存中清除。 清除缓存的接口定义如下：\nhttps://api.cloudflare.com/client/v4/zones/{identifier}/purge_cache 有以下参数：\ntags: 标记 hosts: prefixes: 下面是一个例子：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;io\u0026#34; ) func main() { url := \u0026#34;https://api.cloudflare.com/client/v4/zones/identifier/purge_cache\u0026#34; payload := strings.NewReader(\u0026#34;{\\n \\\u0026#34;tags\\\u0026#34;: [\\n \\\u0026#34;some-tag\\\u0026#34;,\\n \\\u0026#34;another-tag\\\u0026#34;\\n ]\\n}\u0026#34;) req, _ := http.NewRequest(\u0026#34;POST\u0026#34;, url, payload) req.Header.Add(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) req.Header.Add(\u0026#34;X-Auth-Email\u0026#34;, \u0026#34;\u0026#34;) res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := io.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) } 除了使用 http 请求的方式，我们还可以使用 sdk 来进行缓存的删除。\n参考 https://next.api.aliyun.com/api/Cdn/2018-05-10/RefreshObjectCaches https://developers.cloudflare.com/cache/how-to/purge-cache/ https://developers.cloudflare.com/api/operations/zone-purge https://github.com/aws/aws-sdk-go-v2/blob/service/cloudfront/v1.32.6/service/cloudfront/api_op_CreateInvalidation.go#L16 https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateInvalidation.html https://github.com/cloudflare/cloudflare-go ","permalink":"https://jasminides.com/posts/go-%E5%88%B7%E6%96%B0-cdn/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003ecdn 刷新是 cdn 使用过程中的一项重要的功能，通过刷新功能，您可以删除 CDN 节点上已经缓存的资源，并强制 CDN 节点回源站获取最新资源，适用于源站资源更新和发布、违规资源清理、域名配置变更等。\u003c/p\u003e\n\u003cp\u003e接下来将分别讲述 阿里云 CDN、AWS cloudfront、Cloudflare cdn 使用 go 语言进行 cdn 的刷新操作的。\u003c/p\u003e\n\u003ch2 id=\"阿里云刷新-cdn\"\u003e阿里云刷新 cdn\u003c/h2\u003e\n\u003cp\u003e如何刷新 阿里云 cdn 的缓存呢？只需使用 阿里云 openapi 的 go sdk 即可，通过查阅文档，我们只需使用 RefreshObjectCaches API 即可刷新阿里云 cdn 的缓存，RefreshObjectCaches 有以下参数：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eObjectPath: 刷新的url ,多个 url 使用换行符进行分隔\nObjectType: 刷新任务的类型，有以下类型 \n    File（默认值）：文件刷新。\n    Directory：目录刷新。\n    Regex：正则刷新。\n    IgnoreParams：去参数刷新。去参数指的是去除请求 URL 中?及?之后的参数，去参数刷新指的是用户先通过接口提交去参数后的 URL，然后用户提交的待刷新 URL 将会与已缓存资源的 URL 进行去参数匹配，如果已缓存资源的 URL 去参数以后与待刷新 URL 匹配，那么 CDN 节点将对缓存资源执行刷新处理。\nForce: 当回源内容和源站资源对比后不一致时，是否刷新对应目录下的资源。默认为 false。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下面是一个例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ecdn20180510\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/alibabacloud-go/cdn-20180510/v4/client\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eopenapi\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/alibabacloud-go/darabonba-openapi/v2/client\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eutil\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/alibabacloud-go/tea-utils/v2/service\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/alibabacloud-go/tea/tea\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCreateClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaccessKeyId\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaccessKeySecret\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecdn20180510\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eopenapi\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eAccessKeyId\u003c/span\u003e:     \u003cspan style=\"color:#a6e22e\"\u003eaccessKeyId\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eAccessKeySecret\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaccessKeySecret\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEndpoint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003etea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cdn.ap-southeast-1.aliyuncs.com\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecdn20180510\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ecdn20180510\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCreateClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ALIBABA_CLOUD_ACCESS_KEY_ID\u0026#34;\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003etea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ALIBABA_CLOUD_ACCESS_KEY_SECRET\u0026#34;\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erefreshObjectCachesRequest\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecdn20180510\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRefreshObjectCachesRequest\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eObjectPath\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003etea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://example.com/image/1.png\\\\\\n\\t\\thttp://aliyundoc.com/image/2.png\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eruntime\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eutil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRuntimeOptions\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRefreshObjectCachesWithOptions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erefreshObjectCachesRequest\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eruntime\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"aws-cloudfront\"\u003eaws cloudfront\u003c/h2\u003e\n\u003cp\u003e接下来讲解 aws cloudfront 如何刷新 cdn，cloudfront 刷新缓存的操作叫使文件失效，通过查阅 cloudfront 的 API 文档，发现可以使用 CreateInvalidation 来创建失效。可以使用 aws go sdk 来进行操作。\u003c/p\u003e","title":"Go 刷新 cdn"},{"content":"最近使用 Apisix 网关时，需要开启 gzip 功能，通过查阅资料学习，了解了几种开启 gzip 的方式，本文记录 2 种 Apisix 开启 gzip 的方式。\ngzip 插件 我们可以使用 gzip 插件 针对某些路由开启 gzip，只需对路由使用 gzip 插件并配置一些插件属性即可。\n接下来使用一个例子来演示 gzip 插件，使用 apisix admin api 创建一条路由，要注意的是本文的例子是使用 apisix 3.7 版本：\ncurl -i http://127.0.0.1:9180/apisix/admin/routes \\ -H \u0026#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\u0026#39; -X POST -d \u0026#39; { \u0026#34;uri\u0026#34;: \u0026#34;/get\u0026#34;, \u0026#34;plugins\u0026#34;: { \u0026#34;gzip\u0026#34;: { \u0026#34;buffers\u0026#34;: { \u0026#34;number\u0026#34;: 8 }, \u0026#34;comp_level\u0026#34;: 6, \u0026#34;disable\u0026#34;: false, \u0026#34;types\u0026#34;: \u0026#34;*\u0026#34; } }, \u0026#34;upstream\u0026#34;: { \u0026#34;nodes\u0026#34;: [ { \u0026#34;host\u0026#34;: \u0026#34;httpbin.org\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;weight\u0026#34;: 1 } ], \u0026#34;timeout\u0026#34;: { \u0026#34;connect\u0026#34;: 6, \u0026#34;send\u0026#34;: 6, \u0026#34;read\u0026#34;: 6 }, \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;, \u0026#34;scheme\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;pass_host\u0026#34;: \u0026#34;pass\u0026#34;, \u0026#34;keepalive_pool\u0026#34;: { \u0026#34;idle_timeout\u0026#34;: 60, \u0026#34;requests\u0026#34;: 1000, \u0026#34;size\u0026#34;: 320 } }, \u0026#34;status\u0026#34;: 1 }\u0026#39; 通过访问链接可以看到插件开启成功了。\n接下来介绍另一种方法，自定义 Nginx 配置。\n自定义 Nginx 配置 接下来介绍另一种方法 自定义 Nginx 配置，这种方法可以针对全局路由开启 gzip。apisix 会通过 apisix/cli/ngx_tpl.lua 这个模板和 conf/config-default.yaml 加 conf/config.yaml 的配置生成 Nginx 配置文件。\n在执行完启动后，你可以在 conf/nginx.conf 看到生成的 Nginx 配置文件。\n打开 apisix 的配置文件 conf/config.yaml 文件，添加以下配置 (需要注意原有是否有其它 nginx 配置):\nnginx_config: http_configuration_snippet: | gzip on; gzip_http_version 1.1; gzip_buffers 256 64k; gzip_comp_level 5; gzip_min_length 1000; gzip_proxied expired no-cache no-store private auth; gzip_types application/javascript application/x-javascript text/javascript application/json text/css; gzip_disable \u0026#34;MSIE 6\u0026#34;; gzip_vary on; 添加后，访问同样可以看见 gzip 开启。\n小结 本文介绍了两种为 apisix 开启 gzip 的方式，插件的方式简单快捷但一次只适用于单个路由，nginx 配置的方式麻烦但适合全局路由控制。\n参考 https://apisix.apache.org/docs/apisix/plugins/gzip/ https://apisix.apache.org/docs/apisix/customize-nginx-configuration/ https://github.com/apache/apisix/issues/8995 https://github.com/apache/apisix/issues/8995 ","permalink":"https://jasminides.com/posts/apisix-%E5%BC%80%E5%90%AF-gzip/","summary":"\u003cp\u003e最近使用 Apisix 网关时，需要开启 gzip 功能，通过查阅资料学习，了解了几种开启 gzip 的方式，本文记录 2 种 Apisix 开启 gzip 的方式。\u003c/p\u003e\n\u003ch2 id=\"gzip-插件\"\u003egzip 插件\u003c/h2\u003e\n\u003cp\u003e我们可以使用 gzip 插件 针对某些路由开启 gzip，只需对路由使用 gzip 插件并配置一些插件属性即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix_gzip/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e接下来使用一个例子来演示 gzip 插件，使用 apisix admin api 创建一条路由，要注意的是本文的例子是使用 apisix 3.7 版本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -i http://127.0.0.1:9180/apisix/admin/routes  \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-H \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\u0026#39;\u003c/span\u003e -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\u0026#34;uri\u0026#34;: \u0026#34;/get\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\u0026#34;plugins\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\u0026#34;gzip\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\t\u0026#34;buffers\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\t\t\u0026#34;number\u0026#34;: 8\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\u0026#34;comp_level\u0026#34;: 6,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\u0026#34;disable\u0026#34;: false,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t\u0026#34;types\u0026#34;: \u0026#34;*\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t},\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\u0026#34;upstream\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;nodes\u0026#34;: [\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;host\u0026#34;: \u0026#34;httpbin.org\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;port\u0026#34;: 443,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;weight\u0026#34;: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    ],\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;timeout\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;connect\u0026#34;: 6,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;send\u0026#34;: 6,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;read\u0026#34;: 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;scheme\u0026#34;: \u0026#34;https\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;pass_host\u0026#34;: \u0026#34;pass\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;keepalive_pool\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;idle_timeout\u0026#34;: 60,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;requests\u0026#34;: 1000,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      \u0026#34;size\u0026#34;: 320\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\t\u0026#34;status\u0026#34;: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix_gzip/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"Apisix 开启 gzip"},{"content":"前言 最近出现了多次因为各种原因导致的操作系统宕机的问题，为了查找系统宕机的原因，需要收集系统宕机后的内存转储信息。本文就介绍几种常见的方式。\n阿里云内置命令收集 由于主要使用的是阿里云的服务器，就先介绍阿里云收集系统宕机内存转储信息的方式。\n阿里云系统默认没有开启 dump 配置，我们需要使用以下命令开启：acs-plugin-manager --exec --plugin=ecs_dump_collector --params=\u0026quot;--enable\u0026quot;\n那我们如何收集内存转储信息呢，执行以下命令：acs-plugin-manager --exec --plugin=ecs_dump_collector --params=\u0026quot;-c\u0026quot; 出现以下信息表示收集成功。\n有了转储信息文件我们就可以将文件交给专业的运维人员或阿里云工程师进行宕机原因分析。\n使用 Crash + Kdump 如果我们没有使用阿里云的服务该如何收集系统崩溃的转储信息呢，我们可以使用 Crash + Kdump 进行收集，通过前面的使用可以看出阿里云的插件就是使用了这两个工具，接下来开始进行简单的介绍。\n安装 需要先安装 Crash + Kdump，使用此命令进行安装：\n$ sudo apt install linux-crashdump $ sudo apt install crash 安装完为了使服务生效需要重启服务器。\n使用以下命令：sudo cat /etc/default/grub.d/kdump-tools.cfg\n可以看出系统保留了 192M RAM 内存区供转储捕获内核使用\n收集 为了测试方便我们可以使用此命令快速触发崩溃：sudo echo c \u0026gt; /proc/sysrq-trigger 。命令执行后在 /var/crash 目录会生成以当前时间为名称的目录，目录里面就是收集到的转储信息。\ndemsg.x 为崩溃时候的系统内核日志，dump.x 文件则为转储的内核快照文件。为了更好的查找问题，我们还需要安装 vmlinux，使用以下命令安装：\necho \u0026#34;deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse deb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse deb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse\u0026#34; | sudo tee -a /etc/apt/sources.list.d/ddebs.list sudo apt install ubuntu-dbgsym-keyring sudo apt-get update sudo apt -y install linux-image-$(uname -r)-dbgsym 安装完我们就可以对刚刚收集到的转储文件进行分析了，使用命令：\nsudo crash /usr/lib/debug/boot/vmlinux-5.4.0-166-generic /var/crash/202401061626/dump.202401061626 输出：\ncrash 7.2.8 Copyright (C) 2002-2020 Red Hat, Inc. Copyright (C) 2004, 2005, 2006, 2010 IBM Corporation Copyright (C) 1999-2006 Hewlett-Packard Co Copyright (C) 2005, 2006, 2011, 2012 Fujitsu Limited Copyright (C) 2006, 2007 VA Linux Systems Japan K.K. Copyright (C) 2005, 2011 NEC Corporation Copyright (C) 1999, 2002, 2007 Silicon Graphics, Inc. Copyright (C) 1999, 2000, 2001, 2002 Mission Critical Linux, Inc. This program is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. Enter \u0026#34;help copying\u0026#34; to see the conditions. This program has absolutely no warranty. Enter \u0026#34;help warranty\u0026#34; for details. GNU gdb (GDB) 7.6 Copyright (C) 2013 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \u0026#34;show copying\u0026#34; and \u0026#34;show warranty\u0026#34; for details. This GDB was configured as \u0026#34;x86_64-unknown-linux-gnu\u0026#34;... WARNING: kernel relocated [300MB]: patching 115314 gdb minimal_symbol values KERNEL: /usr/lib/debug/boot/vmlinux-5.4.0-166-generic DUMPFILE: /var/crash/202401061626/dump.202401061626 [PARTIAL DUMP] CPUS: 2 DATE: Sat Jan 6 16:26:23 2024 UPTIME: 00:06:35 LOAD AVERAGE: 0.00, 0.02, 0.02 TASKS: 148 NODENAME: iZ7xv1a0t15muqy1e2co1uZ RELEASE: 5.4.0-166-generic VERSION: #183-Ubuntu SMP Mon Oct 2 11:28:33 UTC 2023 MACHINE: x86_64 (2699 Mhz) MEMORY: 3.9 GB PANIC: \u0026#34;Kernel panic - not syncing: sysrq triggered crash\u0026#34; PID: 3654 COMMAND: \u0026#34;echo\u0026#34; TASK: ffff8c4a696d8000 [THREAD_INFO: ffff8c4a696d8000] CPU: 0 STATE: TASK_RUNNING (PANIC) 使用 bt 命令查看崩溃时的调用栈：\ncrash\u0026gt; bt PID: 3654 TASK: ffff8c4a696d8000 CPU: 0 COMMAND: \u0026#34;echo\u0026#34; #0 [ffffabde00513c68] machine_kexec at ffffffff93c6d063 #1 [ffffabde00513cc8] __crash_kexec at ffffffff93d4de32 #2 [ffffabde00513d98] panic at ffffffff946a69a8 #3 [ffffabde00513e18] sysrq_handle_crash at ffffffff94288205 #4 [ffffabde00513e28] __handle_sysrq.cold at ffffffff946ce885 #5 [ffffabde00513e60] write_sysrq_trigger at ffffffff94288a38 #6 [ffffabde00513e78] proc_reg_write at ffffffff93f69113 #7 [ffffabde00513e98] __vfs_write at ffffffff93ed1b6b #8 [ffffabde00513ea8] vfs_write at ffffffff93ed2879 #9 [ffffabde00513ee0] ksys_write at ffffffff93ed4e07 #10 [ffffabde00513f20] __x64_sys_write at ffffffff93ed4e9a #11 [ffffabde00513f30] do_syscall_64 at ffffffff93c04fe7 #12 [ffffabde00513f50] entry_SYSCALL_64_after_hwframe at ffffffff948000a4 RIP: 00007ff833b41077 RSP: 00007ffeadb56b78 RFLAGS: 00000246 RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007ff833b41077 RDX: 0000000000000002 RSI: 000055b3e2648440 RDI: 0000000000000001 RBP: 000055b3e2648440 R8: 0000000000000000 R9: 0000000000000001 R10: 00007ff833c1c640 R11: 0000000000000246 R12: 0000000000000002 R13: 00007ff833c206a0 R14: 00007ff833c1c4a0 R15: 00007ff833c1b8a0 ORIG_RAX: 0000000000000001 CS: 0033 SS: 002b crash 还有很多用法，感兴趣的读者可以自行研究学习。\n参考 https://help.aliyun.com/zh/ecs/user-guide/collect-kdump-information-after-an-instance-experiences-an-operating-system-failure?spm=5176.smartservice_service_robot_chat_new.0.0.aedc3f1bqtn8Zi https://crash-utility.github.io/crash_whitepaper.html#WHY_CRASH ","permalink":"https://jasminides.com/posts/%E5%A6%82%E4%BD%95%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E5%AE%95%E6%9C%BA%E5%90%8E%E7%9A%84%E5%86%85%E5%AD%98%E8%BD%AC%E5%82%A8%E4%BF%A1%E6%81%AF/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近出现了多次因为各种原因导致的操作系统宕机的问题，为了查找系统宕机的原因，需要收集系统宕机后的内存转储信息。本文就介绍几种常见的方式。\u003c/p\u003e\n\u003ch2 id=\"阿里云内置命令收集\"\u003e阿里云内置命令收集\u003c/h2\u003e\n\u003cp\u003e由于主要使用的是阿里云的服务器，就先介绍阿里云收集系统宕机内存转储信息的方式。\u003c/p\u003e\n\u003cp\u003e阿里云系统默认没有开启 dump 配置，我们需要使用以下命令开启：\u003ccode\u003eacs-plugin-manager --exec --plugin=ecs_dump_collector --params=\u0026quot;--enable\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/crash/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e那我们如何收集内存转储信息呢，执行以下命令：\u003ccode\u003eacs-plugin-manager --exec --plugin=ecs_dump_collector --params=\u0026quot;-c\u0026quot;\u003c/code\u003e 出现以下信息表示收集成功。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/crash/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/crash/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e有了转储信息文件我们就可以将文件交给专业的运维人员或阿里云工程师进行宕机原因分析。\u003c/p\u003e\n\u003ch2 id=\"使用-crash--kdump\"\u003e使用 Crash + Kdump\u003c/h2\u003e\n\u003cp\u003e如果我们没有使用阿里云的服务该如何收集系统崩溃的转储信息呢，我们可以使用 Crash + Kdump 进行收集，通过前面的使用可以看出阿里云的插件就是使用了这两个工具，接下来开始进行简单的介绍。\u003c/p\u003e\n\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cp\u003e需要先安装 Crash + Kdump，使用此命令进行安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt install linux-crashdump\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt install crash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装完为了使服务生效需要重启服务器。\u003c/p\u003e\n\u003cp\u003e使用以下命令：\u003ccode\u003esudo cat /etc/default/grub.d/kdump-tools.cfg\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/crash/img_3.png\" alt=\"img_3.png\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"/img/crash/img_4.png\" alt=\"img_4.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看出系统保留了 192M RAM 内存区供转储捕获内核使用\u003c/p\u003e\n\u003ch3 id=\"收集\"\u003e收集\u003c/h3\u003e\n\u003cp\u003e为了测试方便我们可以使用此命令快速触发崩溃：\u003ccode\u003esudo echo c \u0026gt; /proc/sysrq-trigger\u003c/code\u003e 。命令执行后在 /var/crash 目录会生成以当前时间为名称的目录，目录里面就是收集到的转储信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/crash/img_5.png\" alt=\"img_5.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003edemsg.x 为崩溃时候的系统内核日志，dump.x 文件则为转储的内核快照文件。为了更好的查找问题，我们还需要安装 vmlinux，使用以下命令安装：\u003c/p\u003e","title":"如何收集系统宕机后的内存转储信息"},{"content":"前言 本文介绍一个 go 汉字转拼音的库 go-pinyin，可以从名字看出这个库的功能就是将汉字转换为相应的拼音。接下来就由我来简单的介绍 go-pinyin。\n安装 使用此命令安装：go get github.com/mozillazg/go-pinyin\ncli 安装 如果你的 go 版本在 1.17 以下使用此命令安装：go get -u github.com/mozillazg/go-pinyin/cli/pinyin。1.17 及以上版本使用此命令安装：go install github.com/mozillazg/go-pinyin/cli/pinyin@latest。\n使用 接下来将分别介绍 cli 的使用和 API 的使用。\ncli 使用 安装完在终端输入 pinyin，可以看到使用的方法，尝试一个汉字，可以看到相应的拼音，但也可以看出对多音字的支持有问题。 $ pinyin 中国 zhōng guó $ pinyin 重庆 zhòng qìng 接下来介绍 API 的使用。\napi 使用 通过查看文档，可以看出主要是 2 个方法 pinyin.NewArgs 和 pinyin.Pinyin 。\npinyin.NewArgs 创建包含默认配置的 Args, 可以通过修改 Args 的成员来使用不同的模式。\ntype Args struct { Style int // 拼音风格（默认：Normal) Heteronym bool // 是否启用多音字模式（默认：禁用） Separator string // Slug 中使用的分隔符（默认：-) // 处理没有拼音的字符（默认忽略没有拼音的字符） // 函数返回的 slice 的长度为 0 则表示忽略这个字符 Fallback func(r rune, a Args) []string } pinyin.Pinyin 就是将汉字转为拼音。\n接下来看一个简单的例子：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/mozillazg/go-pinyin\u0026#34; ) func main() { hans := \u0026#34;福建\u0026#34; // 默认 a := pinyin.NewArgs() fmt.Println(pinyin.Pinyin(hans, a)) // 包含声调 a.Style = pinyin.Tone fmt.Println(pinyin.Pinyin(hans, a)) // 声调用数字表示 a.Style = pinyin.Tone2 fmt.Println(pinyin.Pinyin(hans, a)) hans = \u0026#34;重庆\u0026#34; // 开启多音字模式 a = pinyin.NewArgs() a.Heteronym = true fmt.Println(pinyin.Pinyin(hans, a)) a.Style = pinyin.Tone2 fmt.Println(pinyin.Pinyin(hans, a)) } 输出：\n[[fu] [jian]] [[fú] [jiàn]] [[fu2] [jia4n]] [[zhong chong tong] [qing]] [[zho4ng cho2ng to2ng] [qi4ng]] 通过结果可以看出对多音字的支持有问题。\n小结 本文简单介绍了 go 中的中文转拼音的库 go-pinyin，通过对库的使用，可以发现词库对多音字的支持有问题，但一些常规的支持还是很完善的。\n参考 https://github.com/mozillazg/pinyin-data https://github.com/mozillazg/go-pinyin ","permalink":"https://jasminides.com/posts/go-%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3-go-pinyin/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e本文介绍一个 go 汉字转拼音的库 go-pinyin，可以从名字看出这个库的功能就是将汉字转换为相应的拼音。接下来就由我来简单的介绍 go-pinyin。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e使用此命令安装：\u003ccode\u003ego get github.com/mozillazg/go-pinyin\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"cli-安装\"\u003ecli 安装\u003c/h3\u003e\n\u003cp\u003e如果你的 go 版本在 1.17 以下使用此命令安装：\u003ccode\u003ego get -u github.com/mozillazg/go-pinyin/cli/pinyin\u003c/code\u003e。1.17 及以上版本使用此命令安装：\u003ccode\u003ego install github.com/mozillazg/go-pinyin/cli/pinyin@latest\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e接下来将分别介绍 cli 的使用和 API 的使用。\u003c/p\u003e\n\u003ch3 id=\"cli-使用\"\u003ecli 使用\u003c/h3\u003e\n\u003cp\u003e安装完在终端输入 pinyin，可以看到使用的方法，尝试一个汉字，可以看到相应的拼音，但也可以看出对多音字的支持有问题。\n\u003cimg loading=\"lazy\" src=\"/img/pinyin/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pinyin 中国\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ezhōng guó \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pinyin 重庆\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ezhòng qìng \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来介绍 API 的使用。\u003c/p\u003e\n\u003ch3 id=\"api-使用\"\u003eapi 使用\u003c/h3\u003e\n\u003cp\u003e通过查看文档，可以看出主要是 2 个方法 \u003ccode\u003epinyin.NewArgs\u003c/code\u003e 和 \u003ccode\u003epinyin.Pinyin\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epinyin.NewArgs\u003c/code\u003e 创建包含默认配置的 Args, 可以通过修改 Args 的成员来使用不同的模式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eArgs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eStyle\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// 拼音风格（默认：Normal)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eHeteronym\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 是否启用多音字模式（默认：禁用）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eSeparator\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// Slug 中使用的分隔符（默认：-)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 处理没有拼音的字符（默认忽略没有拼音的字符）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 函数返回的 slice 的长度为 0 则表示忽略这个字符\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eFallback\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eArgs\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003epinyin.Pinyin\u003c/code\u003e 就是将汉字转为拼音。\u003c/p\u003e","title":"go 汉字转拼音 go-pinyin"},{"content":"前言 今天介绍一个 go 库 - mergo, mergo 用来方便的合并 struct 和 map ,可以将结构体的字段赋值到 map 中，可以将 map 的值赋值给结构体的字段。\nMergo 通过在零值字段中设置默认值来合并同类型的 struct 和 map。Mergo 不会合并未导出（私有）字段。它会递归合并任何已导出的字段。它也不会合并 map 中的结构体（因为它们无法使用 Go 反射寻址）。\nMergo 在很多知名项目中被使用，如 containerd、k8s、loki 等。\n安装 使用以下命令安装 mergo : go get -u dario.cat/mergo\n使用 接下来介绍 mergo 的基础使用和高级用法。\n基础使用 mergo 提供了 2 个主要函数：Merge 和 Map, Mergo 用来合并 2 个相同结构的 struct 和 map, Map 用来在结构和 map 之间赋值。\n例子：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/imdario/mergo\u0026#34; ) type redisConfig struct { Address string Port int DB int UserName string PassWord string } var defaultConfig = redisConfig{ Address: \u0026#34;127.0.0.1\u0026#34;, Port: 6379, DB: 1, UserName: \u0026#34;123\u0026#34;, PassWord: \u0026#34;123\u0026#34;, } func main() { var config redisConfig if err := mergo.Merge(\u0026amp;config, defaultConfig); err != nil { log.Fatal(err) } fmt.Println(\u0026#34;redis address: \u0026#34;, config.Address) fmt.Println(\u0026#34;redis port: \u0026#34;, config.Port) fmt.Println(\u0026#34;redis db: \u0026#34;, config.DB) fmt.Println(\u0026#34;redis username: \u0026#34;, config.UserName) fmt.Println(\u0026#34;redis password: \u0026#34;, config.PassWord) var m = make(map[string]interface{}) if err := mergo.Map(\u0026amp;m, defaultConfig); err != nil { log.Fatal(err) } fmt.Println(m) } 接下来介绍一些高级用法：\n覆盖 如果目标结构已经有初始值的情况，Merge/Map 函数不会覆盖已经有的值，如果想要覆盖原有的值，需要使用 WithOverride 参数。\nvar config redisConfig config.UserName = \u0026#34;overstarry\u0026#34; if err := mergo.Merge(\u0026amp;config, defaultConfig, mergo.WithOverride); err != nil { log.Fatal(err) } 如果需要检查合并的对象类型是否一致，可以使用 mergo.WithTypeCheck 参数。如果需要覆盖指针，则需使用 WithoutDereference 参数。\nslice 如果结构体中的字段是切片类型，覆盖时想要合并 2 个切片，则使用 WithAppendSlice 参数。\nif err := mergo.Merge(\u0026amp;config, defaultConfig, mergo.WithAppendSlice); err != nil { log.Fatal(err) } 小结 本文简单的介绍了 mergo 库和常用的一些参数用法，mergo 还提供了一些复杂的参数，有兴趣的读者可以自行研究。\n参考 https://github.com/darccio/mergo https://pkg.go.dev/github.com/imdario/mergo?utm_source=godoc ","permalink":"https://jasminides.com/posts/mergo-%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天介绍一个 go 库 - mergo, mergo 用来方便的合并 struct 和 map ,可以将结构体的字段赋值到 map 中，可以将 map 的值赋值给结构体的字段。\u003c/p\u003e\n\u003cp\u003eMergo 通过在零值字段中设置默认值来合并同类型的 struct 和 map。Mergo 不会合并未导出（私有）字段。它会递归合并任何已导出的字段。它也不会合并 map 中的结构体（因为它们无法使用 Go 反射寻址）。\u003c/p\u003e\n\u003cp\u003eMergo 在很多知名项目中被使用，如 containerd、k8s、loki 等。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e使用以下命令安装 mergo : \u003ccode\u003ego get -u dario.cat/mergo\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e接下来介绍 mergo 的基础使用和高级用法。\u003c/p\u003e\n\u003ch3 id=\"基础使用\"\u003e基础使用\u003c/h3\u003e\n\u003cp\u003emergo 提供了 2 个主要函数：Merge 和 Map, Mergo 用来合并 2 个相同结构的 struct 和 map, Map 用来在结构和 map 之间赋值。\u003c/p\u003e\n\u003cp\u003e例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/imdario/mergo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eredisConfig\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePort\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eDB\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eUserName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePassWord\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefaultConfig\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eredisConfig\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e:  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePort\u003c/span\u003e:     \u003cspan style=\"color:#ae81ff\"\u003e6379\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eDB\u003c/span\u003e:       \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eUserName\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePassWord\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eredisConfig\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emergo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMerge\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edefaultConfig\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;redis address: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;redis port: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePort\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;redis db: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDB\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;redis username: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUserName\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;redis password: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePassWord\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emergo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMap\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edefaultConfig\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来介绍一些高级用法：\u003c/p\u003e","title":"mergo 介绍"},{"content":"前言 本文介绍 conc - 一个更好的 go 并发库，sourcegraph 在日常开发中使用 go 原生并发出现了问题，由此开发了 conc，相比标准并发代码更优雅，代码更少，下面展示一个例子，可以看出代码减少了许多。\ntype propagatedPanic struct { val any stack []byte } func main() { done := make(chan *propagatedPanic) go func() { defer func() { if v := recover(); v != nil { done \u0026lt;- \u0026amp;propagatedPanic{ val: v, stack: debug.Stack(), } } else { done \u0026lt;- nil } }() doSomethingThatMightPanic() }() if val := \u0026lt;-done; val != nil { panic(val) } } // conc func main() { var wg conc.WaitGroup wg.Go(doSomethingThatMightPanic) // panics with a nice stacktrace wg.Wait() } 安装 使用以下命令进行安装：go get github.com/sourcegraph/conc\n接下来对 conc 如何使用进行介绍。\n介绍 conc.WaitGroup conc.WaitGroup 与标准库 sync.WaitGroup 的区别在于 conc.WaitGroup 中子 goroutine 中的 panic 会被传递给 Wait 方法的调用方，避免去 recover goroutine 的 panic.\n例子：\nfunc main() { var count atomic.Int64 var wg conc.WaitGroup for i := 1; i \u0026lt; 100; i++ { wg.Go(func() { count.Add(1) }) } wg.Wait() fmt.Println(count.Load()) } 如果想要 recover 某个 goroutine 发生的 panic，可以使用 WaitAndRecover 方法：\nfunc main() { var count atomic.Int64 var wg conc.WaitGroup for i := 0; i \u0026lt; 10; i++ { wg.Go(func() { if i == 7 { panic(\u0026#34;bad thing\u0026#34;) } count.Add(1) }) } wg.WaitAndRecover() fmt.Println(count.Load()) } goroutine 池 Pool 是用于处理并发任务的 goroutine 池，Pool 中的 goroutine 是延迟启动的，所以创建一个新的 Pool 是廉价的。产生的 goroutine 永远不会多于提交的任务。池是高效的，但不是零成本。它不应该用于非常短的任务。启动和拆卸的开销约为 1μs，每个任务的开销约为 300ns。\n例子：\nfunc main() { p := pool.New().WithMaxGoroutines(3) for i := 0; i \u0026lt; 5; i++ { p.Go(func() { fmt.Println(\u0026#34;conc\u0026#34;) }) } p.Wait() } 使用 WithContext 可以创建一个传递 Context 的 Pool，通过这个父 Context 来控制池中的 goroutine。默认情况下，在取消父 Context 之前，Pool 中的 Context 不会取消。如果需要在出现 panic 或错误时取消 context 可以通过配置 WithCancelOnError 来实现，例子：\nfunc main() { p := pool.New(). WithMaxGoroutines(4). WithContext(context.Background()). WithCancelOnError() for i := 0; i \u0026lt; 3; i++ { i := i p.Go(func(ctx context.Context) error { if i == 2 { return errors.New(\u0026#34;I will cancel all other tasks!\u0026#34;) } \u0026lt;-ctx.Done() return nil }) } err := p.Wait() fmt.Println(err) } ResultPool 是一个执行返回泛型结果的任务池。使用 Go() 在池中执行任务，然后由 Wait() 返回任务的结果。例子：\np := pool.NewWithResults[int]() for i := 0; i \u0026lt; 10; i++ { i := i p.Go(func() int { return i * 2 }) } res := p.Wait() // Result order is nondeterministic, so sort them first sort.Ints(res) fmt.Println(res) Stream Pool 执行任务返回的顺序是无序的，想要有序的结果可以使用 Stream。要使用 Stream，您需要提交一定数量的 Task，每个任务都会返回一个回调。每个任务都将在任务池中同时执行，并且回调将按照任务提交的顺序顺序执行。 任务提交完需使用 Wait() 方法等待任务执行完并传递 panic.\n同 Pool 一样，Stream 也不适用于非常短的任务。启动和拆卸会增加几微秒的开销，每个任务的开销大约是 500ns。\n例子：\nfunc main() { times := []int{20, 52, 16, 45, 4, 80} stream := stream2.New() for _, millis := range times { dur := time.Duration(millis) * time.Millisecond stream.Go(func() stream2.Callback { time.Sleep(dur) // This will print in the order the tasks were submitted return func() { fmt.Println(dur) } }) } stream.Wait() } 小结 conc 相较于标准库的并发处理库，代码更加简洁，使用更加方便，是一套非常适合初学者的并发工具。\n参考 https://about.sourcegraph.com/blog/building-conc-better-structured-concurrency-for-go https://github.com/sourcegraph/conc https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/ ","permalink":"https://jasminides.com/posts/conc-%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A5%BD%E7%9A%84-go-%E5%B9%B6%E5%8F%91%E5%BA%93/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e本文介绍 conc - 一个更好的 go 并发库，sourcegraph 在日常开发中使用 go 原生并发出现了问题，由此开发了 conc，相比标准并发代码更优雅，代码更少，下面展示一个例子，可以看出代码减少了许多。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epropagatedPanic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epropagatedPanic\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e recover(); \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epropagatedPanic\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e:   \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003edebug\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStack\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edoSomethingThatMightPanic\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        panic(\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// conc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edoSomethingThatMightPanic\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// panics with a nice stacktrace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e使用以下命令进行安装：\u003ccode\u003ego get github.com/sourcegraph/conc\u003c/code\u003e\u003c/p\u003e","title":"conc 一个更好的 go 并发库"},{"content":"前言 最近在使用 Kubernetes 查看 pod 日志时，发现 pod 日志显示的 ip 不是真实的请求者 ip, 而是 Node 节点的 ip。通过查阅资料发现可以通过设置 externalTrafficPolicy 来显示真实的 IP。\n本文对 externaltrafficpolicy 进行一个简单的介绍。\n简介 ExternalTrafficPolicy 是 Kubernetes Service 对象的一个属性，它决定了流量如何从集群外部访问 Service。有两个可选值：Cluster 和 Local。\nCluster 模式： 在 Cluster 模式下，流量将通过负载均衡器分发到 Service 的所有 Pod 上。这是传统的负载均衡方式，适用于需要水平扩展和容错的场景。负载均衡器会将流量平均分配给所有可用的 Pod，从而实现负载均衡。\nLocal 模式： 在 Local 模式下，流量将直接访问与请求最近的节点上运行的 Pod。这种方式避免了负载均衡器的介入，直接将流量定向到本地的 Pod 上。这样可以减少延迟，并且在负载均衡器发生故障时仍然保持可用性。\n区别 两种模式有什么区别呢？\nCluster 模式 Cluster 模式是默认的模式，Kube-proxy 不管容器在哪个节点上，会公平的转发到某一个节点上，在转发时会替换掉源 ip，变成转发的上一个节点的 ip.原因是 Kube-proxy 在做转发的时候，会做一次 SNAT (source network address translation)，所以源 ip 变成了上一个节点的 ip 地址。\n这个模式的优点是负载均衡比较好，缺点是由于转发，可能会有性能损耗。\nLocal 模式 Local 模式下，请求只转发给本机的容器，不会转发给其它节点的容器，保留了源 ip。\n这个模式的优缺点跟 Cluster 模式恰恰相反：性能好，负载均衡不好。所以如果想要负载均衡就需要一层 LB 来进行控制。\n参考 https://github.com/apache/apisix-ingress-controller/issues/1166 https://medium.com/pablo-perez/k8s-externaltrafficpolicy-local-or-cluster-40b259a19404 https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/ ","permalink":"https://jasminides.com/posts/kubernetes-externaltrafficpolicy-%E7%AE%80%E4%BB%8B/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在使用 Kubernetes 查看 pod 日志时，发现 pod 日志显示的 ip 不是真实的请求者 ip, 而是 Node 节点的 ip。通过查阅资料发现可以通过设置 externalTrafficPolicy 来显示真实的 IP。\u003c/p\u003e\n\u003cp\u003e本文对 externaltrafficpolicy 进行一个简单的介绍。\u003c/p\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003eExternalTrafficPolicy 是 Kubernetes Service 对象的一个属性，它决定了流量如何从集群外部访问 Service。有两个可选值：Cluster 和 Local。\u003c/p\u003e\n\u003cp\u003eCluster 模式：\n在 Cluster 模式下，流量将通过负载均衡器分发到 Service 的所有 Pod 上。这是传统的负载均衡方式，适用于需要水平扩展和容错的场景。负载均衡器会将流量平均分配给所有可用的 Pod，从而实现负载均衡。\u003c/p\u003e\n\u003cp\u003eLocal 模式：\n在 Local 模式下，流量将直接访问与请求最近的节点上运行的 Pod。这种方式避免了负载均衡器的介入，直接将流量定向到本地的 Pod 上。这样可以减少延迟，并且在负载均衡器发生故障时仍然保持可用性。\u003c/p\u003e\n\u003ch2 id=\"区别\"\u003e区别\u003c/h2\u003e\n\u003cp\u003e两种模式有什么区别呢？\u003c/p\u003e\n\u003ch3 id=\"cluster-模式\"\u003eCluster 模式\u003c/h3\u003e\n\u003cp\u003eCluster 模式是默认的模式，Kube-proxy 不管容器在哪个节点上，会公平的转发到某一个节点上，在转发时会替换掉源 ip，变成转发的上一个节点的 ip.原因是 Kube-proxy 在做转发的时候，会做一次 SNAT (source network address translation)，所以源 ip 变成了上一个节点的 ip 地址。\u003c/p\u003e\n\u003cp\u003e这个模式的优点是负载均衡比较好，缺点是由于转发，可能会有性能损耗。\u003c/p\u003e\n\u003ch3 id=\"local-模式\"\u003eLocal 模式\u003c/h3\u003e\n\u003cp\u003eLocal 模式下，请求只转发给本机的容器，不会转发给其它节点的容器，保留了源 ip。\u003c/p\u003e","title":"Kubernetes externaltrafficpolicy 简介"},{"content":"前言 最近发现了一个新的工具-clarity, clarity 是一种免费工具，用于捕获用户使用网站。安装非常简单，可以在数分钟内开始获取数据。\nclarity 有以下功能特点：\n热点地图：为你的所有页面自动生成。查看用户点击的位置、他们忽略的内容以及滚动的距离。 insights: 快速发现用户在何处感到灰心，并将这些问题转化为机会。 Google Analytics: 可以方便的与 Google Analytics 关联。 会话录制：观看用户如何使用你的网站。了解运行顺畅的地方、需要改进的内容，并测试新想法。 copilot: 使用由 GPT 构建的直观对话体验来理解你的分析数据。 接下来就开始介绍 clarity 的简单使用。\nclarity 使用 创建项目 登录成功后，可以选择网站或者移动项目，这里选择网站，输入相应的信息。\n配置代码 填完信息，需要配置相应的代码信息，可以看到有 2 种方法，一种是知名第三方平台提供的快捷配置方法另一种是手动添加代码。这里选择手动添加代码。\n配置信息 根据导览，可以配置一些信息，例如与 ga 关联，屏蔽一些隐私信息。\n查看数据 根据导览的指引配置完信息后，第二天再次登录系统就可以看到数据了。可以看到有 4 个主要的模块栏目：仪表盘、录制、热度地图、ga，接下来分别介绍这 4 个部分。\n仪表盘 仪表盘主要就是用户在你网站上访问的整体数据的展现。\n录制 录制通过名字就可以得知这个是对用户在你页面上浏览情况的录制，可以看到用户的访问的整体情况，点击了哪些元素等。\n热度地图 热度地图可以看到网站的哪些页面经常被访问，被访问的页面哪些部分经常被点击。\nGoogle Analytics Google Analytics 主要就是 ga 的数据了。\n小结 本文简单的介绍了 clarity 的使用，由于目前数据量较少，不能很好的展示 clarity 的功能。\nclarity 的代码已经开源了，有兴趣的可以访问 https://github.com/microsoft/clarity?tab=readme-ov-file 查看。\n参考 https://clarity.microsoft.com/ https://clarity.microsoft.com/demo/projects/view/3t0wlogvdz/dashboard https://www.capterra.com/p/236349/Microsoft-Clarity/ https://learn.microsoft.com/en-us/clarity/ https://github.com/microsoft/clarity https://learn.microsoft.com/en-us/clarity/ga-integration/ga-integration#how-to-find-and-add-your-account-id-on-google-analytics ","permalink":"https://jasminides.com/posts/clarity-%E5%AD%A6%E4%B9%A0/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近发现了一个新的工具-clarity, clarity 是一种免费工具，用于捕获用户使用网站。安装非常简单，可以在数分钟内开始获取数据。\u003c/p\u003e\n\u003cp\u003eclarity 有以下功能特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e热点地图：为你的所有页面自动生成。查看用户点击的位置、他们忽略的内容以及滚动的距离。\u003c/li\u003e\n\u003cli\u003einsights: 快速发现用户在何处感到灰心，并将这些问题转化为机会。\u003c/li\u003e\n\u003cli\u003eGoogle Analytics: 可以方便的与 Google Analytics 关联。\u003c/li\u003e\n\u003cli\u003e会话录制：观看用户如何使用你的网站。了解运行顺畅的地方、需要改进的内容，并测试新想法。\u003c/li\u003e\n\u003cli\u003ecopilot: 使用由 GPT 构建的直观对话体验来理解你的分析数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来就开始介绍 clarity 的简单使用。\u003c/p\u003e\n\u003ch2 id=\"clarity-使用\"\u003eclarity 使用\u003c/h2\u003e\n\u003ch3 id=\"创建项目\"\u003e创建项目\u003c/h3\u003e\n\u003cp\u003e登录成功后，可以选择网站或者移动项目，这里选择网站，输入相应的信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"配置代码\"\u003e配置代码\u003c/h3\u003e\n\u003cp\u003e填完信息，需要配置相应的代码信息，可以看到有 2 种方法，一种是知名第三方平台提供的快捷配置方法另一种是手动添加代码。这里选择手动添加代码。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"配置信息\"\u003e配置信息\u003c/h3\u003e\n\u003cp\u003e根据导览，可以配置一些信息，例如与 ga 关联，屏蔽一些隐私信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_3.png\" alt=\"img_3.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_4.png\" alt=\"img_4.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"查看数据\"\u003e查看数据\u003c/h3\u003e\n\u003cp\u003e根据导览的指引配置完信息后，第二天再次登录系统就可以看到数据了。可以看到有 4 个主要的模块栏目：仪表盘、录制、热度地图、ga，接下来分别介绍这 4 个部分。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_5.png\" alt=\"img_5.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"仪表盘\"\u003e仪表盘\u003c/h3\u003e\n\u003cp\u003e仪表盘主要就是用户在你网站上访问的整体数据的展现。\u003c/p\u003e\n\u003ch3 id=\"录制\"\u003e录制\u003c/h3\u003e\n\u003cp\u003e录制通过名字就可以得知这个是对用户在你页面上浏览情况的录制，可以看到用户的访问的整体情况，点击了哪些元素等。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_6.png\" alt=\"img_6.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"热度地图\"\u003e热度地图\u003c/h3\u003e\n\u003cp\u003e热度地图可以看到网站的哪些页面经常被访问，被访问的页面哪些部分经常被点击。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_7.png\" alt=\"img_7.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/clarity/img_8.png\" alt=\"img_8.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"google-analytics\"\u003eGoogle Analytics\u003c/h3\u003e\n\u003cp\u003eGoogle Analytics 主要就是 ga 的数据了。\u003c/p\u003e","title":"clarity 学习"},{"content":"前言 本文介绍如何使用 CTE 表达式来简化 PostgreSQL 中的一些复杂查询。那 CTE 表达式是什么呢？\nCTE 介绍 在 PostgreSql 中 WITH 提供了一种方式来书写在一个大型查询中使用的辅助语句。这些语句通常被称为公共表表达式或 CTE（Common Table Expressions），它们可以被看成是定义只在一个查询中存在的临时表。在 WITH 子句中的每一个辅助语句可以是一个 SELECT、INSERT、UPDATE 或 DELETE，并且 WITH 子句本身也可以被附加到一个主语句，主语句也可以是 SELECT、INSERT、UPDATE 或 DELETE。在 PostgreSQL 中，WITH 子句提供了一种编写辅助语句的方法，以便在复杂的查询中使用。\n使用 该如何创建 CTE 呢，创建 CTE 的语句如下：\nWITH cte_name AS ( SELECT column1, column2, ... FROM table_name WHERE condition ... ) SELECT * FROM cte_name; 在日常查询中 CTE 用于哪些场景呢：\n递归查询：CTE 表达式常用于执行递归查询。通过在 CTE 表达式中引用自身，可以简洁地实现递归操作。 复杂查询：CTE 表达式可以用于构建复杂的查询，将查询逻辑分解为更易于理解和维护的部分。每个 CTE 子查询块可以负责不同的逻辑操作，最终组合成一个完整的查询。 数据转换和重组：CTE 表达式可以用于对数据进行转换和重组。通过在不同的 CTE 子查询块中选择、过滤和连接数据，可以生成新的结果集。 递归查询 WITH 表达式如何实现递归查询呢，可以通过添加 RECURSIVE 修饰符来实现。下面是一个示例：\nWITH RECURSIVE t(n) AS ( VALUES (1) UNION ALL SELECT n+1 FROM t WHERE n \u0026lt; 100 ) SELECT sum(n) FROM t; 这个例子是对 1 到 100 之间数求和。\n小结 PostgreSQL 的 CTE 表达式是一种强大的工具，可以帮助我们编写复杂且高效的查询语句。\n参考 https://www.postgresql.org/docs/16/queries-with.html ","permalink":"https://jasminides.com/posts/postgresql-cte-%E8%A1%A8%E8%BE%BE%E5%BC%8F/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e本文介绍如何使用 CTE 表达式来简化 PostgreSQL 中的一些复杂查询。那 CTE 表达式是什么呢？\u003c/p\u003e\n\u003ch3 id=\"cte-介绍\"\u003eCTE 介绍\u003c/h3\u003e\n\u003cp\u003e在 PostgreSql 中 WITH 提供了一种方式来书写在一个大型查询中使用的辅助语句。这些语句通常被称为公共表表达式或 CTE（Common Table Expressions），它们可以被看成是定义只在一个查询中存在的临时表。在 WITH 子句中的每一个辅助语句可以是一个 SELECT、INSERT、UPDATE 或 DELETE，并且 WITH 子句本身也可以被附加到一个主语句，主语句也可以是 SELECT、INSERT、UPDATE 或 DELETE。在 PostgreSQL 中，WITH 子句提供了一种编写辅助语句的方法，以便在复杂的查询中使用。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e该如何创建 CTE 呢，创建 CTE 的语句如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eWITH\u003c/span\u003e cte_name \u003cspan style=\"color:#66d9ef\"\u003eAS\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eWHERE\u003c/span\u003e condition\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e cte_name;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在日常查询中 CTE 用于哪些场景呢：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e递归查询：CTE 表达式常用于执行递归查询。通过在 CTE 表达式中引用自身，可以简洁地实现递归操作。\u003c/li\u003e\n\u003cli\u003e复杂查询：CTE 表达式可以用于构建复杂的查询，将查询逻辑分解为更易于理解和维护的部分。每个 CTE 子查询块可以负责不同的逻辑操作，最终组合成一个完整的查询。\u003c/li\u003e\n\u003cli\u003e数据转换和重组：CTE 表达式可以用于对数据进行转换和重组。通过在不同的 CTE 子查询块中选择、过滤和连接数据，可以生成新的结果集。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"递归查询\"\u003e递归查询\u003c/h3\u003e\n\u003cp\u003eWITH 表达式如何实现递归查询呢，可以通过添加 RECURSIVE 修饰符来实现。下面是一个示例：\u003c/p\u003e","title":"Postgresql CTE 表达式"},{"content":"今天介绍一个常见的设计模式 - 策略模式，并基于一个简单的例子来讲解。\n策略模式介绍 策略模式（Strategy Pattern）是一种行为型设计模式，它将一组算法封装成独立的对象，并使它们可以互相替换。这样做的好处是，可以在运行时动态地改变对象的行为，而不需要修改使用该对象的代码。\n何时可以使用策略模式呢 我们在用 GO 编程的时候经常碰到多层控制语句，一层又一层，既不优雅，也不利于后续维护。比如下述这种：\nif xxx { // do something } else if xxx { // do something } else if xxx { // do something else { } 虽然按这种模式写起来简单快捷，但它也违背了面向对象的两个原则：\n单一职责原则：多个控制语句，意味着拥有多种功能； 开闭原则：当要进行修改时，原有代码不可避免要被修改； 此时就可以采用策略模式来替换这类多层控制语句。\ngo 实现策略模式 go 语言该怎么实现策略模式呢？\n在 Go 语言中，策略模式可以通过接口和函数来实现。首先，我们定义一个接口，该接口声明了算法执行的方法。然后，我们可以为每个具体的算法实现一个结构体，并实现接口中的方法。最后，我们可以在需要使用算法的地方，通过接口来调用具体的算法。\n下面通过一个简单的例子来讲解策略模式，现在有这样一个场景我们现在有 2 个数据表，这 2 个数据表拥有相同的字段，都可以根据 name 来查询某个数据，我们需要根据参数的不同来决定使用哪种表进行查询，在没有使用策略模式时，我们往往使用大量的 if 来实现这个操作。 接下来由我来介绍策略模式来实现相同的操作。\n先定义查询操作的接口：\ntype DataStrategy interface { Query(name string) } 定义 2 张表的查询 struct，并实现 DataStrategy 接口：\n// table1 通过 table1 来查询 type table1 struct{} func (s *table1) Query(name string) { fmt.Println(\u0026#34;table1 query\u0026#34;) } // table2 type table2 struct{} func (s *table2) Query(name string) { fmt.Println(\u0026#34;table2 query\u0026#34;) } 再定义 Data 对象用来执行不同的策略：\ntype Data struct { impl DataStrategy } func (r *Data) SetTable(i DataStrategy) { r.impl = i } func (r *Data) Query(name string) { r.impl.Query(name) } 运行代码：\ntable1 query table2 query 小结 策略模式是一种非常有用的设计模式，它可以在不修改现有代码的情况下，动态地改变算法或行为。在 Go 语言中，我们可以通过接口和函数来实现策略模式。通过合理地应用策略模式，我们可以使代码更加灵活、可扩展，并提高代码的可维护性。\n","permalink":"https://jasminides.com/posts/go-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e今天介绍一个常见的设计模式 - 策略模式，并基于一个简单的例子来讲解。\u003c/p\u003e\n\u003ch2 id=\"策略模式介绍\"\u003e策略模式介绍\u003c/h2\u003e\n\u003cp\u003e策略模式（Strategy Pattern）是一种行为型设计模式，它将一组算法封装成独立的对象，并使它们可以互相替换。这样做的好处是，可以在运行时动态地改变对象的行为，而不需要修改使用该对象的代码。\u003c/p\u003e\n\u003ch3 id=\"何时可以使用策略模式呢\"\u003e何时可以使用策略模式呢\u003c/h3\u003e\n\u003cp\u003e我们在用 GO 编程的时候经常碰到多层控制语句，一层又一层，既不优雅，也不利于后续维护。比如下述这种：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exxx\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// do something\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exxx\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// do something\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exxx\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// do something\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然按这种模式写起来简单快捷，但它也违背了面向对象的两个原则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e单一职责原则：多个控制语句，意味着拥有多种功能；\u003c/li\u003e\n\u003cli\u003e开闭原则：当要进行修改时，原有代码不可避免要被修改；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此时就可以采用策略模式来替换这类多层控制语句。\u003c/p\u003e\n\u003ch2 id=\"go-实现策略模式\"\u003ego 实现策略模式\u003c/h2\u003e\n\u003cp\u003ego 语言该怎么实现策略模式呢？\u003c/p\u003e\n\u003cp\u003e在 Go 语言中，策略模式可以通过接口和函数来实现。首先，我们定义一个接口，该接口声明了算法执行的方法。然后，我们可以为每个具体的算法实现一个结构体，并实现接口中的方法。最后，我们可以在需要使用算法的地方，通过接口来调用具体的算法。\u003c/p\u003e\n\u003cp\u003e下面通过一个简单的例子来讲解策略模式，现在有这样一个场景我们现在有 2 个数据表，这 2 个数据表拥有相同的字段，都可以根据 name 来查询某个数据，我们需要根据参数的不同来决定使用哪种表进行查询，在没有使用策略模式时，我们往往使用大量的 if 来实现这个操作。\n接下来由我来介绍策略模式来实现相同的操作。\u003c/p\u003e\n\u003cp\u003e先定义查询操作的接口：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDataStrategy\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e定义 2 张表的查询 struct，并实现 DataStrategy 接口：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// table1 通过 table1 来查询\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etable1\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etable1\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;table1 query\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// table2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etable2\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etable2\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;table2 query\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e再定义 Data 对象用来执行不同的策略：\u003c/p\u003e","title":"Go 设计模式 - 策略模式"},{"content":"前言 前段时间看到了一个提案，是关于 go for 循环的一个提案，根据提案看到了去年 rsc 在社区发出的讨论，讨论的内容主要是为了解决 for 循环变量的问题，是什么样的问题呢，常见的例子如下：\nvar all []*Item for _, item := range items { all = append(all, \u0026amp;item) } 这段代码有一个问题，循环结束后，all 的内容是包含了 len(all) 个相同的指针，指针指向迭代的最后一个 item。为什么会发生这种情况呢，因为 item 变量是每个循环的而不是每次迭代的，\u0026amp;item 每次迭代都是相同的，并且每次迭代都会被覆盖。 怎么解决呢，最简单的方法就是添加 item := item 这段代码：\nvar all []*Item for _, item := range items { item := item all = append(all, \u0026amp;item) } 我在使用 Goroutine 协程时也经常遇到这种问题。这种错误已导致许多公司出现生产问题，包括 Lets Encrypt 公开记录的问题。\ngo 社区为了解决这个问题，打算将循环变量改为每次迭代，即隐式的添加上面的代码。由于其它一些原因，直到今年的 6 月才正式决定在 go 1.21 中添加 GOEXPERIMENT=loopvar 进行相应的尝试，并且将在 go1.22 版本中正式推出。 为了确保与现有代码的向后兼容性，新语义将仅适用于声明 go 1.22 或稍后在其 go.mod 文件中声明的模块中包含的包。\n特性测试 我们通过不同版本运行的结果来对比\npackage main import \u0026#34;fmt\u0026#34; func main() { var prints []func() for _, v := range []int{1, 2, 3} { prints = append(prints, func() { fmt.Println(v) }) } for _, print := range prints { print() } } 没使用旧版本运行的结果是：\n3 3 3 使用 gotip 运行的结果如下：\n1 2 3 参考 https://github.com/golang/go/issues/20733 https://github.com/golang/go/discussions/56010 https://github.com/golang/go/issues/60078 https://tonybai.com/2023/08/20/some-changes-in-go-1-21/ https://github.com/golang/go/wiki/LoopvarExperiment https://go.googlesource.com/proposal/+/master/design/60078-loopvar.md https://bugzilla.mozilla.org/show_bug.cgi?id=1619047 ","permalink":"https://jasminides.com/posts/go1.22-%E6%96%B0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E4%B9%89/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e前段时间看到了一个提案，是关于 go for 循环的一个提案，根据提案看到了去年 rsc 在社区发出的讨论，讨论的内容主要是为了解决 for 循环变量的问题，是什么样的问题呢，常见的例子如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e []\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eItem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitems\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这段代码有一个问题，循环结束后，all 的内容是包含了 len(all) 个相同的指针，指针指向迭代的最后一个 item。为什么会发生这种情况呢，因为 item 变量是每个循环的而不是每次迭代的，\u0026amp;item 每次迭代都是相同的，并且每次迭代都会被覆盖。\n怎么解决呢，最简单的方法就是添加 \u003ccode\u003eitem := item\u003c/code\u003e 这段代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e []\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eItem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitems\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我在使用 Goroutine 协程时也经常遇到这种问题。这种错误已导致许多公司出现生产问题，包括 Lets Encrypt 公开记录的问题。\u003c/p\u003e\n\u003cp\u003ego 社区为了解决这个问题，打算将循环变量改为每次迭代，即隐式的添加上面的代码。由于其它一些原因，直到今年的 6 月才正式决定在 go 1.21 中添加 GOEXPERIMENT=loopvar 进行相应的尝试，并且将在 go1.22 版本中正式推出。\n为了确保与现有代码的向后兼容性，新语义将仅适用于声明 go 1.22 或稍后在其 go.mod 文件中声明的模块中包含的包。\u003c/p\u003e\n\u003ch2 id=\"特性测试\"\u003e特性测试\u003c/h2\u003e\n\u003cp\u003e我们通过不同版本运行的结果来对比\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprints\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e} {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprints\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eprints\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e) })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprints\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tprint()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e没使用旧版本运行的结果是：\u003c/p\u003e","title":"Go1.22 新循环语义"},{"content":"最近需要使用 apisix 来代理 gRPC 服务，本文记录一下 apisix 代理 gRPC 服务以及实践过程中遇到的一些问题。\n准备 在接下来的步骤前，我们需要准备一个 gRPC 服务，我们使用 kratos 简单启动一个 gRPC 服务：\n$ kratos new hellowrold $ cd helloworld $ kratos run 一个简单的 gRPC 服务就启动了，我们先直接请求 gRPC 服务看看，通过 postman 请求接口后，接口顺利返回相应的值。\n接下来我们开始本篇的主要内容：apisix 代理服务。\napisix 代理 gRPC 服务 我们使用 apisix admin 接口创建 Route: upstream 的 scheme 指定为 grpc 或 grpcs,nodes 指定需要代理的服务地址。\ncurl http://127.0.0.1:9180/apisix/admin/routes/1 -H \u0026#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\u0026#39; -X PUT -d \u0026#39; { \u0026#34;methods\u0026#34;: [\u0026#34;POST\u0026#34;, \u0026#34;GET\u0026#34;], \u0026#34;uri\u0026#34;: \u0026#34;/helloworld.v1.Greeter/SayHello\u0026#34;, \u0026#34;upstream\u0026#34;: { \u0026#34;scheme\u0026#34;: \u0026#34;grpc\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;, \u0026#34;nodes\u0026#34;: { \u0026#34;127.0.0.1:9001\u0026#34;: 1 } } }\u0026#39; 我们再通过 postman 请求代理后的服务，发现请求错误，错误信息如下：Received RST_STREAM with code 2 triggered by internal client error: Protocol error,根据错误信息得知是协议不兼容的原因，apisix 没有开启 HTTP2 支持，我们尝试另外一种方法来添加代理。\n我们修改 apisix 的配置文件：\napisix: node_listen: - port: 9080 enable_http2: false - port: 9081 enable_http2: true 修改后再次请求接口，gRPC 正确响应返回。\n如果你的 gRPC 服务使用了自己的 TLS 加密，即所谓的 gPRCS (gRPC + TLS)，那么需要修改 scheme 为 grpcs，并可能需要配置相应的证书。\n参考 https://github.com/apache/apisix https://learning.postman.com/docs/sending-requests/grpc/grpc-request-interface/ https://blog.postman.com/postman-now-supports-grpc/ ","permalink":"https://jasminides.com/posts/apisix-%E4%BB%A3%E7%90%86-grpc-%E6%9C%8D%E5%8A%A1/","summary":"\u003cp\u003e最近需要使用 apisix 来代理 gRPC 服务，本文记录一下 apisix 代理 gRPC 服务以及实践过程中遇到的一些问题。\u003c/p\u003e\n\u003ch2 id=\"准备\"\u003e准备\u003c/h2\u003e\n\u003cp\u003e在接下来的步骤前，我们需要准备一个 gRPC 服务，我们使用 kratos 简单启动一个 gRPC 服务：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ kratos new hellowrold\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd helloworld\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ kratos run\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个简单的 gRPC 服务就启动了，我们先直接请求 gRPC 服务看看，通过 postman 请求接口后，接口顺利返回相应的值。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/gRPC%e4%bb%a3%e7%90%86/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e接下来我们开始本篇的主要内容：apisix 代理服务。\u003c/p\u003e\n\u003ch2 id=\"apisix-代理-grpc-服务\"\u003eapisix 代理 gRPC 服务\u003c/h2\u003e\n\u003cp\u003e我们使用 apisix admin 接口创建 Route:  upstream 的 scheme 指定为 grpc 或 grpcs,nodes 指定需要代理的服务地址。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl http://127.0.0.1:9180/apisix/admin/routes/1 -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\u0026#39;\u003c/span\u003e -X PUT -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;methods\u0026#34;: [\u0026#34;POST\u0026#34;, \u0026#34;GET\u0026#34;],\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;uri\u0026#34;: \u0026#34;/helloworld.v1.Greeter/SayHello\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;upstream\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;scheme\u0026#34;: \u0026#34;grpc\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;nodes\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e            \u0026#34;127.0.0.1:9001\u0026#34;: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/gRPC%e4%bb%a3%e7%90%86/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"apisix 代理 gRPC 服务"},{"content":"前言 在 7 月份 go 团队正式推出了官方的漏洞检测工具 - govulncheck, govulncheck 默认向 https://vuln.go.dev/ 漏洞数据库请求，对数据库的请求不包含代码只有使用的包，你也可以使用 -db 来指导所使用的漏洞数据库，所使用的数据库必须实现相应的规范。\ngovulncheck 具有以下限制：\nGovulncheck 在分析函数指针和接口调用时采用保守的方法，这可能导致一些情况下的误报或不准确的调用堆栈。 使用 reflect 进行的函数调用对于静态分析是不可见的。仅通过这些调用才能访问的易受攻击的代码将不会被报告。使用 unsafe 包可能导致漏报。 由于 Go 二进制文件不包含详细的调用信息，govulncheck 无法显示检测到的漏洞的调用图。对于二进制文件中但无法访问的代码，它可能还会报告误报。 目前还不支持 silencing 漏洞发现。请参阅 https://go.dev/issue/61211。 Govulncheck 只能读取使用 Go 1.18 及更高版本编译的二进制文件。 对于无法提取符号信息的二进制文件，govulncheck 会报告二进制文件所依赖的所有模块的漏洞。 govulncheck 架构图\ngovulncheck 还提供了一个可用的 API govulncheck，使开发者能够方便的将 govulncheck 集成到各种工具之中。\n安装 通过以下命令安装 govulncheck:\ngo install golang.org/x/vuln/cmd/govulncheck@latest 使用 安装完 govulncheck 后，我们就可以使用了，进入项目路径中，执行 govulncheck ./... 。\n以下是我的一个项目的输出：\nScanning your code and 508 packages across 71 dependent modules for known vulnerabilities... Vulnerability #1: GO-2023-2102 HTTP/2 rapid reset can cause excessive work in net/http More info: https://pkg.go.dev/vuln/GO-2023-2102 Standard library Found in: net/http@go1.21 Fixed in: net/http@go1.21.3 Example traces found: #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls http.Server.Serve #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls http.Server.ServeTLS Vulnerability #2: GO-2023-2043 Improper handling of special tags within script contexts in html/template More info: https://pkg.go.dev/vuln/GO-2023-2043 Standard library Found in: html/template@go1.21 Fixed in: html/template@go1.21.1 Example traces found: #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.Execute #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.ExecuteTemplate Vulnerability #3: GO-2023-2041 Improper handling of HTML-like comments in script contexts in html/template More info: https://pkg.go.dev/vuln/GO-2023-2041 Standard library Found in: html/template@go1.21 Fixed in: html/template@go1.21.1 Example traces found: #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.Execute #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.ExecuteTemplate === Informational === Found 3 vulnerabilities in packages that you import, but there are no call stacks leading to the use of these vulnerabilities. You may not need to take any action. See https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck for details. Vulnerability #1: GO-2023-2045 Memory exhaustion in QUIC connection handling in crypto/tls More info: https://pkg.go.dev/vuln/GO-2023-2045 Standard library Found in: crypto/tls@go1.21 Fixed in: crypto/tls@go1.21.1 Vulnerability #2: GO-2023-2044 Panic when processing post-handshake message on QUIC connections in crypto/tls More info: https://pkg.go.dev/vuln/GO-2023-2044 Standard library Found in: crypto/tls@go1.21 Fixed in: crypto/tls@go1.21.1 Vulnerability #3: GO-2023-1988 Improper rendering of text nodes in golang.org/x/net/html More info: https://pkg.go.dev/vuln/GO-2023-1988 Module: golang.org/x/net Found in: golang.org/x/net@v0.9.0 Fixed in: golang.org/x/net@v0.13.0 Your code is affected by 3 vulnerabilities from the Go standard library. Share feedback at https://go.dev/s/govulncheck-feedback. 输出内容分为 2 块，第一块是 Vulnerability 信息，是项目中存在的漏洞，可以看到发现了 3 个漏洞及具体的原因、触发函数、发现的版本和修复的版本。第二块是 Informational 是一些没有直接引用的包中存在的安全漏洞。\n根据漏洞所在的宿主不同，第一部分的信息也可以分为两类：一类是 Go 语言自身 (包括 Go 编译器、Go 运行时和 Go 标准库等) 引入的漏洞，另外一类则是第三方包 (包括直接依赖的以及间接依赖的) 引入的漏洞。\n针对这两类漏洞，我们的解决方法有所不同。\n第一类漏洞的解决方法十分简单，直接升级 Go 版本即可，比如这里我将我的 Go 版本从 Go 1.18 升级到最新的 Go 1.18.6 即可消除上面的所有第一类漏洞。对于第三方包这种情况，如果是直接使用的，可以直接升级到相应版本，如果是间接引用的我们要根据直接引用的包的修复情况来决定。\n小结 本文介绍了 go 官方团队新推出的安全漏洞检查工具 govulncheck，通过使用这个工具我们能够轻松的检查出 go 代码中存在的漏洞。\n参考 https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck https://go.dev/blog/govulncheck https://go.dev/blog/vuln https://go.dev/security/best-practices https://github.com/golang/go/issues/61211 https://go.dev/security/vuln/editor https://go.dev/doc/tutorial/govulncheck https://pkg.go.dev/golang.org/x/vuln/scan ","permalink":"https://jasminides.com/posts/go-%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-govulncheck/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在 7 月份 go 团队正式推出了官方的漏洞检测工具 - govulncheck, govulncheck 默认向 \u003ca href=\"https://vuln.go.dev/\"\u003ehttps://vuln.go.dev/\u003c/a\u003e 漏洞数据库请求，对数据库的请求不包含代码只有使用的包，你也可以使用 \u003ccode\u003e-db\u003c/code\u003e 来指导所使用的漏洞数据库，所使用的数据库必须实现相应的规范。\u003c/p\u003e\n\u003cp\u003egovulncheck 具有以下限制：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGovulncheck 在分析函数指针和接口调用时采用保守的方法，这可能导致一些情况下的误报或不准确的调用堆栈。\u003c/li\u003e\n\u003cli\u003e使用 reflect 进行的函数调用对于静态分析是不可见的。仅通过这些调用才能访问的易受攻击的代码将不会被报告。使用 unsafe 包可能导致漏报。\u003c/li\u003e\n\u003cli\u003e由于 Go 二进制文件不包含详细的调用信息，govulncheck 无法显示检测到的漏洞的调用图。对于二进制文件中但无法访问的代码，它可能还会报告误报。\u003c/li\u003e\n\u003cli\u003e目前还不支持 silencing 漏洞发现。请参阅 \u003ca href=\"https://go.dev/issue/61211\"\u003ehttps://go.dev/issue/61211\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003eGovulncheck 只能读取使用 Go 1.18 及更高版本编译的二进制文件。\u003c/li\u003e\n\u003cli\u003e对于无法提取符号信息的二进制文件，govulncheck 会报告二进制文件所依赖的所有模块的漏洞。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003egovulncheck 架构图\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/govulncheck/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003egovulncheck 还提供了一个可用的 API govulncheck，使开发者能够方便的将 govulncheck 集成到各种工具之中。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e通过以下命令安装 govulncheck:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install golang.org/x/vuln/cmd/govulncheck@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e安装完 govulncheck 后，我们就可以使用了，进入项目路径中，执行 \u003ccode\u003egovulncheck ./...\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e以下是我的一个项目的输出：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eScanning your code and 508 packages across 71 dependent modules for known vulnerabilities...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #1: GO-2023-2102\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    HTTP/2 rapid reset can cause excessive work in net/http\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-2102\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Standard library\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: net/http@go1.21\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: net/http@go1.21.3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Example traces found:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls http.Server.Serve\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls http.Server.ServeTLS\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #2: GO-2023-2043\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Improper handling of special tags within script contexts in html/template\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-2043\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Standard library\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: html/template@go1.21\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: html/template@go1.21.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Example traces found:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.Execute\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.ExecuteTemplate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #3: GO-2023-2041\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Improper handling of HTML-like comments in script contexts in html/template\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-2041\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Standard library\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: html/template@go1.21\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: html/template@go1.21.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Example traces found:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #1: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.Execute\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      #2: cmd\\xxx\\main.go:94:19: xxx.main calls kratos.App.Run, which eventually calls template.Template.ExecuteTemplate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e=== Informational ===\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eFound 3 vulnerabilities in packages that you import, but there are no call\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estacks leading to the use of these vulnerabilities. You may not need to\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etake any action. See https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efor details.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #1: GO-2023-2045\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Memory exhaustion in QUIC connection handling in crypto/tls\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-2045\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Standard library\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: crypto/tls@go1.21\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: crypto/tls@go1.21.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #2: GO-2023-2044\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Panic when processing post-handshake message on QUIC connections in\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    crypto/tls\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-2044\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Standard library\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: crypto/tls@go1.21\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: crypto/tls@go1.21.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eVulnerability #3: GO-2023-1988\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Improper rendering of text nodes in golang.org/x/net/html\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  More info: https://pkg.go.dev/vuln/GO-2023-1988\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Module: golang.org/x/net\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Found in: golang.org/x/net@v0.9.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Fixed in: golang.org/x/net@v0.13.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eYour code is affected by 3 vulnerabilities from the Go standard library.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eShare feedback at https://go.dev/s/govulncheck-feedback.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出内容分为 2 块，第一块是 Vulnerability 信息，是项目中存在的漏洞，可以看到发现了 3 个漏洞及具体的原因、触发函数、发现的版本和修复的版本。第二块是 Informational 是一些没有直接引用的包中存在的安全漏洞。\u003c/p\u003e","title":"Go 漏洞管理工具 govulncheck"},{"content":"最近在实现一个功能时需要使用第三方的接口，由于第三方只提供了一个 WSDL 文件的链接，于是研究了 golang 如何解析 WSDL 并调用相应接口，本文就是介绍 WSDL 和 go 如何解析并调用。\nWSDL 介绍 WSDL 是 Web Services Description Language（Web 服务描述语言）的缩写。它是一种用于描述基于 Web 服务的通信协议和消息格式的 XML 格式语言。\nWSDL 被广泛用于描述 Web 服务的接口和操作。它定义了 Web 服务所提供的功能、方法、参数、数据类型以及与服务进行交互的方式。通过 WSDL 文件，客户端应用程序可以了解如何与特定的 Web 服务进行通信。\nWSDL 文件通常包含以下几个主要部分：\n服务定义：描述了 Web 服务的名称、命名空间和位置。 类型定义：定义了 Web 服务中使用的数据类型，例如字符串、整数等。 消息定义：定义了 Web 服务中使用的消息格式，包括输入和输出消息。 操作定义：定义了 Web 服务的操作或方法，包括输入和输出消息以及相关的参数。 绑定定义：定义了 Web 服务使用的通信协议和消息格式，例如 SOAP（Simple Object Access Protocol）和 HTTP（Hypertext Transfer Protocol）。 服务定义：将服务、绑定和端口等部分组合在一起，定义了 Web 服务的完整描述。 使用 WSDL，开发人员可以生成客户端代码，使其能够与 Web 服务进行交互。客户端可以根据 WSDL 文件了解 Web 服务的结构和可用方法，以便正确地构造请求和解析响应。\n总之，WSDL 是一种用于描述 Web 服务接口和操作的语言，它提供了一种标准化的方式来描述和访问 Web 服务。\ngowsdl go 语言如何解析 wsdl 呢，我们使用 gowsdl 来解析 wsdl ,生成相应的 golang 代码。\n安装 go install github.com/hooklift/gowsdl/cmd/gowsdl@latest 生成代码 使用命令 gowsdl -o myservice.go http://www.example.com/myservice?wsdl 生成代码。如果网络情况不好，我们也可以将 WSDL 文件下载下来解析 gowsdl -o xx.go a.xml。\n解析完毕会生成相应的客户端文件，我们只要通过生成的客户端链接服务即可执行相应的方法。\ncode:\npackage main import ( \u0026#34;adx/myservice\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/hooklift/gowsdl/soap\u0026#34; \u0026#34;golang.org/x/oauth2\u0026#34; \u0026#34;log\u0026#34; ) func main() { client := soap.NewClient(\u0026#34;https://ads.xxx?wsdl\u0026#34;, soap.WithHTTPHeaders(map[string]string{ \u0026#34;Authorization\u0026#34;: fmt.Sprintf(\u0026#34;Bearer %s\u0026#34;, xxxx), })) service := myservice.NewxxServiceInterface(client) ReportableType := myservice.xx type_ := myservice.xx reply, err := service.xx(\u0026amp;myservice.xx{ Keys: []*myservice.xx{{ Name: \u0026#34;test111\u0026#34;, DisplayName: \u0026#34;test111\u0026#34;, Type_: \u0026amp;type_, ReportableType: \u0026amp;ReportableType, }}, }) if err != nil { log.Fatal(err) return } log.Println(reply) } 小结 在对 soap 库的简单尝试后，发现了一些问题：\n1 生成的 go 代码会有问题，会出现结构体中存在相同名称字段的问题 2 生成的方法字段不够规范\n相比其它语言原生内置的 wsdl 解析库，go 语言目前能够满足需求的库并不多，所以不推荐使用 go 解析 wsdl.\n参考 https://github.com/hooklift/gowsdl ","permalink":"https://jasminides.com/posts/go-wsdl/","summary":"\u003cp\u003e最近在实现一个功能时需要使用第三方的接口，由于第三方只提供了一个 WSDL 文件的链接，于是研究了 golang 如何解析 WSDL 并调用相应接口，本文就是介绍 WSDL 和 go 如何解析并调用。\u003c/p\u003e\n\u003ch2 id=\"wsdl-介绍\"\u003eWSDL 介绍\u003c/h2\u003e\n\u003cp\u003eWSDL 是 Web Services Description Language（Web 服务描述语言）的缩写。它是一种用于描述基于 Web 服务的通信协议和消息格式的 XML 格式语言。\u003c/p\u003e\n\u003cp\u003eWSDL 被广泛用于描述 Web 服务的接口和操作。它定义了 Web 服务所提供的功能、方法、参数、数据类型以及与服务进行交互的方式。通过 WSDL 文件，客户端应用程序可以了解如何与特定的 Web 服务进行通信。\u003c/p\u003e\n\u003cp\u003eWSDL 文件通常包含以下几个主要部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务定义：描述了 Web 服务的名称、命名空间和位置。\u003c/li\u003e\n\u003cli\u003e类型定义：定义了 Web 服务中使用的数据类型，例如字符串、整数等。\u003c/li\u003e\n\u003cli\u003e消息定义：定义了 Web 服务中使用的消息格式，包括输入和输出消息。\u003c/li\u003e\n\u003cli\u003e操作定义：定义了 Web 服务的操作或方法，包括输入和输出消息以及相关的参数。\u003c/li\u003e\n\u003cli\u003e绑定定义：定义了 Web 服务使用的通信协议和消息格式，例如 SOAP（Simple Object Access Protocol）和 HTTP（Hypertext Transfer\nProtocol）。\u003c/li\u003e\n\u003cli\u003e服务定义：将服务、绑定和端口等部分组合在一起，定义了 Web 服务的完整描述。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用 WSDL，开发人员可以生成客户端代码，使其能够与 Web 服务进行交互。客户端可以根据 WSDL 文件了解 Web 服务的结构和可用方法，以便正确地构造请求和解析响应。\u003c/p\u003e\n\u003cp\u003e总之，WSDL 是一种用于描述 Web 服务接口和操作的语言，它提供了一种标准化的方式来描述和访问 Web 服务。\u003c/p\u003e","title":"Go WSDL"},{"content":"问题 最近在调用一个上传文件的接口时，发现接口调用响应状态码为 413，并且控制台显示跨域错误信息。查找了相关信息，得知 413 状态码表示请求的包体过大导致的。\n出现这种情况，我想到了 2 种解决方案：1) 调整上传文件的方式 2) 调整网关的参数。\n综合目前的现况，采取了第二种方式调整网关客户端请求体最大值的参数。\n解决 通过查阅 nginx ingress 的文档，得知可以添加 nginx.ingress.kubernetes.io/proxy-body-size 注解来设置请求体的最大值，设置 nginx.ingress.kubernetes.io/proxy-body-size 值为合适的值后，再请求接口发现接口顺利响应。\n小结 本文介绍了客户端请求接口时，由于 nginx 默认 proxy-body-size 参数太小，导致请求 413 的问题及相应的解决方案。\n参考 https://opendocs.alipay.com/support/01rb44 https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#custom-max-body-size ","permalink":"https://jasminides.com/posts/nginx-ingress-http-%E8%AF%B7%E6%B1%82-413-%E7%8A%B6%E6%80%81%E7%A0%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在调用一个上传文件的接口时，发现接口调用响应状态码为 413，并且控制台显示跨域错误信息。查找了相关信息，得知 413 状态码表示请求的包体过大导致的。\u003c/p\u003e\n\u003cp\u003e出现这种情况，我想到了 2 种解决方案：1) 调整上传文件的方式 2) 调整网关的参数。\u003c/p\u003e\n\u003cp\u003e综合目前的现况，采取了第二种方式调整网关客户端请求体最大值的参数。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e通过查阅 nginx ingress 的文档，得知可以添加 \u003ccode\u003enginx.ingress.kubernetes.io/proxy-body-size\u003c/code\u003e 注解来设置请求体的最大值，设置 \u003ccode\u003enginx.ingress.kubernetes.io/proxy-body-size\u003c/code\u003e 值为合适的值后，再请求接口发现接口顺利响应。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/proxy_body_size/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文介绍了客户端请求接口时，由于 nginx 默认 proxy-body-size 参数太小，导致请求 413 的问题及相应的解决方案。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://opendocs.alipay.com/support/01rb44\"\u003ehttps://opendocs.alipay.com/support/01rb44\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size\"\u003ehttps://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#custom-max-body-size\"\u003ehttps://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#custom-max-body-size\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Nginx Ingress http 请求 413 状态码问题及解决方法"},{"content":"以前的文章介绍了 chromedp 进行浏览器网页截图，这次介绍一种新的网页截图的方法——即使用 playwright 进行浏览器网页截图。\nplaywright 介绍 Playwright 是一个用于自动化浏览器操作的开源工具集。它由微软开发并于 2020 年发布，旨在提供一种跨浏览器、跨平台的解决方案，可用于测试 Web 应用程序、编写爬虫、执行自动化任务等。\nPlaywright 支持多种主流浏览器，包括 Chrome、Firefox、Safari 和 Edge，它提供了一组简单易用的 API，可以模拟用户与 Web 页面的交互行为，例如点击、填写表单、导航等。与其他类似工具相比，Playwright 的一个重要特点是它的跨浏览器支持，这意味着你可以使用相同的代码在不同浏览器上运行你的自动化任务，而不需要为每个浏览器单独编写代码。\nPlaywright 还提供了强大的调试功能，可以帮助开发人员在自动化过程中定位和解决问题。它支持截图和录制操作，使得调试变得更加直观和高效。\n另外，Playwright 还具有一些高级功能，例如可以模拟不同的设备、网络环境和地理位置，以及支持并发执行多个浏览器实例等，这些功能使得它在编写复杂的自动化任务时非常有用。\n由于我日常主要使用 go 语言进行开发，所以本文的内容主要以 playwright 的 go 模块 playwright-go 为主要介绍。\n安装 go get -u github.com/playwright-community/playwright-go 安装相关浏览器和操作系统依赖项：\ngo run github.com/playwright-community/playwright-go/cmd/playwright@latest install --with-deps # Or go install github.com/playwright-community/playwright-go/cmd/playwright@latest playwright install --with-deps 也可以在代码中使用以下代码安装：err := playwright.Install()\n通过安装截图可以看出安装了 3 大主流浏览器和 ffmpeg。\n例子 接下来我们看一个官方的例子，从 Hacker News 中抓取当前投票最高的项目。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/playwright-community/playwright-go\u0026#34; ) func main() { pw, err := playwright.Run() if err != nil { log.Fatalf(\u0026#34;could not start playwright: %v\u0026#34;, err) } browser, err := pw.Chromium.Launch() if err != nil { log.Fatalf(\u0026#34;could not launch browser: %v\u0026#34;, err) } page, err := browser.NewPage() if err != nil { log.Fatalf(\u0026#34;could not create page: %v\u0026#34;, err) } if _, err = page.Goto(\u0026#34;https://news.ycombinator.com\u0026#34;); err != nil { log.Fatalf(\u0026#34;could not goto: %v\u0026#34;, err) } entries, err := page.Locator(\u0026#34;.athing\u0026#34;).All() if err != nil { log.Fatalf(\u0026#34;could not get entries: %v\u0026#34;, err) } for i, entry := range entries { title, err := entry.Locator(\u0026#34;td.title \u0026gt; span \u0026gt; a\u0026#34;).TextContent() if err != nil { log.Fatalf(\u0026#34;could not get text content: %v\u0026#34;, err) } fmt.Printf(\u0026#34;%d: %s\\n\u0026#34;, i+1, title) } if err = browser.Close(); err != nil { log.Fatalf(\u0026#34;could not close browser: %v\u0026#34;, err) } if err = pw.Stop(); err != nil { log.Fatalf(\u0026#34;could not stop Playwright: %v\u0026#34;, err) } } 运行代码后，输出： 可以看到当前排名最高的 30 个项目成功输出了。\n接下来介绍如何进行网页截图。\n截取网站地图页面的截图 接下来我们根据 overstarry.vip 的网站地图获取每个页面的截图。\npackage main import ( \u0026#34;encoding/xml\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/playwright-community/playwright-go\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; ) type Urlset struct { XMLName xml.Name `xml:\u0026#34;urlset\u0026#34;` Xmlns string `xml:\u0026#34;xmlns,attr\u0026#34;` Urls []Url `xml:\u0026#34;url\u0026#34;` } type Url struct { Loc string `xml:\u0026#34;loc\u0026#34;` Lastmod string `xml:\u0026#34;lastmod\u0026#34;` } func main() { sites := formatSiteXml(\u0026#34;https://overstarry.vip/sitemap.xml\u0026#34;) pw, err := playwright.Run() if err != nil { log.Fatalf(\u0026#34;could not launch playwright: %v\u0026#34;, err) } browser, err := pw.Chromium.Launch() if err != nil { log.Fatalf(\u0026#34;could not launch Chromium: %v\u0026#34;, err) } page, err := browser.NewPage() if err != nil { log.Fatalf(\u0026#34;could not create page: %v\u0026#34;, err) } for _, site := range sites { if _, err = page.Goto(site, playwright.PageGotoOptions{ WaitUntil: playwright.WaitUntilStateDomcontentloaded, }); err != nil { log.Fatalf(\u0026#34;could not goto: %v\u0026#34;, err) } if _, err = page.Screenshot(playwright.PageScreenshotOptions{ Path: playwright.String(fmt.Sprintf(\u0026#34;./img/%d.png\u0026#34;, time.Now().Unix())), }); err != nil { log.Fatalf(\u0026#34;could not create screenshot: %v\u0026#34;, err) } } if err = browser.Close(); err != nil { log.Fatalf(\u0026#34;could not close browser: %v\u0026#34;, err) } if err = pw.Stop(); err != nil { log.Fatalf(\u0026#34;could not stop Playwright: %v\u0026#34;, err) } } func formatSiteXml(sitemapURL string) []string { resp, err := http.Get(sitemapURL) if err != nil { log.Fatal(err) } defer resp.Body.Close() bytes, err := io.ReadAll(resp.Body) if err != nil { log.Fatal(err) } var urlset Urlset err = xml.Unmarshal(bytes, \u0026amp;urlset) if err != nil { log.Fatal(err) } urls := make([]string, 0) for _, url := range urlset.Urls { urls = append(urls, url.Loc) } return urls } 这段代码主要是先获取本站的所有页面，然后对每个页面进行截图。代码运行完，查看截图时发现截图的大小不是完整的页面内容，只有部分可视大小，查看源码发现需要设置 FullPage 参数，才能截取完整页面。\n参考 https://github.com/playwright-community/playwright-go https://github.com/playwright-community/playwright-go/issues/122 https://github.com/microsoft/playwright https://playwright.dev/docs/intro https://overstarry.vip/posts/go%E8%BF%9B%E8%A1%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/ ","permalink":"https://jasminides.com/posts/playwright-go-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE/","summary":"\u003cp\u003e以前的文章介绍了 chromedp 进行浏览器网页截图，这次介绍一种新的网页截图的方法——即使用 playwright 进行浏览器网页截图。\u003c/p\u003e\n\u003ch2 id=\"playwright-介绍\"\u003eplaywright 介绍\u003c/h2\u003e\n\u003cp\u003ePlaywright 是一个用于自动化浏览器操作的开源工具集。它由微软开发并于 2020 年发布，旨在提供一种跨浏览器、跨平台的解决方案，可用于测试 Web 应用程序、编写爬虫、执行自动化任务等。\u003c/p\u003e\n\u003cp\u003ePlaywright 支持多种主流浏览器，包括 Chrome、Firefox、Safari 和 Edge，它提供了一组简单易用的 API，可以模拟用户与 Web 页面的交互行为，例如点击、填写表单、导航等。与其他类似工具相比，Playwright 的一个重要特点是它的跨浏览器支持，这意味着你可以使用相同的代码在不同浏览器上运行你的自动化任务，而不需要为每个浏览器单独编写代码。\u003c/p\u003e\n\u003cp\u003ePlaywright 还提供了强大的调试功能，可以帮助开发人员在自动化过程中定位和解决问题。它支持截图和录制操作，使得调试变得更加直观和高效。\u003c/p\u003e\n\u003cp\u003e另外，Playwright 还具有一些高级功能，例如可以模拟不同的设备、网络环境和地理位置，以及支持并发执行多个浏览器实例等，这些功能使得它在编写复杂的自动化任务时非常有用。\u003c/p\u003e\n\u003cp\u003e由于我日常主要使用 go 语言进行开发，所以本文的内容主要以  playwright 的 go 模块 playwright-go 为主要介绍。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get -u github.com/playwright-community/playwright-go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装相关浏览器和操作系统依赖项：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego run github.com/playwright-community/playwright-go/cmd/playwright@latest install --with-deps\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Or\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install github.com/playwright-community/playwright-go/cmd/playwright@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplaywright install --with-deps\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以在代码中使用以下代码安装：\u003ccode\u003eerr := playwright.Install()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/playwright/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e通过安装截图可以看出安装了 3 大主流浏览器和 ffmpeg。\u003c/p\u003e\n\u003ch2 id=\"例子\"\u003e例子\u003c/h2\u003e\n\u003cp\u003e接下来我们看一个官方的例子，从 Hacker News 中抓取当前投票最高的项目。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/playwright-community/playwright-go\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epw\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplaywright\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not start playwright: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChromium\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLaunch\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not launch browser: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewPage\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not create page: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGoto\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://news.ycombinator.com\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not goto: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eentries\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLocator\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.athing\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eAll\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not get entries: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eentry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentries\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLocator\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;td.title \u0026gt; span \u0026gt; a\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eTextContent\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not get text content: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d: %s\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not close browser: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStop\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;could not stop Playwright: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/playwright/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"playwright-go 浏览器截图"},{"content":"问题 最近需要使用 Google Api Go Client 获取 Google Adsense 的数据，由于常规 generate 接口返回的数据是有 10w 行的限制，不满足目前的使用需要，于是使用了 csv 的生成方法 generateCsv，和 generate 相比 generateCsv 能返回更多的数据并且不需要改动太多参数。\n在调用 generateCsv 接口时，发现接口不能返回正确数据，提示错误，错误信息如下：\npanic: invalid character \u0026#39;D\u0026#39; looking for beginning of value 根据错误信息可以得知错误应该是解析错误，通过方法接口和源代码看出，接口返回的是 csv 类型的数据，但 api 只针对 json 进行解析，没有判断数据类型，导致解析失败。\n解决 找到问题后，我立即就想到一个方法，就是在 decode 代码里添加 csv 格式的判断，尝试了一下，由于对 csv 解析方法不熟悉，并且修改 Client 代码会导致模块更新不方便 (客户端代码都是生成的，于是决定另寻它法。 通过寻找各种资料 issue 后，找到了一个可能可行的方法，就是创建手动创建 http 连接发送请求。 根据相应的文档，很快就写好了相应的代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/oauth2\u0026#34; \u0026#34;golang.org/x/oauth2/google\u0026#34; \u0026#34;google.golang.org/api/adsense/v2\u0026#34; \u0026#34;google.golang.org/api/option\u0026#34; \u0026#34;google.golang.org/api/transport/http\u0026#34; \u0026#34;io\u0026#34; \u0026#34;net/url\u0026#34; ) func main() { ctx := context.Background() var config = \u0026amp;oauth2.Config{ ClientID: \u0026#34;xxx.apps.googleusercontent.com\u0026#34;, // from https://console.developers.google.com/project/\u0026lt;your-project-id\u0026gt;/apiui/credential ClientSecret: \u0026#34;GOCSPX-xxxxxx\u0026#34;, // from https://console.developers.google.com/project/\u0026lt;your-project-id\u0026gt;/apiui/credential Endpoint: google.Endpoint, Scopes: []string{adsense.AdsenseReadonlyScope}, RedirectURL: \u0026#34;https://developers.google.com\u0026#34;, } //token := newOAuthClient(ctx, config) client, _, err := http.NewClient(ctx, option.WithTokenSource(config.TokenSource(ctx, \u0026amp;oauth2.Token{RefreshToken: \u0026#34;code\u0026#34;}))) if err != nil { return } URL, err := url.Parse(fmt.Sprintf(\u0026#34;https://adsense.googleapis.com/v2/accounts/pub-123123/reports:generateCsv\u0026#34;)) if err != nil { return } query := URL.Query() query.Set(\u0026#34;dateRange\u0026#34;, \u0026#34;YESTERDAY\u0026#34;) query.Set(\u0026#34;dimensions\u0026#34;, \u0026#34;URL_CHANNEL_NAME\u0026#34;) query.Set(\u0026#34;metrics\u0026#34;, \u0026#34;PAGE_VIEWS\u0026#34;) URL.RawQuery = query.Encode() resp, err := client.Get(URL.String()) if err != nil { return } defer resp.Body.Close() all, err := io.ReadAll(resp.Body) if err != nil { return } fmt.Println(string(all)) } 主要逻辑就是创建到 google cloud service 的连接，调用 generateCsv 接口即可。\n小结 本文讲述了使用 google api go client 调用 AdSense 接口遇到的问题及解决方法。\n参考 https://developers.google.com/adsense/management/reference/rest/v2/accounts.reports/generateCsv https://pkg.go.dev/google.golang.org/api@v0.138.0/transport/http#NewClient https://github.com/googleapis/google-api-go-client/issues/2125 ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-google-api-go-client-%E8%B0%83%E7%94%A8-google-adsense-%E6%8A%A5%E5%91%8A%E6%8E%A5%E5%8F%A3%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近需要使用 Google Api Go Client 获取 Google Adsense 的数据，由于常规 generate 接口返回的数据是有 10w 行的限制，不满足目前的使用需要，于是使用了\ncsv 的生成方法 generateCsv，和 generate 相比 generateCsv 能返回更多的数据并且不需要改动太多参数。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/AdSense%e9%94%99%e8%af%af/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e在调用 generateCsv 接口时，发现接口不能返回正确数据，提示错误，错误信息如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epanic: invalid character \u0026#39;D\u0026#39; looking for beginning of value\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据错误信息可以得知错误应该是解析错误，通过方法接口和源代码看出，接口返回的是 csv 类型的数据，但 api 只针对 json 进行解析，没有判断数据类型，导致解析失败。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/AdSense%e9%94%99%e8%af%af/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e找到问题后，我立即就想到一个方法，就是在 decode 代码里添加 csv 格式的判断，尝试了一下，由于对 csv 解析方法不熟悉，并且修改 Client 代码会导致模块更新不方便 (客户端代码都是生成的，于是决定另寻它法。\n通过寻找各种资料 issue 后，找到了一个可能可行的方法，就是创建手动创建 http 连接发送请求。\n\u003cimg loading=\"lazy\" src=\"/img/AdSense%e9%94%99%e8%af%af/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e根据相应的文档，很快就写好了相应的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;golang.org/x/oauth2\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;golang.org/x/oauth2/google\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/api/adsense/v2\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/api/option\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/api/transport/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/url\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eoauth2\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eClientID\u003c/span\u003e:     \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxx.apps.googleusercontent.com\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#75715e\"\u003e// from https://console.developers.google.com/project/\u0026lt;your-project-id\u0026gt;/apiui/credential\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eClientSecret\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GOCSPX-xxxxxx\u0026#34;\u003c/span\u003e,                                      \u003cspan style=\"color:#75715e\"\u003e// from https://console.developers.google.com/project/\u0026lt;your-project-id\u0026gt;/apiui/credential\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eEndpoint\u003c/span\u003e:     \u003cspan style=\"color:#a6e22e\"\u003egoogle\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEndpoint\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eScopes\u003c/span\u003e:       []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eadsense\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdsenseReadonlyScope\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eRedirectURL\u003c/span\u003e:  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://developers.google.com\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//token := newOAuthClient(ctx, config)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eoption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithTokenSource\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTokenSource\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eoauth2\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eToken\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eRefreshToken\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e})))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://adsense.googleapis.com/v2/accounts/pub-123123/reports:generateCsv\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSet\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dateRange\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;YESTERDAY\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSet\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dimensions\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;URL_CHANNEL_NAME\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSet\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PAGE_VIEWS\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRawQuery\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEncode\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGet\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReadAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e主要逻辑就是创建到 google cloud service 的连接，调用 generateCsv 接口即可。\u003c/p\u003e","title":"使用 Google Api Go Client 调用 Google Adsense 报告接口失败的问题及解决方案"},{"content":"前几周。在关注的 go 提案每周会议中，发现了一条比较感兴趣的内容：gonew: templates for new modules ,通过标题可以猜到 gonew 应该是一个通过配置项目模板生成新项目的模块。\n通过对 discussions 中 rsc 所描述的内容进行分析，可以得知为什么要启动这么一个新项目: go 团队经常收到用户的请求，想要通过模板启动一个新项目，即以某种基本的项目模板来创建一个新 Go module。Russ 私下编写了一个实现这个功能的小工具:rsc.io/tmp/gonew. Russ 在 google 内部宣传该工具后，Google 内部的一些团队便定制了一些模板 (template) ，尤其是 ServiceWeaver 团队的响应尤为积极。这一切最终让 Russ 决定引入 golang.org/x/tools/cmd/gonew。 gonew 工具的引入大幅简化了 Go 项目的创建，同时由于对自定义项目模板的支持，也可以提高 Go 项目的标准化水平。目前 gonew 工具是实验性的，后续可能会增加新的特性，但目前的核心功能是会保留的。\n通过对 discussions 中社区用户开发着的回应可以看出，大家纷纷讲述了没有 gonew 前所使用的工具，并对 gonew 建言献策，可以看出大部分的开发者都十分欢迎这个新功能的。\n接下来就由我来介绍 gonew。\n安装 通过以下命令安装 gonew:\ngo install golang.org/x/tools/cmd/gonew@latest $ go install golang.org/x/tools/cmd/gonew@latest go: downloading golang.org/x/tools v0.12.0 go: downloading golang.org/x/mod v0.12.0 执行 gonew:\n$ gonew usage: gonew srcmod[@version] [dstmod [dir]] See https://pkg.go.dev/golang.org/x/tools/cmd/gonew. 接下来我来介绍 gonew 的几种用法。\n使用 用法 1 用法 1 是基于模板创建同名项目，我们以 https://github.com/minio/mc 这个项目为例子。\n执行 gonew github.com/minio/mc\n$ gonew github.com/minio/mc gonew: initialized github.com/minio/mc in .\\mc 进入 mc 文件夹，查看 go.mod 文件，我们发现 gonew 仅是将模板项目下载到本地，且 go module 的名字也未被改变。这个用法适合本地创建某个项目的样例代码。\n用法 2 用法 2 是基于模板创建项目，但不保留 go module 的名字，使用新的 module 名字。我们同样使用 mc 这个项目。\n执行 gonew github.com/minio/mc github.com/overstarry/mc\n同样对创建的项目进行探索，可以发现新创建的这个项目的 go.mod 使用的是我们定义的 go.mod。\n这种用法应该是 gonew 最常用的用法。\n小结 gonew 的出现简化了 go 创建项目的难度，并且基于一些符合 Go 最佳实践的项目模板，Go 初学者可以快速得到好的布局的项目。公司和组织层面也可以通过定义专属 Go 模板来满足组织和公司的内部需要，提高 go 新项目的创建效率以及提升 Go 项目布局的标准化程度。\n参考 https://github.com/golang/go/discussions/61669 https://go.dev/blog/gonew https://github.com/golang/go/issues/33502 https://pkg.go.dev/golang.org/x/tools/cmd/gonew https://github.com/ServiceWeaver/template https://cs.opensource.google/go/x/tools/+/refs/tags/v0.12.0:go.mod ","permalink":"https://jasminides.com/posts/gonew-%E4%BB%8B%E7%BB%8D/","summary":"\u003cp\u003e前几周。在关注的 go 提案每周会议中，发现了一条比较感兴趣的内容：\u003ccode\u003egonew: templates for new modules \u003c/code\u003e,通过标题可以猜到 gonew\n应该是一个通过配置项目模板生成新项目的模块。\u003c/p\u003e\n\u003cp\u003e通过对 discussions 中 rsc 所描述的内容进行分析，可以得知为什么要启动这么一个新项目:\ngo 团队经常收到用户的请求，想要通过模板启动一个新项目，即以某种基本的项目模板来创建一个新 Go\nmodule。Russ 私下编写了一个实现这个功能的小工具:rsc.io/tmp/gonew.\nRuss 在 google 内部宣传该工具后，Google 内部的一些团队便定制了一些模板 (template)\n，尤其是 ServiceWeaver 团队的响应尤为积极。这一切最终让 Russ 决定引入 golang.org/x/tools/cmd/gonew。\ngonew 工具的引入大幅简化了 Go 项目的创建，同时由于对自定义项目模板的支持，也可以提高 Go 项目的标准化水平。目前 gonew\n工具是实验性的，后续可能会增加新的特性，但目前的核心功能是会保留的。\u003c/p\u003e\n\u003cp\u003e通过对 discussions 中社区用户开发着的回应可以看出，大家纷纷讲述了没有 gonew 前所使用的工具，并对 gonew\n建言献策，可以看出大部分的开发者都十分欢迎这个新功能的。\u003c/p\u003e\n\u003cp\u003e接下来就由我来介绍 gonew。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e通过以下命令安装 gonew:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install golang.org/x/tools/cmd/gonew@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ go install golang.org/x/tools/cmd/gonew@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego: downloading golang.org/x/tools v0.12.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego: downloading golang.org/x/mod v0.12.0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行 gonew:\u003c/p\u003e","title":"gonew 介绍"},{"content":"前言 最近在开发的时候，需要进行数据库计算，主要是根据表中的某些字段进行汇总计算，但由于数据库表中已有同名字段名，ent 不会使用计算后的指标，默认使用 schema 中定义的字段，导致无法返回正确的结果。\n针对这种情况，我能想到的方法有 2 种：1) 不使用同名的字段名 2) 查找 ent 是否有相关的解决方案。\n这里我采用了第二种方法，查找相关的 issues, 通过查找相关 issue，找到了相关的解决方案：ent 的 sql/modifier 特性。\n场景重现 定义一个新的数据库表结构，结构如下：\nfunc (Ad) Fields() []ent.Field { return []ent.Field{ field.Float(\u0026#34;estimated_earnings\u0026#34;), field.Int(\u0026#34;page_views\u0026#34;), field.Time(\u0026#34;date\u0026#34;), field.Float(\u0026#34;page_views_rpm\u0026#34;).Optional(), } } page_views_rpm 字段是由 estimated_earnings 和 page_views 计算而来。\n编写相应的查询代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;entgo.io/ent/dialect/sql\u0026#34; \u0026#34;fmt\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; \u0026#34;log\u0026#34; \u0026#34;modifier-demo/ent\u0026#34; \u0026#34;modifier-demo/ent/ad\u0026#34; \u0026#34;time\u0026#34; ) type Ads struct { EstimatedEarnings float64 `json:\u0026#34;estimated_earnings\u0026#34;` PageViews int64 `json:\u0026#34;page_views\u0026#34;` Date time.Time `json:\u0026#34;date\u0026#34;` PageViewsRpm float64 `json:\u0026#34;page_views_rpm\u0026#34;` } func main() { client, err := ent.Open(\u0026#34;postgres\u0026#34;, \u0026#34;host=127.0.0.1 port=5432 sslmode=disable user=postgres dbname=data_test password=mysecretpassword\u0026#34;) if err != nil { log.Fatalf(\u0026#34;failed opening connection to postgres: %v\u0026#34;, err) } defer client.Close() // Run the auto migration tool. if err := client.Schema.Create(context.Background()); err != nil { log.Fatalf(\u0026#34;failed creating schema resources: %v\u0026#34;, err) } var a []Ads err = client.Debug().Ad.Query().Order(ent.Desc(ad.FieldPageViewsRpm)).GroupBy(ad.FieldDate).Aggregate(func(selector *sql.Selector) string { return sql.As(\u0026#34; CAST(COALESCE(SUM(estimated_earnings) / NULLIF(SUM(page_views)*1.0, 0.0)*1000, 0)AS numeric(10,2))\u0026#34;, \u0026#34;page_views_rpm\u0026#34;) }).Scan(context.TODO(), \u0026amp;a) if err != nil { return } fmt.Println(a) } 主要是根据 date 来汇总并重新计算 page_views_rpm 字段，运行代码后发现没有成功输出，打印后发现 ent 使用了旧的 PageViewsRpm 字段进行排序，导致 sql 无法顺利运行。\nSELECT \u0026#34;ads\u0026#34;.\u0026#34;date\u0026#34;, CAST(COALESCE(SUM(estimated_earnings) / NULLIF(SUM(page_views) * 1.0, 0.0) * 1000, 0) AS numeric(10,2)) AS \u0026#34;page_views_rpm\u0026#34; FROM \u0026#34;ads\u0026#34; GROUP BY \u0026#34;ads\u0026#34;.\u0026#34;date\u0026#34; ORDER BY \u0026#34;ads\u0026#34;.\u0026#34;page_views_rpm\u0026#34; 解决 这里可以使用 ent 的 feature sql/modifier 来解决，我们先在 generate.go 开启特性 \u0026ndash;feature sql/modifier，然后重新生成代码，使用Modify方法添加自定义修饰符即可，相应的代码如下:\nerr = client.Debug().Ad.Query().Modify(func(s *sql.Selector) { s.Select(sql.As(\u0026#34; CAST(COALESCE(SUM(estimated_earnings) / NULLIF(SUM(page_views)*1.0, 0.0)*1000, 0)AS numeric(10,2))\u0026#34;, \u0026#34;page_views_rpm\u0026#34;)). GroupBy(\u0026#34;date\u0026#34;). OrderBy(\u0026#34;page_views_rpm\u0026#34;) }).Scan(context.TODO(), \u0026amp;a) if err != nil { return } 运行修改后的代码，结果顺利输出，相应的 sql 如下：\nSELECT CAST(COALESCE(SUM(estimated_earnings) / NULLIF(SUM(page_views) * 1.0, 0.0) * 1000, 0) AS numeric(10, 2)) AS \u0026#34;page_views_rpm\u0026#34; FROM \u0026#34;ads\u0026#34; GROUP BY \u0026#34;date\u0026#34; ORDER BY \u0026#34;page_views_rpm\u0026#34; 参考 https://github.com/ent/ent/issues/3026 https://entgo.io/zh/docs/feature-flags#custom-sql-modifiers https://github.com/ent/ent/issues/3387 ","permalink":"https://jasminides.com/posts/ent-%E7%9B%B8%E5%90%8C%E5%88%97%E5%90%8D%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在开发的时候，需要进行数据库计算，主要是根据表中的某些字段进行汇总计算，但由于数据库表中已有同名字段名，ent\n不会使用计算后的指标，默认使用 schema 中定义的字段，导致无法返回正确的结果。\u003c/p\u003e\n\u003cp\u003e针对这种情况，我能想到的方法有 2 种：1) 不使用同名的字段名 2) 查找 ent 是否有相关的解决方案。\u003c/p\u003e\n\u003cp\u003e这里我采用了第二种方法，查找相关的 issues, 通过查找相关 issue，找到了相关的解决方案：ent 的 sql/modifier 特性。\u003c/p\u003e\n\u003ch2 id=\"场景重现\"\u003e场景重现\u003c/h2\u003e\n\u003cp\u003e定义一个新的数据库表结构，结构如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eAd\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eFields\u003c/span\u003e() []\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eField\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eField\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFloat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;estimated_earnings\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInt\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;page_views\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;date\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFloat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;page_views_rpm\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eOptional\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003epage_views_rpm 字段是由 estimated_earnings 和 page_views 计算而来。\u003c/p\u003e\n\u003cp\u003e编写相应的查询代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;entgo.io/ent/dialect/sql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/lib/pq\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;modifier-demo/ent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;modifier-demo/ent/ad\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAds\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eEstimatedEarnings\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;estimated_earnings\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePageViews\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e     \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;page_views\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eDate\u003c/span\u003e              \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;date\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePageViewsRpm\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;page_views_rpm\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;postgres\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;host=127.0.0.1 port=5432 sslmode=disable user=postgres dbname=data_test password=mysecretpassword\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed opening connection to postgres: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Run the auto migration tool.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSchema\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCreate\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e()); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed creating schema resources: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eAds\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDebug\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eAd\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eOrder\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDesc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ead\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFieldPageViewsRpm\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003eGroupBy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ead\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFieldDate\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eAggregate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eselector\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esql\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSelector\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esql\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; CAST(COALESCE(SUM(estimated_earnings) / NULLIF(SUM(page_views)*1.0, 0.0)*1000, 0)AS numeric(10,2))\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;page_views_rpm\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}).\u003cspan style=\"color:#a6e22e\"\u003eScan\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTODO\u003c/span\u003e(), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e主要是根据 date 来汇总并重新计算 page_views_rpm 字段，运行代码后发现没有成功输出，打印后发现 ent 使用了旧的 PageViewsRpm 字段进行排序，导致 sql 无法顺利运行。\u003c/p\u003e","title":"ent 相同列名排序问题解决"},{"content":"最近需要使用 golang1.16 中的功能 embed ,本文简单记录下 embed 的使用。\nembed 介绍 Go 1.16 引入了 embed 包，允许我们在编译时将静态文件（例如 .go、.html、.css、.js 等）嵌入到 Go 源文件中。这在构建静态网站、单页应用程序（SPA）和其他项目时非常有用。\n主要有几个优点：\n方便部署：不需要再部署静态资源文件，所有的资源都直接嵌入到可执行文件中。\n安全：用户无法直接访问或修改嵌入的文件。\n版本管理：和 Go 代码一起版本控制。\n使用 嵌入为字符串 可以将文件内容保存到字符串变量中。\npackage main import ( _ \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt var s string func main() { fmt.Println(s) } 文件路径下有个 hello.txt，内容如下：hello, overstarry,代码运行输出：hello, overstarry\n保存为 []bytes 还可以将文件内容保存为 []bytes 变量\npackage main import ( _ \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt var s []byte func main() { fmt.Println(string(s)) } 运行代码输出内容与上面一致。\n保存为 fs.FS 类型 还可以将文件保存为 fs.FS 类型，这在嵌入多个文件时非常有用 (string 和[]bytes 不支持多个//go:embed 指令)。\npackage main import ( \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt //go:embed hello2.txt var f embed.FS func main() { data, _ := f.ReadFile(\u0026#34;hello.txt\u0026#34;) fmt.Println(string(data)) data, _ = f.ReadFile(\u0026#34;hello2.txt\u0026#34;) fmt.Println(string(data)) } 嵌入的内容是只读的。也就是在编译期嵌入文件的内容是什么，那么在运行时的内容也就是什么。\nFS 文件系统值提供了打开和读取的方法，并没有 write 的方法，也就是说 FS 实例是线程安全的，多个 goroutine 可以并发使用。\n单个文件嵌入为多个变量 还可以将单个文件保存为多个变量。\npackage main import ( _ \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt var s string //go:embed hello.txt var s2 string func main() { fmt.Println(s) fmt.Println(s2) } 将 hello.txt 的内容保存为 s 和 s2 变量以供不同地方使用。\n文件嵌入为可导出变量 可以将文件嵌入为可导出变量和不可导出变量，以应对需要外部调用的场景。\npackage main import ( _ \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt var S string //go:embed hello.txt var s2 string func main() { fmt.Println(S) fmt.Println(s2) } 嵌入多个文件 go:embed 指令支持嵌入多个文件\npackage main import ( \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed hello.txt hello2.txt var f embed.FS func main() { data, _ := f.ReadFile(\u0026#34;hello.txt\u0026#34;) fmt.Println(string(data)) data, _ = f.ReadFile(\u0026#34;hello2.txt\u0026#34;) fmt.Println(string(data)) } 嵌入文件夹 除了支持文件嵌入还可以嵌入整个文件夹。需要注意的是文件夹分隔符使用/,windows 环境也是。\npackage main import ( \u0026#34;embed\u0026#34; \u0026#34;fmt\u0026#34; ) //go:embed p var f embed.FS func main() { data, _ := f.ReadFile(\u0026#34;p/hello.txt\u0026#34;) fmt.Println(string(data)) data, _ = f.ReadFile(\u0026#34;p/hello2.txt\u0026#34;) fmt.Println(string(data)) } 小结 除了上面介绍的一些功能，embed 还支持相对路径等功能，感兴趣的读者可以自行查阅相关资料。\n参考 https://github.com/golang/go/issues/35950 ","permalink":"https://jasminides.com/posts/golang_embed-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/","summary":"\u003cp\u003e最近需要使用 golang1.16 中的功能 embed ,本文简单记录下 embed 的使用。\u003c/p\u003e\n\u003ch2 id=\"embed-介绍\"\u003eembed 介绍\u003c/h2\u003e\n\u003cp\u003eGo 1.16 引入了 embed 包，允许我们在编译时将静态文件（例如 .go、.html、.css、.js 等）嵌入到 Go 源文件中。这在构建静态网站、单页应用程序（SPA）和其他项目时非常有用。\u003c/p\u003e\n\u003cp\u003e主要有几个优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e方便部署：不需要再部署静态资源文件，所有的资源都直接嵌入到可执行文件中。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安全：用户无法直接访问或修改嵌入的文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e版本管理：和 Go 代码一起版本控制。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003ch3 id=\"嵌入为字符串\"\u003e嵌入为字符串\u003c/h3\u003e\n\u003cp\u003e可以将文件内容保存到字符串变量中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;embed\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//go:embed hello.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e文件路径下有个 hello.txt，内容如下：\u003ccode\u003ehello, overstarry\u003c/code\u003e,代码运行输出：\u003ccode\u003ehello, overstarry\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"保存为-bytes\"\u003e保存为 []bytes\u003c/h3\u003e\n\u003cp\u003e还可以将文件内容保存为 []bytes 变量\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;embed\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//go:embed hello.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行代码输出内容与上面一致。\u003c/p\u003e","title":"Golang_embed 简单介绍"},{"content":"最近在使用 nginx 反向代理时遇到了一些问题，在本文记录一下问题及相应的解决方法。\n问题 1 问题现象 错误日志如下：\n: host not found in upstream \u0026#34;xx.xx.vip\u0026#34;in /etc/nginx/conf.d/default.conf:17 nginx: [emerg] host not found in upstream \u0026#34;xx.xx.vip”in /etc/nginx/conf.d/default. conf:17 从错误日志可以看出这个问题主要是 nginx 无法解析相应的域名。\n解决方法 怎么解决这个问题呢，我们只需添加相应的 dns 服务器即可 resolver 8.8.8.8; 。\n问题 2 问题现象 错误日志如下：\n2023/07/28 01:35:43 [error] 34#34: *44 SSL_do_handshake() failed (SSL: error:14094438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:SSL alert number 80) while SSL handshaking to upstream, client: 172.16.64.75, server: , request: \u0026#34;POST /v1/data/xx/filter HTTP/1.1\u0026#34;, upstream: \u0026#34;https://xxxx:443/v1/data/xx/filter\u0026#34;, host: \u0026#34;xx.xx.com\u0026#34;, referrer: \u0026#34;https://xx.xx.com/user/login\u0026#34; 解决方法 这个问题主要是 https 相关配置的问题，我们只需添加这几行配置即可：\nproxy_ssl_session_reuse off; proxy_ssl_server_name on; proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2; proxy_ssl_session_reuse off; 关闭默认尝试重新使用 SSL 上游的 SSL 会话 proxy_ssl_server_name on; 反向代理的时候，通过域名而不是 ip 地址去访问 proxy_ssl_protocols 指定 SSL 协议\n小结 本文讲述了最近在使用 nginx 进行反向代理时遇到的 2 个问题及相应的解决方法，后面如果出现相关的问题，也会补充在本文中的。\n","permalink":"https://jasminides.com/posts/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","summary":"\u003cp\u003e最近在使用 nginx 反向代理时遇到了一些问题，在本文记录一下问题及相应的解决方法。\u003c/p\u003e\n\u003ch2 id=\"问题-1\"\u003e问题 1\u003c/h2\u003e\n\u003ch3 id=\"问题现象\"\u003e问题现象\u003c/h3\u003e\n\u003cp\u003e错误日志如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e: host not found in upstream \u0026#34;xx.xx.vip\u0026#34;in /etc/nginx/conf.d/default.conf:17\nnginx: [emerg] host not found in upstream \u0026#34;xx.xx.vip”in /etc/nginx/conf.d/default. conf:17\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从错误日志可以看出这个问题主要是 nginx 无法解析相应的域名。\u003c/p\u003e\n\u003ch2 id=\"解决方法\"\u003e解决方法\u003c/h2\u003e\n\u003cp\u003e怎么解决这个问题呢，我们只需添加相应的 dns 服务器即可 \u003ccode\u003e        resolver 8.8.8.8;\u003c/code\u003e 。\u003c/p\u003e\n\u003ch2 id=\"问题-2\"\u003e问题 2\u003c/h2\u003e\n\u003ch3 id=\"问题现象-1\"\u003e问题现象\u003c/h3\u003e\n\u003cp\u003e错误日志如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e2023/07/28 01:35:43 [error] 34#34: *44 SSL_do_handshake() failed (SSL: error:14094438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:SSL alert number 80) while SSL handshaking to upstream, client: 172.16.64.75, server: , request: \u0026#34;POST /v1/data/xx/filter HTTP/1.1\u0026#34;, upstream: \u0026#34;https://xxxx:443/v1/data/xx/filter\u0026#34;, host: \u0026#34;xx.xx.com\u0026#34;, referrer: \u0026#34;https://xx.xx.com/user/login\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"解决方法-1\"\u003e解决方法\u003c/h3\u003e\n\u003cp\u003e这个问题主要是 https 相关配置的问题，我们只需添加这几行配置即可：\u003c/p\u003e","title":"Nginx 反向代理中出现的问题及解决方法"},{"content":"cert manager 介绍 cert-manager 是一个可信证书管理器，可以自动为您的集群中的服务提供 SSL 证书和可靠的基础设施。它执行以下任务：\n自动通过类似 Let\u0026rsquo;s Encrypt 和 eigene 之类的 Certificate Authority (CA) 重新生成即将过期的证书。 为您的集群中的服务自动生成证书。 提供一个组件库，可用于自签名证书或其他 CA API。 主要特性：\n自动生成/重新生成证书 支持多种 CA 颁发的证书:Let\u0026rsquo;s Encrypt、自签名证书、HashiCorp Vault 等 支持多种记录类型:DNS01、HTTP01、Kubernetes Ingress 等 适用于支持 TLS 密码学的任何 Kubernetes API 对象 具有密钥轮换功能，可无缝替换即将到期的证书 流畅的 API，易于扩展 总的来说，cert-manager 可以让您将集群负载均衡的 TLS 实现自动化，减少运维负担。它主要用于解决基础设施中最常见的挑战：如何高可用地为应用提供 TLS 证书。\n申请证书 接下来我来讲解本文的重点：如何使用 cert-manager 申请证书并配置于 ingress 上。\n安装 cert-manager 执行 kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml 部署最新版本 cert-manager.\n查看 pod 状态 部署后，过一会执行 kubectl get pods -n cert-manager 查看 pod 状态。\n创建 ClusterIssuer 创建 cert-manager 的 crd ClusterIssuer.资源清单例子：\napiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-prod-http01 spec: acme: server: https://acme-v02.api.letsencrypt.org/directory email: \u0026lt;your_email_name@gmail.com\u0026gt; #替换为您的邮箱名。 privateKeySecretRef: name: letsencrypt-http01 solvers: - http01: ingress: class: nginx 配置 ingress 创建 ClusterIssuer 后，我们就可以配置 ingress 了，实例清单如下：\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-tls annotations: kubernetes.io/ingress.class: \u0026#34;nginx\u0026#34; cert-manager.io/cluster-issuer: \u0026#34;letsencrypt-prod-http01\u0026#34; spec: tls: - hosts: - \u0026lt;your_domain_name\u0026gt; # 替换为您的域名。 secretName: ingress-tls rules: - host: \u0026lt;your_domain_name\u0026gt; # 替换为您的域名。 http: paths: - path: / backend: serviceName: \u0026lt;your_service_name\u0026gt; # 替换为您的后端服务名。 servicePort: \u0026lt;your_service_port\u0026gt; # 替换为您的服务端口。 执行 kubectl get cert 可以看到证书顺利生成成功\n接下来我们就可以通过 https://域名 来访问相关网站了。\n小结 本文讲解了如何通过 cert-manager 配置证书来给 nginx-ingress 使用，后面还会有 apisix-ingress 通过 cert-manager 配置的文章，敬请期待。\n参考 https://cert-manager.io/ https://github.com/cert-manager/cert-manager https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/advanced-nginx-ingress-configurations?spm=a2c4g.11186623.0.0.22892159SXR5By#section-8gd-dti-7g4 https://cloud.tencent.com/document/product/457/49368 ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-cert-manager-%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/","summary":"\u003ch2 id=\"cert-manager-介绍\"\u003ecert manager 介绍\u003c/h2\u003e\n\u003cp\u003ecert-manager 是一个可信证书管理器，可以自动为您的集群中的服务提供 SSL 证书和可靠的基础设施。它执行以下任务：\u003c/p\u003e\n\u003cp\u003e自动通过类似 Let\u0026rsquo;s Encrypt 和 eigene 之类的 Certificate Authority (CA) 重新生成即将过期的证书。\n为您的集群中的服务自动生成证书。\n提供一个组件库，可用于自签名证书或其他 CA API。\n主要特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自动生成/重新生成证书\u003c/li\u003e\n\u003cli\u003e支持多种 CA 颁发的证书:Let\u0026rsquo;s Encrypt、自签名证书、HashiCorp Vault 等\u003c/li\u003e\n\u003cli\u003e支持多种记录类型:DNS01、HTTP01、Kubernetes Ingress 等\u003c/li\u003e\n\u003cli\u003e适用于支持 TLS 密码学的任何 Kubernetes API 对象\u003c/li\u003e\n\u003cli\u003e具有密钥轮换功能，可无缝替换即将到期的证书\u003c/li\u003e\n\u003cli\u003e流畅的 API，易于扩展\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总的来说，cert-manager 可以让您将集群负载均衡的 TLS 实现自动化，减少运维负担。它主要用于解决基础设施中最常见的挑战：如何高可用地为应用提供 TLS 证书。\u003c/p\u003e\n\u003ch2 id=\"申请证书\"\u003e申请证书\u003c/h2\u003e\n\u003cp\u003e接下来我来讲解本文的重点：如何使用 cert-manager 申请证书并配置于 ingress 上。\u003c/p\u003e\n\u003ch3 id=\"安装-cert-manager\"\u003e安装 cert-manager\u003c/h3\u003e\n\u003cp\u003e执行 \u003ccode\u003ekubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml\u003c/code\u003e 部署最新版本 cert-manager.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/nginx-cert-manager/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"查看-pod-状态\"\u003e查看 pod 状态\u003c/h3\u003e\n\u003cp\u003e部署后，过一会执行 \u003ccode\u003ekubectl get pods -n cert-manager\u003c/code\u003e 查看 pod 状态。\u003c/p\u003e","title":"使用 cert Manager 申请免费证书"},{"content":"最近在开发一个需求时，需要将英文转为中文，这就需要进行本地化的处理，通过查找相关的库，决定使用 gettext-go 来进行本地化的处理，本篇文章主要简单介绍 gettext-go 和 它在 k8s kubectl 中的运用。\ngettext-go 简单介绍和使用 gettext-go 简单来说就是读取预先编写的 po 或 mo 文件来进行本地化的处理。\npo 和 mo 文件是什么呢？接下来介绍一下 po 和 mo 文件\npo 和 mo 文件介绍 .po 文件，.mo 文件是由 gettext 程序生成或者使用的源代码和编译结果。\n1、.pot 文件\n是一种模板文件，其实质与.po 文件一样，其中包含了从源代码中提取所有的翻译字符串的列表，主要提供给翻译人员使用。\n2、.po 文件\n（1）用程序 msginit 来分析 pot 文件，生成各语言对应的 po 文件，比如中文就是 zh_CN.po，法语就是 fr.po 文件。\n（2）PO 是 Portable Object（可移植对象）的缩写形式，它是面向翻译人员的、提取于源代码的一种资源文件。\n（3）.po 文件可以用任何编辑器如 poEdit，vi，Emacs，editplus 打开，交给翻译人员来将其中的文字翻译成本国语言。\n3、.mo 文件\n（1）用 msgfmt 将.po 文件编译成 mo 文件，这是一个二进制文件，不能直接编辑。\n（2）MO 是 Machine Object（机器对象）的缩写形式，它是面向计算机的、由.po 文件通过 GNU gettext 工具包编译而成的二进制文件，应用程序通过读取.mo 文件使自身的界面转换成用户使用的语言，如简体中文。\n（3）可以用工具如 msgunfmt 命令将.mo 文件反编译为.po 文件。\n很多软件都是通过这些文件实现多语言的功能。\ngettext-go 简单使用 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/chai2010/gettext-go\u0026#34; ) func main() { gettext := gettext.New(\u0026#34;hello\u0026#34;, \u0026#34;./examples/locale\u0026#34;).SetLanguage(\u0026#34;zh_CN\u0026#34;) fmt.Println(gettext.Gettext(\u0026#34;Hello, world!\u0026#34;)) // Output: 你好，世界！ } 这段代码主要就是读取预先定义的 po 或 mo 文件，选择中文翻译，将 Hello, world! 转为中文。这就是这个库的主要功能，接下来我们来看看这个库在 k8s 中使用的例子。\nk8s 中的使用 k8s 中使用 gettext-go 的地方是在 kubectl 中，主要是命令行的本地化。先简单看一下代码。\n// https://raw.githubusercontent.com/kubernetes/kubernetes/master/staging/src/k8s.io/kubectl/pkg/util/i18n/i18n.go /* Copyright 2016 The Kubernetes Authors. Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ package i18n import ( \u0026#34;archive/zip\u0026#34; \u0026#34;bytes\u0026#34; \u0026#34;embed\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;github.com/chai2010/gettext-go\u0026#34; \u0026#34;k8s.io/klog/v2\u0026#34; ) //go:embed translations var translations embed.FS var knownTranslations = map[string][]string{ \u0026#34;kubectl\u0026#34;: { \u0026#34;default\u0026#34;, \u0026#34;en_US\u0026#34;, \u0026#34;fr_FR\u0026#34;, \u0026#34;zh_CN\u0026#34;, \u0026#34;ja_JP\u0026#34;, \u0026#34;zh_TW\u0026#34;, \u0026#34;it_IT\u0026#34;, \u0026#34;de_DE\u0026#34;, \u0026#34;ko_KR\u0026#34;, \u0026#34;pt_BR\u0026#34;, }, // only used for unit tests. \u0026#34;test\u0026#34;: { \u0026#34;default\u0026#34;, \u0026#34;en_US\u0026#34;, }, } var ( lazyLoadTranslationsOnce sync.Once LoadTranslationsFunc = func() error { return LoadTranslations(\u0026#34;kubectl\u0026#34;, nil) } translationsLoaded bool ) // SetLoadTranslationsFunc sets the function called to lazy load translations. // It must be called in an init() func that occurs BEFORE any i18n.T() calls are made by any package. You can // accomplish this by creating a separate package containing your init() func, and then importing that package BEFORE // any other packages that call i18n.T(). // // Example Usage: // //\tpackage myi18n // //\timport \u0026#34;k8s.io/kubectl/pkg/util/i18n\u0026#34; // //\tfunc init() { //\tif err := i18n.SetLoadTranslationsFunc(loadCustomTranslations); err != nil { //\tpanic(err) //\t} //\t} // //\tfunc loadCustomTranslations() error { //\t// Load your custom translations here... //\t} // // And then in your main or root command package, import your custom package like this: // //\timport ( //\t// Other imports that don\u0026#39;t need i18n... //\t_ \u0026#34;example.com/myapp/myi18n\u0026#34; //\t// Other imports that do need i18n... //\t) func SetLoadTranslationsFunc(f func() error) error { if translationsLoaded { return errors.New(\u0026#34;translations have already been loaded\u0026#34;) } LoadTranslationsFunc = func() error { if err := f(); err != nil { return err } translationsLoaded = true return nil } return nil } func loadSystemLanguage() string { // Implements the following locale priority order: LC_ALL, LC_MESSAGES, LANG // Similarly to: https://www.gnu.org/software/gettext/manual/html_node/Locale-Environment-Variables.html langStr := os.Getenv(\u0026#34;LC_ALL\u0026#34;) if langStr == \u0026#34;\u0026#34; { langStr = os.Getenv(\u0026#34;LC_MESSAGES\u0026#34;) } if langStr == \u0026#34;\u0026#34; { langStr = os.Getenv(\u0026#34;LANG\u0026#34;) } if langStr == \u0026#34;\u0026#34; { klog.V(3).Infof(\u0026#34;Couldn\u0026#39;t find the LC_ALL, LC_MESSAGES or LANG environment variables, defaulting to en_US\u0026#34;) return \u0026#34;default\u0026#34; } pieces := strings.Split(langStr, \u0026#34;.\u0026#34;) if len(pieces) != 2 { klog.V(3).Infof(\u0026#34;Unexpected system language (%s), defaulting to en_US\u0026#34;, langStr) return \u0026#34;default\u0026#34; } return pieces[0] } func findLanguage(root string, getLanguageFn func() string) string { langStr := getLanguageFn() translations := knownTranslations[root] for ix := range translations { if translations[ix] == langStr { return langStr } } klog.V(3).Infof(\u0026#34;Couldn\u0026#39;t find translations for %s, using default\u0026#34;, langStr) return \u0026#34;default\u0026#34; } // LoadTranslations loads translation files. getLanguageFn should return a language // string (e.g. \u0026#39;en-US\u0026#39;). If getLanguageFn is nil, then the loadSystemLanguage function // is used, which uses the \u0026#39;LANG\u0026#39; environment variable. func LoadTranslations(root string, getLanguageFn func() string) error { if getLanguageFn == nil { getLanguageFn = loadSystemLanguage } langStr := findLanguage(root, getLanguageFn) translationFiles := []string{ fmt.Sprintf(\u0026#34;%s/%s/LC_MESSAGES/k8s.po\u0026#34;, root, langStr), fmt.Sprintf(\u0026#34;%s/%s/LC_MESSAGES/k8s.mo\u0026#34;, root, langStr), } klog.V(3).Infof(\u0026#34;Setting language to %s\u0026#34;, langStr) // TODO: list the directory and load all files. buf := new(bytes.Buffer) w := zip.NewWriter(buf) // Make sure to check the error on Close. for _, file := range translationFiles { filename := \u0026#34;translations/\u0026#34; + file f, err := w.Create(file) if err != nil { return err } data, err := translations.ReadFile(filename) if err != nil { return err } if _, err := f.Write(data); err != nil { return nil } } if err := w.Close(); err != nil { return err } gettext.BindLocale(gettext.New(\u0026#34;k8s\u0026#34;, root+\u0026#34;.zip\u0026#34;, buf.Bytes())) gettext.SetDomain(\u0026#34;k8s\u0026#34;) gettext.SetLanguage(langStr) translationsLoaded = true return nil } func lazyLoadTranslations() { lazyLoadTranslationsOnce.Do(func() { if translationsLoaded { return } if err := LoadTranslationsFunc(); err != nil { klog.Warning(\u0026#34;Failed to load translations\u0026#34;) } }) } // T translates a string, possibly substituting arguments into it along // the way. If len(args) is \u0026gt; 0, args1 is assumed to be the plural value // and plural translation is used. func T(defaultValue string, args ...int) string { lazyLoadTranslations() if len(args) == 0 { return gettext.PGettext(\u0026#34;\u0026#34;, defaultValue) } return fmt.Sprintf(gettext.PNGettext(\u0026#34;\u0026#34;, defaultValue, defaultValue+\u0026#34;.plural\u0026#34;, args[0]), args[0]) } // Errorf produces an error with a translated error string. // Substitution is performed via the `T` function above, following // the same rules. func Errorf(defaultValue string, args ...int) error { return errors.New(T(defaultValue, args...)) } 简单看一下代码可以看出，本地化资源文件是通过 go1.16 新特性 embed 方式嵌入到了 translations 变量中。主要看几个外部方法：\n一) SetLoadTranslationsFunc\n这个方法主要就是开发者自定义加载语言文件的函数，如果翻译已经被加载，这个函数会返回一个错误。，通过注释可以得知，这个方法必须在 init() 方法中调用，\n二) LoadTranslations\nLoadTranslations 方法是默认的加载语言文件的方法，这个方法负责加载翻译文件。它首先尝试找到系统的语言或者是用户提供的语言，然后加载相应的翻译文件。\n三）T\nT 方法主要就是翻译函数，它会根据给定的 defaultValue 和参数来翻译字符串。\n四) Errorf(defaultValue string, args \u0026hellip;int) error：\n这个函数和 T 类似，但是它返回一个新的错误，错误信息是翻译后的字符串。\n参考 https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubectl/pkg/util/i18n/i18n.go https://pkg.go.dev/github.com/chai2010/gettext-go https://github.com/kubernetes/kubectl ","permalink":"https://jasminides.com/posts/golang-i18n/","summary":"\u003cp\u003e最近在开发一个需求时，需要将英文转为中文，这就需要进行本地化的处理，通过查找相关的库，决定使用 gettext-go 来进行本地化的处理，本篇文章主要简单介绍 gettext-go 和 它在 k8s kubectl 中的运用。\u003c/p\u003e\n\u003ch2 id=\"gettext-go-简单介绍和使用\"\u003egettext-go 简单介绍和使用\u003c/h2\u003e\n\u003cp\u003egettext-go 简单来说就是读取预先编写的 po 或 mo 文件来进行本地化的处理。\u003c/p\u003e\n\u003cp\u003epo 和 mo 文件是什么呢？接下来介绍一下 po 和 mo 文件\u003c/p\u003e\n\u003ch3 id=\"po-和-mo-文件介绍\"\u003epo 和 mo 文件介绍\u003c/h3\u003e\n\u003cp\u003e.po 文件，.mo 文件是由 gettext 程序生成或者使用的源代码和编译结果。\u003c/p\u003e\n\u003cp\u003e1、.pot 文件\u003c/p\u003e\n\u003cp\u003e是一种模板文件，其实质与.po 文件一样，其中包含了从源代码中提取所有的翻译字符串的列表，主要提供给翻译人员使用。\u003c/p\u003e\n\u003cp\u003e2、.po 文件\u003c/p\u003e\n\u003cp\u003e（1）用程序 msginit 来分析 pot 文件，生成各语言对应的 po 文件，比如中文就是 zh_CN.po，法语就是 fr.po 文件。\u003c/p\u003e\n\u003cp\u003e（2）PO 是 Portable Object（可移植对象）的缩写形式，它是面向翻译人员的、提取于源代码的一种资源文件。\u003c/p\u003e\n\u003cp\u003e（3）.po 文件可以用任何编辑器如 poEdit，vi，Emacs，editplus 打开，交给翻译人员来将其中的文字翻译成本国语言。\u003c/p\u003e\n\u003cp\u003e3、.mo 文件\u003c/p\u003e\n\u003cp\u003e（1）用 msgfmt 将.po 文件编译成 mo 文件，这是一个二进制文件，不能直接编辑。\u003c/p\u003e\n\u003cp\u003e（2）MO 是 Machine Object（机器对象）的缩写形式，它是面向计算机的、由.po 文件通过 GNU gettext 工具包编译而成的二进制文件，应用程序通过读取.mo 文件使自身的界面转换成用户使用的语言，如简体中文。\u003c/p\u003e","title":"Golang i18n"},{"content":"简介 rueidis 是一个快速的 Golang Redis 客户端，支持客户端缓存、Auto Pipelining、泛型 OM、RedisJSON、RedisBloom、RediSearch 等功能。\nFeatures Auto pipelining for non-blocking redis commands RESP3 中的客户端缓存 Pub/Sub, Sharded Pub/Sub, Streams Redis Cluster, Sentinel, RedisJSON, RedisBloom, RediSearch, RedisTimeseries, 等。 具有客户端缓存和乐观锁定的通用对象映射 具有客户端缓存的分布式锁 rueidis mock OpenTelemetry 集成 Hooks and other 集成 提供类似 Go-redis API 的适配器 需要注意的是由于使用了一些 go1.20 版本才有的特性，如果想要使用低版本 go，必须安装相应的版本。\n简单使用 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/redis/rueidis\u0026#34; ) func main() { // 创建 redis 客户端连接 client, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\u0026#34;127.0.0.1:6379\u0026#34;}}) if err != nil { panic(err) } defer client.Close() ctx := context.Background() // 执行 redis set 命令 err = client.Do(ctx, client.B().Set().Key(\u0026#34;key1\u0026#34;).Value(\u0026#34;val\u0026#34;).Nx().Build()).Error() if err != nil { panic(err) } hm, err := client.Do(ctx, client.B().Get().Key(\u0026#34;key1\u0026#34;).Build()).ToString() if err != nil { panic(err) } fmt.Println(hm) } go-redis 适配器 如何快速从 go-redis 切换到 rueidis 客户端呢，rueidis 提供了 rueidiscompat.NewAdapter 方法，通过 Adapter 可以使用熟悉的 go-redis 中的方法。\n例子：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/redis/rueidis\u0026#34; \u0026#34;github.com/redis/rueidis/rueidiscompat\u0026#34; \u0026#34;time\u0026#34; ) func main() { ctx := context.Background() client, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\u0026#34;127.0.0.1:6379\u0026#34;}}) if err != nil { panic(err) } defer client.Close() compat := rueidiscompat.NewAdapter(client) _, _ = compat.SetNX(ctx, \u0026#34;key\u0026#34;, \u0026#34;val\u0026#34;, time.Second).Result() } 基准测试 通过官方仓库的测试可以看出，相比 go-redis ,rueidis 在相同环境下可以获得更高的吞吐。\n小结 本文简单介绍了 go 语言环境下新的 redis 客户端库 rueidis，并简单的使用。\n参考 https://github.com/redis/rueidis https://centrifugal.dev/blog/2022/12/20/improving-redis-engine-performance https://github.com/redis/rueidis/tree/main/rueidiscompat https://github.com/redis/rueidis#command-response-cheatsheet ","permalink":"https://jasminides.com/posts/rueidis-%E7%AE%80%E4%BB%8B/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003erueidis 是一个快速的 Golang Redis 客户端，支持客户端缓存、Auto Pipelining、泛型 OM、RedisJSON、RedisBloom、RediSearch 等功能。\u003c/p\u003e\n\u003ch3 id=\"features\"\u003eFeatures\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAuto pipelining for non-blocking redis commands\u003c/li\u003e\n\u003cli\u003eRESP3 中的客户端缓存\u003c/li\u003e\n\u003cli\u003ePub/Sub, Sharded Pub/Sub, Streams\u003c/li\u003e\n\u003cli\u003eRedis Cluster, Sentinel, RedisJSON, RedisBloom, RediSearch, RedisTimeseries, 等。\u003c/li\u003e\n\u003cli\u003e具有客户端缓存和乐观锁定的通用对象映射\u003c/li\u003e\n\u003cli\u003e具有客户端缓存的分布式锁\u003c/li\u003e\n\u003cli\u003erueidis mock\u003c/li\u003e\n\u003cli\u003eOpenTelemetry 集成\u003c/li\u003e\n\u003cli\u003eHooks and other 集成\u003c/li\u003e\n\u003cli\u003e提供类似 Go-redis API 的适配器\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意的是由于使用了一些 go1.20 版本才有的特性，如果想要使用低版本 go，必须安装相应的版本。\u003c/p\u003e\n\u003ch2 id=\"简单使用\"\u003e简单使用\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/redis/rueidis\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 创建 redis 客户端连接\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erueidis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erueidis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClientOption\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eInitAddress\u003c/span\u003e: []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1:6379\u0026#34;\u003c/span\u003e}})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 执行 redis set 命令\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eSet\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eKey\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key1\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eValue\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eNx\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eBuild\u003c/span\u003e()).\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehm\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eGet\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eKey\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key1\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eBuild\u003c/span\u003e()).\u003cspan style=\"color:#a6e22e\"\u003eToString\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehm\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"go-redis-适配器\"\u003ego-redis 适配器\u003c/h2\u003e\n\u003cp\u003e如何快速从 go-redis 切换到 rueidis 客户端呢，rueidis 提供了 rueidiscompat.NewAdapter 方法，通过 Adapter 可以使用熟悉的 go-redis 中的方法。\u003c/p\u003e","title":"rueidis 简介"},{"content":"问题 最近在使用 sql 进行数值计算时，发现 sql 语句运行报错，报错信息如下：division by zero，综合分析 sql 语句得出是在进行除法运算时，除数为 0 导致的。\n解决 接下来我来介绍几种解决这种问题的方法：\nNULLIF 和 COALESCE 函数 我们可以使用 NULLIF 函数检查变量是否是 0 值，如果是 0 则为 null。使用 COALESCE 函数检查分子和分母是否有 NULL 值，然后返回默认值。\n例子：\nSELECT COALESCE(dividend / NULLIF(divisor, 0), default_value) FROM xx CASE 表达式 我们可以使用 case when 来检查除数是否为 0，如果是 0 则使用默认值。 例子：\nSELECT COALESCE(dividend / NULLIF(divisor, 0), default_value) FROM xx 最终我采用了第一种方法，顺利的解决了问题，还需要多说的是在 postgresql sql 语句使用过程中，要注意所使用函数需要的参数的类型，遇到需要转换参数类型的情况，可以使用 case 函数进行类型转换。\n小结 本文讲述了我遇到的 PostgreSQL 进行数值计算时遇到的 division by zero 问题的情况及解决方法。\n参考 https://www.postgresql.org/docs/current/functions-conditional.html#FUNCTIONS-NULLIF https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-EXPRESS-EVAL https://pganalyze.com/docs/log-insights/app-errors/U128 https://stackoverflow.com/questions/17681375/avoid-division-by-zero-in-postgresql ","permalink":"https://jasminides.com/posts/postgresql-%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3-division-by-zero-%E9%97%AE%E9%A2%98/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在使用 sql 进行数值计算时，发现 sql 语句运行报错，报错信息如下：\u003ccode\u003edivision by zero\u003c/code\u003e，综合分析 sql 语句得出是在进行除法运算时，除数为 0 导致的。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e接下来我来介绍几种解决这种问题的方法：\u003c/p\u003e\n\u003ch3 id=\"nullif-和-coalesce-函数\"\u003eNULLIF 和 COALESCE 函数\u003c/h3\u003e\n\u003cp\u003e我们可以使用 NULLIF 函数检查变量是否是 0 值，如果是 0 则为 null。使用 COALESCE 函数检查分子和分母是否有 NULL 值，然后返回默认值。\u003c/p\u003e\n\u003cp\u003e例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   COALESCE(dividend \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNULLIF\u003c/span\u003e(divisor, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e), default_value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e xx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"case-表达式\"\u003eCASE 表达式\u003c/h3\u003e\n\u003cp\u003e我们可以使用 case when 来检查除数是否为 0，如果是 0 则使用默认值。\n例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   COALESCE(dividend \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNULLIF\u003c/span\u003e(divisor, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e), default_value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e xx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最终我采用了第一种方法，顺利的解决了问题，还需要多说的是在 postgresql sql 语句使用过程中，要注意所使用函数需要的参数的类型，遇到需要转换参数类型的情况，可以使用 case 函数进行类型转换。\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文讲述了我遇到的 PostgreSQL 进行数值计算时遇到的 division by zero 问题的情况及解决方法。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.postgresql.org/docs/current/functions-conditional.html#FUNCTIONS-NULLIF\"\u003ehttps://www.postgresql.org/docs/current/functions-conditional.html#FUNCTIONS-NULLIF\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-EXPRESS-EVAL\"\u003ehttps://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-EXPRESS-EVAL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pganalyze.com/docs/log-insights/app-errors/U128\"\u003ehttps://pganalyze.com/docs/log-insights/app-errors/U128\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/17681375/avoid-division-by-zero-in-postgresql\"\u003ehttps://stackoverflow.com/questions/17681375/avoid-division-by-zero-in-postgresql\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"PostgreSQL 怎么解决 division by zero 问题"},{"content":"本文我来讲解 Kubernetes 中的一个重要概念：容器的健康检查。\n介绍 在 Kubernetes 中，你可以为 Pod 里的容器定义一个健康检查“探针”（Probe）。 这样，kubelet 就会根据这个 Probe 的返回值决定这个容器的状态，而不是直接以容器镜像是否运行（来自 Docker 返回的信息）作为依据。 这种机制，是生产环境中保证应用健康存活的重要手段。\nk8s 主要有三种健康检查的探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针 3) StartupProbe 启动探针\nkubelet 使用存活探针来确定什么时候要重启容器。例如，存活探针可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。\n存活探针的常见模式是为就绪探针使用相同的低成本 HTTP 端点，但具有更高的 failureThreshold。这样可以确保在硬性终止 Pod 之前，将观察到 Pod 在一段时间内处于非就绪状态。\nkubelet 使用就绪探针可以知道容器何时准备好接受请求流量，当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。\nkubelet 使用启动探针来了解应用容器何时启动。如果配置了这类探针，你就可以控制容器在启动成功后再进行存活性和就绪态检查，确保这些存活、就绪探针不会影响应用的启动。启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。\nprobe 介绍 接下来我来讲解用的较多的 2 个探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针\nLivenessProbe 许多应用由于长时间运行导致程序异常，需要重启服务才能继续正常使用，Kubernetes 提供了存活探针 (LivenessProbe) 来发现并处理这种情况。\n我们先创建一个 pod, pod 的文件如下：\napiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-exec spec: containers: - name: liveness image: nginx args: - /bin/sh - -c - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600 livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 在这个配置文件中，可以看到 Pod 中只有一个 Container。periodSeconds 字段指定了 kubelet 应该每 5 秒执行一次存活探测。initialDelaySeconds 字段告诉 kubelet 在执行第一次探测前应该等待 5 秒。kubelet 在容器内执行命令 cat /tmp/healthy 来进行探测。如果命令执行成功并且返回值为 0，kubelet 就会认为这个容器是健康存活的。如果这个命令返回非 0 值，kubelet 会杀死这个容器并重新启动它。\n容器启动时会执行 /bin/sh -c \u0026quot;touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600\u0026quot; 在容器启动的前 30s /tmp/healthy 是存在的，30s 后这个文件被删掉了，导致存活探测失败，使得容器重启。\n我们创建这个 pod ,过一会查看 pod 的事件，发现 pod30s 后由于文件删掉了后重启了。\n还有一种方式是通过 http 的 get 请求来探测容器存活状态，我们定义一个新的 pod，如下：\napiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-http spec: containers: - name: liveness image: registry.k8s.io/liveness args: - /server livenessProbe: httpGet: path: /healthz port: 8080 httpHeaders: - name: Custom-Header value: Awesome initialDelaySeconds: 3 periodSeconds: 3 可以看到 kubelet 会每隔 3s 向容器的 http 接口发送请求，如果容器返回的状态码大于或等于 200 并且小于 400 都标示成功，其它状态码都标示失败，容器则会被杀死重启。\n还有一种是存活探测方式是通过 TCP 检测来实现的，TCP 探测和 http 探测类似，TCP 探测是尝试连接相应的端口，如果连接成功则是就绪状态，\n在 Kubernetes v1.24 版本新添加了一个 Grpc 存活探针，是根据前面文章讲述的 Grpc 健康检查协议来实现的，如果你的应用实现了 gRPC 健康检查协议，kubelet 可以配置为使用该协议来执行应用存活性检查。你必须启用 GRPCContainerProbe 特性配置才能配置依赖于 gRPC 的检查机制。\nReadinessProbe 有时候，应用会暂时性地无法为请求提供服务。例如，应用在启动时可能需要加载大量的数据或配置文件，或是启动后要依赖等待外部服务。在这种情况下，既不想杀死应用，也不想给它发送请求。Kubernetes 提供了就绪探针来发现并缓解这些情况。容器所在 Pod 上报还未就绪的信息，并且不接受通过 Kubernetes Service 的流量。\n就绪探针的配置和存活探针的配置相似。唯一区别就是要使用 readinessProbe 字段，而不是 livenessProbe 字段。\n就绪和存活探测可以在同一个容器上并行使用。两者共同使用，可以确保流量不会发给还未就绪的容器，当这些探测失败时容器会被重新启动。\n参考 https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ ","permalink":"https://jasminides.com/posts/kubernetes-health-check/","summary":"\u003cp\u003e本文我来讲解 Kubernetes 中的一个重要概念：容器的健康检查。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003e在 Kubernetes 中，你可以为 Pod 里的容器定义一个健康检查“探针”（Probe）。\n这样，kubelet 就会根据这个 Probe 的返回值决定这个容器的状态，而不是直接以容器镜像是否运行（来自 Docker 返回的信息）作为依据。\n这种机制，是生产环境中保证应用健康存活的重要手段。\u003c/p\u003e\n\u003cp\u003ek8s 主要有三种健康检查的探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针 3) StartupProbe 启动探针\u003c/p\u003e\n\u003cp\u003ekubelet 使用存活探针来确定什么时候要重启容器。例如，存活探针可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。\u003c/p\u003e\n\u003cp\u003e存活探针的常见模式是为就绪探针使用相同的低成本 HTTP 端点，但具有更高的 failureThreshold。这样可以确保在硬性终止 Pod 之前，将观察到 Pod 在一段时间内处于非就绪状态。\u003c/p\u003e\n\u003cp\u003ekubelet 使用就绪探针可以知道容器何时准备好接受请求流量，当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。\u003c/p\u003e\n\u003cp\u003ekubelet 使用启动探针来了解应用容器何时启动。如果配置了这类探针，你就可以控制容器在启动成功后再进行存活性和就绪态检查，确保这些存活、就绪探针不会影响应用的启动。启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。\u003c/p\u003e\n\u003ch2 id=\"probe-介绍\"\u003eprobe 介绍\u003c/h2\u003e\n\u003cp\u003e接下来我来讲解用的较多的 2 个探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针\u003c/p\u003e\n\u003ch3 id=\"livenessprobe\"\u003eLivenessProbe\u003c/h3\u003e\n\u003cp\u003e许多应用由于长时间运行导致程序异常，需要重启服务才能继续正常使用，Kubernetes 提供了存活探针 (LivenessProbe) 来发现并处理这种情况。\u003c/p\u003e\n\u003cp\u003e我们先创建一个 pod, pod 的文件如下：\u003c/p\u003e","title":"Kubernetes Health check"},{"content":"起因 最近在使用 rancher 导入外部 k8s 集群时，遇到了一个问题：在要导入的集群上执行命令后，创建的 pod 运行错误，错误日志大概如下：\nINFO: Environment: CATTLE_ADDRESS=100.66.209.198 CATTLE_CA_CHECKSUM= CATTLE_CLUSTER=true CATTLE_CLUSTER_AGENT_PORT=tcp://11.11.10.11:80 CATTLE_CLUSTER_AGENT_PORT_443_TCP=tcp://11.11.10.11:443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_ADDR=10.96.0.125 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PORT=443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_PORT_80_TCP=tcp://10.96.0.125:80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_ADDR=10.96.0.125 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PORT=80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_SERVICE_HOST=10.96.0.125 CATTLE_CLUSTER_AGENT_SERVICE_PORT=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTP=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTPS_INTERNAL=443 CATTLE_CLUSTER_REGISTRY= CATTLE_INGRESS_IP_DOMAIN=sslip.io CATTLE_INSTALL_UUID=333850e4-f500-43a2-a359-e1dfd94e4f35 CATTLE_INTERNAL_ADDRESS= CATTLE_IS_RKE=false CATTLE_K8S_MANAGED=true CATTLE_NODE_NAME=cattle-cluster-agent-55b9954958-5679q CATTLE_SERVER=https://xx.xx.vip CATTLE_SERVER_VERSION=v2.6.6 INFO: Using resolv.conf: search cattle-system.svc.cluster.local svc.cluster.local cluster.local nameserver 10.96.0.10 options ndots:5 ERROR: https://xx.xx.vip/ping is not accessible (Could not resolve host: xx.xx.vip) 可以很好的看出错误的原因是域名 dns 解析错误。\n解决 在发现问题后，可以根据错误日志进行相应的解决，我们先查看 coredns 的日志 kubectl logs deployment/coredns -n kube-system\n[ERROR] plugin/errors: 2 XX.XX.vip. A: read udp 100.108.11.198:32988-\u0026gt;100.100.2.136:53: i/o timeout [ERROR] plugin/errors: 2 XX.XX.vip. A: read udp 100.108.11.198:53477-\u0026gt;100.100.2.136:53: i/o timeout [ERROR] plugin/errors: 2 XX.XX.vip. AAAA: read udp 100.108.11.198:40436-\u0026gt;100.100.2.136:53: i/o timeout 可以看到相应域名解析错误，根据以前的经验，先重启 coredns 容器尝试是否能解决问题，重启后发现问题未能解决 (可能需要重启相应节点的机器。\n接下来通过查阅相关资料 issue，发现这是 rancher 一个很久的 bug 了，5 年了还是没解决，通过查阅评论发现了几种解决方法，就是修改 cattle-cluster-agent 的清单文件的 pod 模板内容，修改 pod 的配置为\nhostNetwork: true 这行配置添加后，pod 会使用主机的 dns 配置。\n还有一种方法是前面文章讲述的修改 hostAliases 来实现，这里就不过多讲述了。\n小结 本文讲述了 rancher 导入外部集群时遇到的 dns 解析的问题和相应的解决方法。\n参考 https://github.com/rancher/rancher/issues/16454 https://docs.rancher.cn/docs/rancher2/faq/install/_index/#error-httpsranchermyorgping-is-not-accessible-could-not-resolve-host-ranchermyorg https://github.com/rancher/rancher/issues/33272 ","permalink":"https://jasminides.com/posts/rancher-cattle-cluster-agent-could-not-resolve-host/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近在使用 rancher 导入外部 k8s 集群时，遇到了一个问题：在要导入的集群上执行命令后，创建的 pod 运行错误，错误日志大概如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eINFO: Environment: CATTLE_ADDRESS=100.66.209.198 CATTLE_CA_CHECKSUM= CATTLE_CLUSTER=true CATTLE_CLUSTER_AGENT_PORT=tcp://11.11.10.11:80 CATTLE_CLUSTER_AGENT_PORT_443_TCP=tcp://11.11.10.11:443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_ADDR=10.96.0.125 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PORT=443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_PORT_80_TCP=tcp://10.96.0.125:80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_ADDR=10.96.0.125 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PORT=80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_SERVICE_HOST=10.96.0.125 CATTLE_CLUSTER_AGENT_SERVICE_PORT=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTP=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTPS_INTERNAL=443 CATTLE_CLUSTER_REGISTRY= CATTLE_INGRESS_IP_DOMAIN=sslip.io CATTLE_INSTALL_UUID=333850e4-f500-43a2-a359-e1dfd94e4f35 CATTLE_INTERNAL_ADDRESS= CATTLE_IS_RKE=false CATTLE_K8S_MANAGED=true CATTLE_NODE_NAME=cattle-cluster-agent-55b9954958-5679q CATTLE_SERVER=https://xx.xx.vip CATTLE_SERVER_VERSION=v2.6.6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eINFO: Using resolv.conf: search cattle-system.svc.cluster.local svc.cluster.local cluster.local nameserver 10.96.0.10 options ndots:5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eERROR: https://xx.xx.vip/ping is not accessible (Could not resolve host: xx.xx.vip)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以很好的看出错误的原因是域名 dns 解析错误。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e在发现问题后，可以根据错误日志进行相应的解决，我们先查看 coredns 的日志 \u003ccode\u003ekubectl logs deployment/coredns -n kube-system\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e[ERROR] plugin/errors: 2 XX.XX.vip. A: read udp 100.108.11.198:32988-\u0026gt;100.100.2.136:53: i/o timeout\n[ERROR] plugin/errors: 2 XX.XX.vip. A: read udp 100.108.11.198:53477-\u0026gt;100.100.2.136:53: i/o timeout\n[ERROR] plugin/errors: 2 XX.XX.vip. AAAA: read udp 100.108.11.198:40436-\u0026gt;100.100.2.136:53: i/o timeout\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到相应域名解析错误，根据以前的经验，先重启 coredns 容器尝试是否能解决问题，重启后发现问题未能解决 (可能需要重启相应节点的机器。\u003c/p\u003e","title":"Rancher Cattle Cluster Agent Could not Resolve Host"},{"content":"前言 最近在使用 sealos 安装更新 k8s 的过程中发现了一个问题：nfo new cluster version v1.25.10 behind the current version v1.25.8。\n现在我来简单描述下过程：我想要将 k8s 版本从 v1.25.8 升级到 v1.25.10，运行更新命令：sealos run labring/kubernetes:v1.25.10-4.2.0 -f 后，出现了以下错误信息： 2023-06-09T11:30:06 info new cluster version v1.25.10 behind the current version v1.25.8 ,通过对错误信息的理解，发现提示 v1.25.10 版本比 v1.25.8 小，通过我对版本号的理解，这应该是个错误。\n发现及解决问题 发现了问题，接下来要寻找出现问题的代码和解决问题。通过 Github 的代码搜索功能搜索关键字 behind the current version 顺利找到问题代码所在。\n对找到的代码进行分析，发现是 versionutil.Compare(curversion, version) 方法出现了错误，我们来看看这个函数的代码：\nfunc Compare(v1, v2 string) bool { v1 = strings.Replace(v1, \u0026#34;v\u0026#34;, \u0026#34;\u0026#34;, -1) v2 = strings.Replace(v2, \u0026#34;v\u0026#34;, \u0026#34;\u0026#34;, -1) v1 = strings.Split(v1, \u0026#34;-\u0026#34;)[0] v2 = strings.Split(v2, \u0026#34;-\u0026#34;)[0] v1List := strings.Split(v1, \u0026#34;.\u0026#34;) v2List := strings.Split(v2, \u0026#34;.\u0026#34;) if len(v1List) != 3 || len(v2List) != 3 { logger.Error(\u0026#34;error version format %s %s\u0026#34;, v1, v2) return false } if v1List[0] \u0026gt; v2List[0] { return true } else if v1List[0] \u0026lt; v2List[0] { return false } if v1List[1] \u0026gt; v2List[1] { return true } else if v1List[1] \u0026lt; v2List[1] { return false } if v1List[2] \u0026gt;= v2List[2] { return true } return false } 通过对代码的分析，发现是对主次修订版本号对比时出现了问题，代码中是简单的使用了字符串比较，字符串数字比较会以字典序进行比较，所以会出现 \u0026ldquo;8\u0026rdquo; 大于 \u0026ldquo;10\u0026quot;的情况。正常的数字比较应该是将字符串转为数字进行相应比较。\n找到问题后，我就想着提个 PR 来解决问题，在提 PR 前，我将这段代码输给 AI 来看看还有哪些问题。\n我们根据 AI 发现的几个问题和前面的问题，进行了代码修改，修改后的代码如下：\nfunc Compare(v1, v2 string) bool { v1 = strings.Replace(v1, \u0026#34;v\u0026#34;, \u0026#34;\u0026#34;, -1) v2 = strings.Replace(v2, \u0026#34;v\u0026#34;, \u0026#34;\u0026#34;, -1) v1 = strings.Split(v1, \u0026#34;-\u0026#34;)[0] v2 = strings.Split(v2, \u0026#34;-\u0026#34;)[0] v1List := strings.Split(v1, \u0026#34;.\u0026#34;) v2List := strings.Split(v2, \u0026#34;.\u0026#34;) if len(v1List) != 3 || len(v2List) != 3 { logger.Error(\u0026#34;error version format %s %s\u0026#34;, v1, v2) return false } for i := 0; i \u0026lt; len(v1List); i++ { v1Num, _ := strconv.Atoi(v1List[i]) v2Num, _ := strconv.Atoi(v2List[i]) if v1Num \u0026gt; v2Num { return true } else if v1Num \u0026lt; v2Num { return false } } return true } 小结 本文讲述了在使用开源项目的过程中发现了问题并解决问题的过程。\n参考 https://github.com/labring/sealos/blob/57dbc7ee93c793357bf634ead878b480b03d7540/pkg/utils/versionutil/version.go https://github.com/labring/sealos/pull/3328/files ","permalink":"https://jasminides.com/posts/sealos-version-compare-error/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在使用 sealos 安装更新 k8s 的过程中发现了一个问题：\u003ccode\u003enfo new cluster version v1.25.10 behind the current version v1.25.8\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e现在我来简单描述下过程：我想要将 k8s 版本从 v1.25.8 升级到 v1.25.10，运行更新命令：\u003ccode\u003esealos run labring/kubernetes:v1.25.10-4.2.0 -f\u003c/code\u003e 后，出现了以下错误信息：\n\u003ccode\u003e2023-06-09T11:30:06 info new cluster version v1.25.10 behind the current version v1.25.8\u003c/code\u003e ,通过对错误信息的理解，发现提示 v1.25.10 版本比 v1.25.8 小，通过我对版本号的理解，这应该是个错误。\u003c/p\u003e\n\u003ch2 id=\"发现及解决问题\"\u003e发现及解决问题\u003c/h2\u003e\n\u003cp\u003e发现了问题，接下来要寻找出现问题的代码和解决问题。通过 Github 的代码搜索功能搜索关键字 \u003ccode\u003ebehind the current version\u003c/code\u003e 顺利找到问题代码所在。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/sealos_version_error/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e对找到的代码进行分析，发现是 versionutil.Compare(curversion, version) 方法出现了错误，我们来看看这个函数的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCompare\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReplace\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReplace\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error version format %s %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev1List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev2List\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过对代码的分析，发现是对主次修订版本号对比时出现了问题，代码中是简单的使用了字符串比较，字符串数字比较会以字典序进行比较，所以会出现 \u0026ldquo;8\u0026rdquo; 大于 \u0026ldquo;10\u0026quot;的情况。正常的数字比较应该是将字符串转为数字进行相应比较。\u003c/p\u003e","title":"sealos version compare error"},{"content":"前言 最近看了 k8s 的书，学习了一些新的知识，将会分几篇来介绍学习到的知识，本文来先介绍 k8s 中如何修改 pod 的 hosts 文件。\n我们知道当 DNS 出现问题时，可以向 Pod 的/etc/hosts 文件添加条目来提供主机名解析 Pod 级别覆盖。该如何向 hosts 文件中添加条目呢？可以使用 PodSpec 中的 HostAliases 字段添加自定义条目。\n虽然我们也可以直接进入 pod 修改 host 文件来实现，但这样 pod 重建时会被覆盖，所以我们应该使用 HostAliases 来进行修改，因为该文件会由 Kubelet 管理，并且 可以在 Pod 创建/重启过程中被重写。\n使用 我们该如何操作呢，接下来由我来介绍使用步骤：\n1 先创建 Deployment YAML 文件来创建后台运行的 busybox pod\napiVersion: apps/v1 kind: Deployment metadata: name: busybox-deployment spec: replicas: 1 selector: matchLabels: app: busybox template: metadata: labels: app: busybox spec: containers: - name: busybox image: busybox args: [ \u0026#34;sleep\u0026#34;, \u0026#34;3600\u0026#34; ] resources: limits: memory: \u0026#34;128Mi\u0026#34; cpu: \u0026#34;500m\u0026#34; requests: memory: \u0026#34;64Mi\u0026#34; cpu: \u0026#34;250m\u0026#34; volumeMounts: - name: busybox-volume mountPath: /data volumes: - name: busybox-volume emptyDir: {} 查看 pod ip\n2 查看 /etc/hosts 文件 cat /etc/hosts\n可以看到默认情况下 hosts 文件就只包含一些基础的信息\n3 向 hosts 文件添加内容，我们可以通过修改 .spec.hostAliases 来实现。\n修改 yaml 文件，我们修改 deployment 中的 pod 模板，将 overstarry 解析为 127.0.0.1 ,修改后的 deployment 文件如下：\napiVersion: apps/v1 kind: Deployment metadata: name: busybox-deployment spec: replicas: 1 selector: matchLabels: app: busybox template: metadata: labels: app: busybox spec: hostAliases: - hostnames: - overstarry.vip ip: 127.0.0.1 containers: - name: busybox image: busybox args: [ \u0026#34;sleep\u0026#34;, \u0026#34;3600\u0026#34; ] resources: limits: memory: \u0026#34;128Mi\u0026#34; cpu: \u0026#34;500m\u0026#34; requests: memory: \u0026#34;64Mi\u0026#34; cpu: \u0026#34;250m\u0026#34; volumeMounts: - name: busybox-volume mountPath: /data volumes: - name: busybox-volume emptyDir: {} 我们查看新的 pod 中的/etc/hosts 文件，我们可以看到新的内容已经添加成功了，\n小结 本文介绍了如何修改 pod 的 hosts 文件，以应对特殊情况下需要修改 hosts 文件的情况。\n","permalink":"https://jasminides.com/posts/kubernetes-pod-%E4%BF%AE%E6%94%B9-hosts-%E6%96%87%E4%BB%B6/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近看了 k8s 的书，学习了一些新的知识，将会分几篇来介绍学习到的知识，本文来先介绍 k8s 中如何修改 pod 的 hosts 文件。\u003c/p\u003e\n\u003cp\u003e我们知道当 DNS 出现问题时，可以向 Pod 的/etc/hosts 文件添加条目来提供主机名解析 Pod 级别覆盖。该如何向 hosts 文件中添加条目呢？可以使用 PodSpec 中的 HostAliases 字段添加自定义条目。\u003c/p\u003e\n\u003cp\u003e虽然我们也可以直接进入 pod 修改 host 文件来实现，但这样 pod 重建时会被覆盖，所以我们应该使用 HostAliases 来进行修改，因为该文件会由 Kubelet 管理，并且 可以在 Pod 创建/重启过程中被重写。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e我们该如何操作呢，接下来由我来介绍使用步骤：\u003c/p\u003e\n\u003cp\u003e1 先创建 Deployment YAML 文件来创建后台运行的 busybox pod\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapps/v1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eDeployment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox-deployment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eselector\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ematchLabels\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eargs\u003c/span\u003e: [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sleep\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3600\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003elimits\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;128Mi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;500m\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003erequests\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003ememory\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;64Mi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003ecpu\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;250m\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox-volume\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebusybox-volume\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eemptyDir\u003c/span\u003e: {}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e查看 pod ip\u003c/p\u003e","title":"Kubernetes pod 修改 hosts 文件"},{"content":"前言 最近需要忽略请求 uri 大小写，即不管 uri 的大小写都返回小写 uri 所请求的响应内容，例如请求 xx.vip/A 实际请求 xx.vip/a, 本文主要以 apisix 来讲解如何实现这个功能。\n解决 遇到这个需求，首先肯定采用 apisix 的插件来实现，根据前面多次的经验，这个功能应该可以使用 serverless 插件中的 serverless-pre-function 插件来实现，具体的流程如下：\n1 获取请求的 uri 2 将 uri 转为小写 3 修改请求的 uri\n具体的插件内容如下：\n\u0026#34;serverless-pre-function\u0026#34;: { \u0026#34;_meta\u0026#34;: { \u0026#34;disable\u0026#34;: false }, \u0026#34;functions\u0026#34;: [ \u0026#34;return function(conf, ctx) local uri = ctx.var.uri;ctx.var.uri= string.lower(uri);ngx.log(ngx.ERR, \\\u0026#34;match uri \\\u0026#34;, ctx.var.uri ); end\u0026#34; ], \u0026#34;phase\u0026#34;: \u0026#34;rewrite\u0026#34; } 添加插件后，再次请求路径，发现请求结果还是没有变，查看日志发现 uri 修改成功了，不知为何还是没有修改成功。\n后面又仔细研究了 proxy-rewrite 插件中修改 uri 的代码，发现它是使用了 nginx 标准的函数 ngx.req.set_uri 来赋值新的 uri。\n修改后的插件代码如下：\n\u0026#34;serverless-pre-function\u0026#34;: { \u0026#34;_meta\u0026#34;: { \u0026#34;disable\u0026#34;: false }, \u0026#34;functions\u0026#34;: [ \u0026#34;return function(conf, ctx) local uri = ctx.var.uri;uri= string.lower(uri);ngx.req.set_uri(uri);ngx.log(ngx.ERR, \\\u0026#34;match uri \\\u0026#34;, ctx.var.uri ); end\u0026#34; ], \u0026#34;phase\u0026#34;: \u0026#34;rewrite\u0026#34; } 具体就是请求经过 serverless-pre-function 插件会将 uri 进行重写，并将重写后的 uri 赋值。\n小结 本文主要就是讲述如何使用 apisix 插件将请求的 uri 忽略大小写，统一使用小写 uri，可能还有别的方法，等我研究完，再更新文章。\n参考 https://apisix.apache.org/docs/apisix/plugins/serverless/ https://github.com/fengxsong/apisix/blob/4977cd05dbffc5f3791d33af9da2ff3bb482f998/apisix/plugins/proxy-rewrite.lua#L337 https://github.com/apache/apisix/issues/9556 ","permalink":"https://jasminides.com/posts/apisix-%E5%BF%BD%E7%95%A5-uri-%E5%A4%A7%E5%B0%8F%E5%86%99/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近需要忽略请求 uri 大小写，即不管 uri 的大小写都返回小写 uri 所请求的响应内容，例如请求 xx.vip/A 实际请求 xx.vip/a, 本文主要以 apisix 来讲解如何实现这个功能。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e遇到这个需求，首先肯定采用 apisix 的插件来实现，根据前面多次的经验，这个功能应该可以使用 serverless 插件中的  serverless-pre-function 插件来实现，具体的流程如下：\u003c/p\u003e\n\u003cp\u003e1 获取请求的 uri\n2 将 uri 转为小写\n3 修改请求的 uri\u003c/p\u003e\n\u003cp\u003e具体的插件内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;serverless-pre-function\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;_meta\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;disable\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;functions\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;return function(conf, ctx)  local uri = ctx.var.uri;ctx.var.uri= string.lower(uri);ngx.log(ngx.ERR, \\\u0026#34;match uri \\\u0026#34;,  ctx.var.uri ); end\u0026#34;\u003c/span\u003e      ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;phase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;rewrite\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e添加插件后，再次请求路径，发现请求结果还是没有变，查看日志发现 uri 修改成功了，不知为何还是没有修改成功。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/static/img/apisix_uri%e5%bf%bd%e7%95%a5/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e后面又仔细研究了 proxy-rewrite 插件中修改 uri 的代码，发现它是使用了 nginx 标准的函数 \u003ccode\u003engx.req.set_uri\u003c/code\u003e 来赋值新的 uri。\u003c/p\u003e","title":"Apisix 忽略 uri 大小写"},{"content":"简介 sqlc 可以生成从 SQL 生成类型安全代码。它的工作原理是：\n使用 SQL 书写查询语句。 运行 sqlc 生成 Go 代码，该代码为这些查询提供类型安全的接口。 在应用程序代码中调用生成的代码与数据库进行交互。 安装 sqlc 有多种安装方式：\nmacOS:\nbrew install sqlc\nUbuntu:\nsudo snap install sqlc\ngo 安装：\n# Go \u0026gt;= 1.17: go install github.com/kyleconroy/sqlc/cmd/sqlc@latest # Go \u0026lt; 1.17: go get github.com/kyleconroy/sqlc/cmd/sqlc docker 安装：\ndocker pull kjconroy/sqlc\n其它：\nhttps://github.com/kyleconroy/sqlc/releases\n入门使用 插件 sqlc.yaml 首先创建 sqlc.yaml 文件，sqlc 会在当前目录下查找 sqlc.yaml 或 sqlc.json 文件。\n# sqlc.yaml version: 1 packages: - path: \u0026#34;tutorial\u0026#34; name: \u0026#34;tutorial\u0026#34; engine: \u0026#34;mysql\u0026#34; schema: \u0026#34;schema.sql\u0026#34; queries: \u0026#34;query.sql\u0026#34; 创建 sql 文件 sqlc 需要得知数据库表结构和相应的 sql 语句，我们创建 schema.sql 定义表结构：\nCREATE TABLE games ( id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, name text NOT NULL, url text ); 创建 query.sql 包含需要的 sql 语句：\n-- name: Getgame :one SELECT * FROM games WHERE id = ? LIMIT 1; -- name: ListGames :many SELECT * FROM games ORDER BY name; -- name: CreateGame :execresult INSERT INTO games ( name, url ) VALUES ( ?, ? ) -- name: DeleteGame :exec DELETE FROM games WHERE id = ?; -- name: UpdateGame :exec UPDATE games set name = ?, url = ? WHERE id = ?; 生成代码 接下来使用 sqlc generate,在根目录下会生成一个 tutorial 目录，生成后项目目录如下：\n. ├── go.mod ├── query.sql ├── schema.sql ├── sqlc.yaml └── tutorial ├── db.go ├── models.go └── query.sql.go 测试 接下来编写代码来使用生成的数据库代码：\n--- title: \u0026#34;sqlc 初体验\u0026#34; date: 2023-05-20T15:54:29+08:00 draft: true tags: [ \u0026#34;sqlc\u0026#34;,\u0026#34;database\u0026#34;,\u0026#34;sql\u0026#34; ] --- ## 简介 sqlc 可以生成从 SQL 生成类型安全代码。它的工作原理是: * 使用 SQL 书写查询语句。 * 运行 sqlc 生成 Go 代码，该代码为这些查询提供类型安全的接口。 * 在应用程序代码中调用生成的代码与数据库进行交互。 ## 安装 sqlc 有多种安装方式: macOS: ` brew install sqlc ` Ubuntu: ` sudo snap install sqlc ` go安装: ```console # Go \u0026gt;= 1.17: go install github.com/kyleconroy/sqlc/cmd/sqlc@latest # Go \u0026lt; 1.17: go get github.com/kyleconroy/sqlc/cmd/sqlc docker安装:\ndocker pull kjconroy/sqlc\n其它:\nhttps://github.com/kyleconroy/sqlc/releases\n入门使用 插件 sqlc.yaml 首先创建 sqlc.yaml 文件, sqlc 会在当前目录下查找 sqlc.yaml 或 sqlc.json文件。\n# sqlc.yaml version: 1 packages: - path: \u0026#34;tutorial\u0026#34; name: \u0026#34;tutorial\u0026#34; engine: \u0026#34;mysql\u0026#34; schema: \u0026#34;schema.sql\u0026#34; queries: \u0026#34;query.sql\u0026#34; 创建sql文件 sqlc需要得知数据库表结构和相应的sql语句，我们创建schema.sql定义表结构:\nCREATE TABLE games ( id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, name text NOT NULL, url text ); 创建 query.sql 包含需要的sql语句:\n-- name: Getgame :one SELECT * FROM games WHERE id = ? LIMIT 1; -- name: ListGames :many SELECT * FROM games ORDER BY name; -- name: CreateGame :execresult INSERT INTO games ( name, url ) VALUES ( ?, ? ) -- name: DeleteGame :exec DELETE FROM games WHERE id = ?; -- name: UpdateGame :exec UPDATE games set name = ?, url = ? WHERE id = ?; 生成代码 接下来使用 sqlc generate,在根目录下会生成一个tutorial目录，生成后项目目录如下:\n. ├── go.mod ├── query.sql ├── schema.sql ├── sqlc.yaml └── tutorial ├── db.go ├── models.go └── query.sql.go 测试 接下来编写代码来使用生成的数据库代码:\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;sqlc-demo/tutorial\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; ) func run() error { ctx := context.Background() db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;user:password@/dbname\u0026#34;) if err != nil { return err } queries := tutorial.New(db) games, err := queries.ListGames(ctx) if err != nil { return err } log.Println(games) result, err := queries.CreateGame(ctx, tutorial.CreateGameParams{ Name: \u0026#34;game1\u0026#34;, Url: sql.NullString{ String: \u0026#34;www.google.com\u0026#34;, Valid: true, }, }) if err != nil { return err } insertedGameID, err := result.LastInsertId() if err != nil { return err } log.Println(insertedGameID) game, err := queries.GetGame(ctx, insertedGameID) if err != nil { return err } log.Println(reflect.DeepEqual(insertedGameID, game.ID)) return nil } func main() { if err := run(); err != nil { log.Fatal(err) } } 总结 本文简单使用 sqlc 根据定义的sql语句来生成go代码，相比于ent等orm, sqlc 是根据定义的sql语句生成代码，如果数据库代码出现问题，更容易发现问题，也容易进行数据库审计。\n参考 https://docs.sqlc.dev/en/stable/index.html https://xargin.com/you-should-avoid-orm-and-sql-builder/ ## 参考 * https://docs.sqlc.dev/en/stable/index.html ","permalink":"https://jasminides.com/posts/sqlc-%E5%88%9D%E4%BD%93%E9%AA%8C/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003esqlc 可以生成从 SQL 生成类型安全代码。它的工作原理是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 SQL 书写查询语句。\u003c/li\u003e\n\u003cli\u003e运行 sqlc 生成 Go 代码，该代码为这些查询提供类型安全的接口。\u003c/li\u003e\n\u003cli\u003e在应用程序代码中调用生成的代码与数据库进行交互。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003esqlc 有多种安装方式：\u003c/p\u003e\n\u003cp\u003emacOS:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ebrew install sqlc\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eUbuntu:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo snap install sqlc\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003ego 安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# Go \u0026gt;\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1.17:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install github.com/kyleconroy/sqlc/cmd/sqlc@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# Go \u0026lt; 1.17:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/kyleconroy/sqlc/cmd/sqlc\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003edocker 安装：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edocker pull kjconroy/sqlc\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其它：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttps://github.com/kyleconroy/sqlc/releases\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"入门使用\"\u003e入门使用\u003c/h2\u003e\n\u003ch3 id=\"插件-sqlcyaml\"\u003e插件 sqlc.yaml\u003c/h3\u003e\n\u003cp\u003e首先创建 sqlc.yaml 文件，sqlc 会在当前目录下查找 sqlc.yaml 或 sqlc.json 文件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# sqlc.yaml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackages\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tutorial\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tutorial\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eengine\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mysql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eschema\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;schema.sql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003equeries\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;query.sql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"创建-sql-文件\"\u003e创建 sql 文件\u003c/h3\u003e\n\u003cp\u003esqlc 需要得知数据库表结构和相应的 sql 语句，我们创建 schema.sql 定义表结构：\u003c/p\u003e","title":"sqlc 初体验"},{"content":"前言 前段时间在使用 apisix 添加路由时，需要将 http 转为 https, 在配置 http_to_https 后，访问相应网址时发现 https 的端口不是我们所配置的默认端口 443，而是 9443 端口。\n可以看到访问 http://localhost 会跳转至错误的地址：https://localhost:9443/ ,正确的地址应该是 https://localhost，这是怎么回事呢？\n分析 接下来我来简单对问题进行简单分析。\n我是采用 docker 的方式部署的 apisix，这是我们的配置文件：\nversion: \u0026#34;3\u0026#34; services: apisix-dashboard: image: apache/apisix-dashboard:3.0.0-alpine restart: always volumes: - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml ports: - \u0026#34;9000:9000\u0026#34; networks: apisix: apisix: image: apache/apisix:${APISIX_IMAGE_TAG:-3.2.0-debian} restart: always volumes: - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro depends_on: - etcd ##network_mode: host ports: - \u0026#34;9180:9180/tcp\u0026#34; - \u0026#34;80:9080/tcp\u0026#34; - \u0026#34;9091:9091/tcp\u0026#34; - \u0026#34;443:9443/tcp\u0026#34; - \u0026#34;9092:9092/tcp\u0026#34; networks: apisix: etcd: image: bitnami/etcd:3.4.15 restart: always volumes: - etcd_data:/bitnami/etcd environment: ETCD_ENABLE_V2: \u0026#34;true\u0026#34; ALLOW_NONE_AUTHENTICATION: \u0026#34;yes\u0026#34; ETCD_ADVERTISE_CLIENT_URLS: \u0026#34;http://etcd:2379\u0026#34; ETCD_LISTEN_CLIENT_URLS: \u0026#34;http://0.0.0.0:2379\u0026#34; ports: - \u0026#34;2379:2379/tcp\u0026#34; networks: apisix: web1: image: nginx:1.19.0-alpine restart: always volumes: - ./upstream/web1.conf:/etc/nginx/nginx.conf ports: - \u0026#34;9081:80/tcp\u0026#34; environment: - NGINX_PORT=80 networks: apisix: networks: apisix: driver: bridge volumes: etcd_data: driver: local 可以看到我们将 apisix 容器的 http 端口和 https 端口映射为 80 和 443，按照常理来说，http_to_https 后的端口应该也是 443 端口才对。我猜测重定向时，apisix 还是采用配置文件中设定的 https 端口才导致跳转的 url 端口错误。\n解决 经过搜寻相关 issue，发现了采用端口的顺序； 于是有几种解决方法：\n1 配置 plugin_attr.redirect.https_port 属性\n2 修改配置文件中的默认 https 端口\n3 使用 serverless 插件，进行相应的重定向处理\n参考 https://github.com/apache/apisix/pull/7065 https://github.com/apache/apisix/issues/7011 https://github.com/apache/apisix/issues/8405 ","permalink":"https://jasminides.com/posts/apisix-docker-%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E9%87%8D%E5%AE%9A%E5%90%91%E7%AB%AF%E5%8F%A3%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e前段时间在使用 apisix 添加路由时，需要将 http 转为 https, 在配置 http_to_https 后，访问相应网址时发现 https\n的端口不是我们所配置的默认端口 443，而是 9443 端口。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e9%87%8d%e5%ae%9a%e5%90%91/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到访问  http://localhost 会跳转至错误的地址：https://localhost:9443/ ,正确的地址应该是  https://localhost，这是怎么回事呢？\u003c/p\u003e\n\u003ch2 id=\"分析\"\u003e分析\u003c/h2\u003e\n\u003cp\u003e接下来我来简单对问题进行简单分析。\u003c/p\u003e\n\u003cp\u003e我是采用 docker 的方式部署的 apisix，这是我们的配置文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eapisix-dashboard\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapache/apisix-dashboard:3.0.0-alpine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9000:9000\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eapache/apisix:${APISIX_IMAGE_TAG:-3.2.0-debian}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003edepends_on\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003eetcd\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e##network_mode: host\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9180:9180/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;80:9080/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9091:9091/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;443:9443/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9092:9092/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eetcd\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebitnami/etcd:3.4.15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003eetcd_data:/bitnami/etcd\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eETCD_ENABLE_V2\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eALLOW_NONE_AUTHENTICATION\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eETCD_ADVERTISE_CLIENT_URLS\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://etcd:2379\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eETCD_LISTEN_CLIENT_URLS\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://0.0.0.0:2379\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2379:2379/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eweb1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.19.0-alpine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./upstream/web1.conf:/etc/nginx/nginx.conf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;9081:80/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003eNGINX_PORT=80\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebridge\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eetcd_data\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003elocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到我们将 apisix 容器的 http 端口和 https 端口映射为 80 和 443，按照常理来说，http_to_https\n后的端口应该也是 443 端口才对。我猜测重定向时，apisix 还是采用配置文件中设定的 https 端口才导致跳转的 url 端口错误。\u003c/p\u003e","title":"Apisix Docker 部署网站重定向端口错误问题"},{"content":"WebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C / C ++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。\nGo 从 1.11 版本就开始支持将 Go 源码编译为 wasm 二进制文件，并在支持 wasm 的浏览器环境中运行。\n不过 WebAssembly 绝不仅仅被设计为仅限于在 Web 浏览器中运行，核心的 WebAssembly 语言是独立于其周围环境的，WebAssembly 完全可以通过 API 与外部世界互动。在 Web 上，它自然使用浏览器提供的现有 Web API。然而，在浏览器之外，之前还没有一套标准的 API 可以让 WebAssembly 程序使用。这使得创建真正可移植的非 Web WebAssembly 程序变得困难。WebAssembly System Interface(WASI) 是一个填补这一空白的倡议，它有一套干净的 API，可以由多个引擎在多个平台上实现，并且不依赖于浏览器的功能（尽管它们仍然可以在浏览器中运行）。\nGo 1.21 将增加对 WASI 的支持，初期先支持 WASI Preview1 版本，之后会支持 WASI Preview2 版本，直至最终 WASI API 版本发布！\ngo 编译支持 wasi 的程序 怎么样才能编译支持 wasi 的程序呢？我们可以使用 GOOS=wasip1 GOARCH=wasm 将 Go 源码编译为支持 WASI 的 wasm 程序。下面是一个例子：\n我们先编写一个简单的 go 程序：\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 使用以下命令编译：\nGOARCH=wasm GOOS=wasip1 gotip build -o main.wasm main.go\n编译后会得到 wasm 程序 main.wasm。\n我们可以使用 wazero 运行编译后的 wasm 程序：\n$ curl https://wazero.io/install.sh $ wazero run main.wasm hello 其它 wasi 接口的支持是近期才添加的功能，我还尝试了一些其它的 go 程序，发现只有部分程序能够顺利运行，猜测是对 wasi 的支持不完全导致的。\n参考 https://webassembly.org/ https://wasi.dev/ https://github.com/golang/go/issues/58141#issuecomment-1516645801 ","permalink":"https://jasminides.com/posts/go-wasi/","summary":"\u003cp\u003eWebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C / C\n++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。\u003c/p\u003e\n\u003cp\u003eGo 从 1.11 版本就开始支持将 Go 源码编译为 wasm 二进制文件，并在支持 wasm 的浏览器环境中运行。\u003c/p\u003e\n\u003cp\u003e不过 WebAssembly 绝不仅仅被设计为仅限于在 Web 浏览器中运行，核心的 WebAssembly 语言是独立于其周围环境的，WebAssembly 完全可以通过 API 与外部世界互动。在 Web 上，它自然使用浏览器提供的现有 Web API。然而，在浏览器之外，之前还没有一套标准的 API 可以让 WebAssembly 程序使用。这使得创建真正可移植的非 Web WebAssembly 程序变得困难。WebAssembly System Interface(WASI) 是一个填补这一空白的倡议，它有一套干净的 API，可以由多个引擎在多个平台上实现，并且不依赖于浏览器的功能（尽管它们仍然可以在浏览器中运行）。\u003c/p\u003e\n\u003cp\u003eGo 1.21 将增加对 WASI 的支持，初期先支持 WASI Preview1 版本，之后会支持 WASI Preview2 版本，直至最终 WASI API 版本发布！\u003c/p\u003e\n\u003ch2 id=\"go-编译支持-wasi-的程序\"\u003ego 编译支持 wasi 的程序\u003c/h2\u003e\n\u003cp\u003e怎么样才能编译支持 wasi 的程序呢？我们可以使用 GOOS=wasip1 GOARCH=wasm 将 Go 源码编译为支持 WASI 的 wasm 程序。下面是一个例子：\u003c/p\u003e","title":"Go wasi"},{"content":"前言 说起反向代理，大家应该都不陌生，是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。常见的反向代理有 Nginx,HAProxy,Apisix 等。\n接下来介绍如何使用 go 实现一个反向代理服务器。\ngolang 实现 使用 golang 实现反向代理非常简单，标准库 net/http/httputil 提供了反向代理的方法可以让我们方便的实现反向代理，使我们可以很快的实现一个简单的反向代理服务器。\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/http/httputil\u0026#34; \u0026#34;net/url\u0026#34; ) func NewProxy(targetHost string) (*httputil.ReverseProxy, error) { url, err := url.Parse(targetHost) if err != nil { return nil, err } return httputil.NewSingleHostReverseProxy(url), nil } func ProxyRequestHandler(proxy *httputil.ReverseProxy) func(http.ResponseWriter, *http.Request) { return func(w http.ResponseWriter, r *http.Request) { proxy.ServeHTTP(w, r) } } func main() { proxy, err := NewProxy(\u0026#34;https://overstarry.vip\u0026#34;) if err != nil { panic(err) } http.HandleFunc(\u0026#34;/\u0026#34;, ProxyRequestHandler(proxy)) log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil)) } 这段代码将到达我们代理服务器的任何请求都会被代理到 https://overstarry.vip。我们运行代码，访问网站，发现 403 Forbidden 好像请求被拦截了，应该是源网站进行了请求校验，这该怎么处理呢？通过查阅资料得知，我们需要将 host 传递过去，修改后的代码如下：\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/http/httputil\u0026#34; \u0026#34;net/url\u0026#34; ) func NewProxy(targetHost string) (*httputil.ReverseProxy, error) { url, err := url.Parse(targetHost) if err != nil { return nil, err } return httputil.NewSingleHostReverseProxy(url), nil } func ProxyRequestHandler(proxy *httputil.ReverseProxy) func(http.ResponseWriter, *http.Request) { return func(w http.ResponseWriter, r *http.Request) { r.Host = \u0026#34;overstarry.vip\u0026#34; proxy.ServeHTTP(w, r) } } func main() { proxy, err := NewProxy(\u0026#34;https://overstarry.vip\u0026#34;) if err != nil { panic(err) } http.HandleFunc(\u0026#34;/\u0026#34;, ProxyRequestHandler(proxy)) log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil)) } 现在运行代码即可正常访问了。\n修改响应 如果我们需要修改服务器返回的响应，要怎么处理呢？我们可以定义一个 modifyResponse 函数用来处理响应，还可以定义 ErrorHandler 来处理响应的错误。\n比如我们可以自定义处理服务器返回的错误，比如记录 404 请求的详情数据。代码：\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/http/httputil\u0026#34; \u0026#34;net/url\u0026#34; ) var ( NOT_FOUND = errors.New(\u0026#34;not found\u0026#34;) ) func NewProxy(targetHost string) (*httputil.ReverseProxy, error) { url, err := url.Parse(targetHost) if err != nil { return nil, err } proxy := httputil.NewSingleHostReverseProxy(url) proxy.ModifyResponse = modifyResponse() proxy.ErrorHandler = errorHandler() return proxy, nil } func ProxyRequestHandler(proxy *httputil.ReverseProxy) func(http.ResponseWriter, *http.Request) { return func(w http.ResponseWriter, r *http.Request) { r.Host = \u0026#34;overstarry.vip\u0026#34; proxy.ServeHTTP(w, r) } } func main() { proxy, err := NewProxy(\u0026#34;https://overstarry.vip\u0026#34;) if err != nil { panic(err) } http.HandleFunc(\u0026#34;/\u0026#34;, ProxyRequestHandler(proxy)) log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil)) } func errorHandler() func(http.ResponseWriter, *http.Request, error) { return func(w http.ResponseWriter, req *http.Request, err error) { if errors.Is(err, NOT_FOUND) { w.WriteHeader(http.StatusNotFound) } fmt.Printf(\u0026#34;Got error while modifying response: %v \\n\u0026#34;, err) return } } func modifyResponse() func(*http.Response) error { return func(resp *http.Response) error { if resp.StatusCode == 404 { return NOT_FOUND } return nil } } 此段代码将源服务器返回的 404 进行了特殊的处理。\n处理修改服务器返回的响应，我们还可以修改发生给服务器的请求，这里就不过多介绍了，想了解的话可以查看 Director 字段。\n小结 本文讲解了 go 如何实现一个简单的反向代理服务，并如何修改服务器返回的响应等的方法，可以看出 go 相比其他语言，可以很方便的实现这个功能。\n","permalink":"https://jasminides.com/posts/go-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e说起反向代理，大家应该都不陌生，是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。常见的反向代理有 Nginx,HAProxy,Apisix 等。\u003c/p\u003e\n\u003cp\u003e接下来介绍如何使用 go 实现一个反向代理服务器。\u003c/p\u003e\n\u003ch2 id=\"golang-实现\"\u003egolang 实现\u003c/h2\u003e\n\u003cp\u003e使用 golang 实现反向代理非常简单，标准库 net/http/httputil 提供了反向代理的方法可以让我们方便的实现反向代理，使我们可以很快的实现一个简单的反向代理服务器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http/httputil\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/url\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewProxy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetHost\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverseProxy\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetHost\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewSingleHostReverseProxy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProxyRequestHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverseProxy\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeHTTP\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewProxy\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://overstarry.vip\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandleFunc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eProxyRequestHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListenAndServe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:8080\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这段代码将到达我们代理服务器的任何请求都会被代理到 \u003ca href=\"https://overstarry.vip\"\u003ehttps://overstarry.vip\u003c/a\u003e。我们运行代码，访问网站，发现 403 Forbidden 好像请求被拦截了，应该是源网站进行了请求校验，这该怎么处理呢？通过查阅资料得知，我们需要将 host 传递过去，修改后的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http/httputil\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/url\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewProxy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetHost\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverseProxy\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetHost\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewSingleHostReverseProxy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProxyRequestHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttputil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverseProxy\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHost\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;overstarry.vip\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeHTTP\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewProxy\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://overstarry.vip\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandleFunc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eProxyRequestHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eproxy\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListenAndServe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:8080\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在运行代码即可正常访问了。\u003c/p\u003e","title":"Go 实现简单反向代理"},{"content":"本文讲解如何使用 dns 授权方式申请 google cloud 证书，通过查阅官方文档可以得知可以使用 gcloud 和 Certificate Manager API 来申请证书，本文使用 gcloud 命令行工具来执行步骤。\n创建 DNS 授权 第一步是创建 DNS 授权，使用以下命令来创建：\ngcloud certificate-manager dns-authorizations create AUTHORIZATION_NAME \\ --domain=\u0026#34;DOMAIN_NAME\u0026#34; gcloud certificate-manager dns-authorizations describe AUTHORIZATION_NAME 需要将 AUTHORIZATION_NAME 和 DOMAIN_NAME 分别替换为 dns 授权的名称和相应的域名。\n先创建 dns 授权然后查看授权的详细信息\ngcloud certificate-manager dns-authorizations create overstarry --domain=\u0026#34;overstarry.vip\u0026#34; gcloud certificate-manager dns-authorizations describe overstarry 根据返回的 cname 信息，需要到相应的域名解析中添加 cname 记录。\n创建引用 DNS 授权的 Google 管理的证书 接下来 创建引用 DNS 授权的 Google 管理的证书，使用以下命令创建：\ngcloud certificate-manager certificates create CERTIFICATE_NAME \\ --domains=DOMAIN_NAME --dns-authorizations=AUTHORIZATION_NAME CERTIFICATE_NAME 是证书名称，DOMAIN_NAME 域名，AUTHORIZATION_NAME 是 dns 授权名称。\ngcloud certificate-manager certificates create overstarry \\ --domains=*.overstarry.vip --dns-authorizations=overstarry 接下来使用 gcloud certificate-manager certificates describe CERTIFICATE_NAME 来查看刚刚创建的证书的状态。会返回以下类似输出：\ncertificatePem: myPEM createTime: \u0026#39;2021-10-20T12:19:53.370778666Z\u0026#39; expireTime: \u0026#39;2022-05-07T05:03:49Z\u0026#39; managed: authorizationAttemptInfo: - domain: example.com state: AUTHORIZED dnsAuthorizations: - projects/my-project/locations/global/dnsAuthorizations/myAuth domains: - example.com state: ACTIVE name: projects/myProject/locations/global/certificates/myCert scope: myScope sanDnsnames: - example.com updateTime: \u0026#39;2021-10-20T12:19:55.083385630Z\u0026#39; ACTIVE 状态表示证书已经签发成功了，如果 state 是 PROVISIONING 状态，说明 dns-auth 已经验证过，现在需要等待签发证书，需要等待 10-30 分钟。\n创建证书 maps 使用以下命令创建证书映射：\ngcloud certificate-manager maps create CERTIFICATE_MAP_NAME CERTIFICATE_MAP_NAME 为证书映射的名称。\ngcloud certificate-manager maps create overstarry 创建证书 maps entries 使用以下命令创建证书 maps entries:\ngcloud certificate-manager maps entries create CERTIFICATE_MAP_ENTRY_NAME \\ --map=\u0026#34;CERTIFICATE_MAP_NAME\u0026#34; \\ --certificates=\u0026#34;CERTIFICATE_NAME\u0026#34; \\ --hostname=\u0026#34;HOSTNAME\u0026#34; CERTIFICATE_MAP_ENTRY_NAME 是描述此证书映射条目的唯一名称。 CERTIFICATE_MAP_NAME 是此证书映射条目附加到的证书映射的名称。 CERTIFICATE_NAME 是要与此证书映射条目关联的证书的名称。 HOSTNAME 是要与此证书映射条目关联的主机名。 gcloud certificate-manager maps entries create overstarry \\ --map=\u0026#34;overstarry\u0026#34; --certificates=\u0026#34;overstarry\u0026#34; \\ --hostname=\u0026#34;*.overstarry.vip\u0026#34; maps 附加到 lb 上 现在需要将 maps 附加到 lb 上：\ngcloud compute target-https-proxies update PROXY_NAME \\ --certificate-map=\u0026#34;CERTIFICATE_MAP_NAME\u0026#34; PROXY_NAME 是目标代理的名称。CERTIFICATE_MAP_NAME 是引用您的证书映射条目及其关联证书的证书映射的名称。\ngcloud compute target-https-proxies update xx-target-proxy-2 \\ --certificate-map=\u0026#34;overstarry\u0026#34; 过了一会就可以看到证书已经成功生效了。\n参考 https://cloud.google.com/certificate-manager/docs/deploy-google-managed-dns-auth ","permalink":"https://jasminides.com/posts/certificatemanager-%E4%BD%BF%E7%94%A8-dns-%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6--gcloud-%E6%96%B9%E5%BC%8F/","summary":"\u003cp\u003e本文讲解如何使用 dns 授权方式申请 google cloud 证书，通过查阅官方文档可以得知可以使用 gcloud 和  Certificate Manager API 来申请证书，本文使用 gcloud 命令行工具来执行步骤。\u003c/p\u003e\n\u003ch2 id=\"创建-dns-授权\"\u003e创建 DNS 授权\u003c/h2\u003e\n\u003cp\u003e第一步是创建 DNS 授权，使用以下命令来创建：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egcloud certificate-manager dns-authorizations create AUTHORIZATION_NAME \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --domain\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DOMAIN_NAME\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egcloud certificate-manager dns-authorizations describe AUTHORIZATION_NAME\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要将 AUTHORIZATION_NAME 和 DOMAIN_NAME 分别替换为 dns 授权的名称和相应的域名。\u003c/p\u003e\n\u003cp\u003e先创建 dns 授权然后查看授权的详细信息\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egcloud certificate-manager dns-authorizations create overstarry --domain\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;overstarry.vip\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egcloud certificate-manager dns-authorizations describe overstarry\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/googledns.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e根据返回的 cname 信息，需要到相应的域名解析中添加 cname 记录。\u003c/p\u003e\n\u003ch2 id=\"创建引用-dns-授权的-google-管理的证书\"\u003e创建引用 DNS 授权的 Google 管理的证书\u003c/h2\u003e\n\u003cp\u003e接下来 创建引用 DNS 授权的 Google 管理的证书，使用以下命令创建：\u003c/p\u003e","title":"CertificateManager 使用 dns 授权申请证书 -- gcloud 方式"},{"content":"最近在研究使用 google cloud 的 cdn 服务，本文就来讲解如何清除 cdn 的缓存。\n本文介绍了几种清除 cdn 缓存的方法。\ngoogle cloud console 清除 第一种也是最简单的，就是直接从 google cloud console 后台进行操作，我们打开 console 后台，选择网络服务，点击负载均衡界面，选择我们要清除的 cdn 缓存所使用的负载均衡器，点击缓存页面， 输入想要 cdn 节点清除的路径即可。过了一会，就可以看到操作成功，相应的文件已经失效。 Google Cloud CLI 命令 第二种方法是使用 Google Cloud CLI 使 cdn 缓存文件失效。\nGoogle Cloud CLI 安装 该怎么安装 Google Cloud CLI 呢，有 2 个办法：1) 直接下载安装二进制文件 2) 使用 Cloud Shell. 本文是使用 Cloud Shell 进行的操作。\n使缓存内容失效 1 使用 gcloud compute url-maps list 列出目前所使用的负载均衡器\n2 使用 gcloud compute url-maps invalidate-cdn-cache LOAD_BALANCER_NAME --path \u0026quot;/images/file.jpg\u0026quot; 命令使相应缓存内容失效\n3 如果你相应针对某个 host 进行特殊的缓存清除操作，你可以使用 \u0026ndash;host 标志。默认情况下，Google Cloud CLI 会等到失效操作完成。要在后台执行失效操作，请在命令行中附加 \u0026ndash;async。\n过了一会可以看到，相应的路径的缓存也成功失效了。\nGoogle Cloud Client 第三种方法是使用 Google Cloud Client 进行缓存的失效操作。通过查阅资料，发现 google 有 2 个 go client 可以进行相应的操作：1) https://github.com/googleapis/google-api-go-client 2) https://github.com/googleapis/google-cloud-go. 由于我们使用的是 google cloud 的服务，所以我们使用第二个进行代码的编写。\npackage main import ( compute \u0026#34;cloud.google.com/go/compute/apiv1\u0026#34; \u0026#34;cloud.google.com/go/compute/apiv1/computepb\u0026#34; \u0026#34;context\u0026#34; \u0026#34;google.golang.org/api/option\u0026#34; \u0026#34;log\u0026#34; ) func main() { ctx := context.Background() client, err := compute.NewUrlMapsRESTClient(ctx, option.WithCredentialsFile(\u0026#34;./credentials.json\u0026#34;)) if err != nil { return } defer client.Close() url := \u0026#34;/index.html\u0026#34; op, err := client.InvalidateCache(ctx, \u0026amp;computepb.InvalidateCacheUrlMapRequest{ // The body resource for this request CacheInvalidationRuleResource: \u0026amp;computepb.CacheInvalidationRule{ Path: \u0026amp;url, }, // google console 项目 id Project: \u0026#34;xx\u0026#34;, // lb name UrlMap: \u0026#34;xx\u0026#34;, }) if err != nil { log.Fatal(err) return } err = op.Wait(ctx) if err != nil { log.Fatal(err) return } } 默认是采用同步的，即得等缓存清除成功后才会结束，如果需要异步执行只需将 wait 方法替换为 Poll 方法即可。\n参考 https://cloud.google.com/cdn/docs/invalidating-cached-content?hl=zh-cn ","permalink":"https://jasminides.com/posts/google-cloud-%E6%B8%85%E9%99%A4-cdn-%E7%BC%93%E5%AD%98/","summary":"\u003cp\u003e最近在研究使用 google cloud 的 cdn 服务，本文就来讲解如何清除 cdn 的缓存。\u003c/p\u003e\n\u003cp\u003e本文介绍了几种清除 cdn 缓存的方法。\u003c/p\u003e\n\u003ch2 id=\"google-cloud-console-清除\"\u003egoogle cloud console 清除\u003c/h2\u003e\n\u003cp\u003e第一种也是最简单的，就是直接从 google cloud console 后台进行操作，我们打开 console 后台，选择网络服务，点击负载均衡界面，选择我们要清除的 cdn 缓存所使用的负载均衡器，点击缓存页面，\n输入想要 cdn 节点清除的路径即可。过了一会，就可以看到操作成功，相应的文件已经失效。\n\u003cimg loading=\"lazy\" src=\"/img/cdn/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/cdn/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/cdn/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/cdn/img_3.png\" alt=\"img_3.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"google-cloud-cli-命令\"\u003eGoogle Cloud CLI 命令\u003c/h2\u003e\n\u003cp\u003e第二种方法是使用 Google Cloud CLI 使 cdn 缓存文件失效。\u003c/p\u003e\n\u003ch3 id=\"google-cloud-cli-安装\"\u003eGoogle Cloud CLI 安装\u003c/h3\u003e\n\u003cp\u003e该怎么安装 Google Cloud CLI 呢，有 2 个办法：1) 直接下载安装二进制文件 2) 使用 Cloud Shell. 本文是使用 Cloud Shell 进行的操作。\u003c/p\u003e\n\u003ch3 id=\"使缓存内容失效\"\u003e使缓存内容失效\u003c/h3\u003e\n\u003cp\u003e1 使用 \u003ccode\u003egcloud compute url-maps list\u003c/code\u003e 列出目前所使用的负载均衡器\u003c/p\u003e","title":"Google Cloud 清除 CDN 缓存"},{"content":"今天我来讲讲如何备份 apisix 的数据，主要是路由、服务、上游等数据。本文中的 apisix 版本为 apisix 3.1.0 版本。\n接下来由我来介绍几种备份方法。\ndashboard 导出备份 介绍的第一种方法是使用 apisix dashboard 进行数据导出，但这种方法有许多缺陷，只能导出 route 数据，其他服务、ssl 数据都不能导出，而且新版本 (3.0+)dashboard 导出的路由不包含上游服务的数据，不方便进行快速的路由迁移复制 (我猜测可能是害怕上游服务信息不一致导致路由错误)。\n接下来就来介绍如何进行导入导出。\n1 我们打开 dashboard\n2 选择要导出的路由，点击 export openapi\n3 在新的 apisix dashboard 导入刚刚导出的 openapi 文件并填写相应的信息，导入成功后就可以看到导入的路由信息，相应路由的服务需要补充填写。\n根据 admin api 编写相应的脚本 apisix 提供了各种 route、service 的 admin api 数据接口，我们可以根据官方提供的接口编写相应的脚本。\n使用 etcd 备份方案 由于 apisix 默认采用 etcd 进行数据存储，我们可以备份 etcd 数据，到新的 apisix 集群导入备份的数据。\n由于我对 etcd 的运维不太熟悉，想要了解 etcd 备份快照，可以查看这条链接。\n小结 本文我介绍了 3 种将 apisix 数据导入导出的方法，3 种方法各有各的优缺点，我们需要根据我们具体的情况来使用不同的方法。\n参考 https://apisix.incubator.apache.org/zh/docs/dashboard/modules/data_loader/openapi3/ https://apisix.incubator.apache.org/zh/docs/apisix/admin-api/ https://etcd.io/docs/v3.5/op-guide/recovery/ https://github.com/apache/apisix-dashboard/blob/master/api/internal/handler/data_loader/loader/loader.go ","permalink":"https://jasminides.com/posts/apisix-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/","summary":"\u003cp\u003e今天我来讲讲如何备份 apisix 的数据，主要是路由、服务、上游等数据。本文中的 apisix 版本为 apisix 3.1.0 版本。\u003c/p\u003e\n\u003cp\u003e接下来由我来介绍几种备份方法。\u003c/p\u003e\n\u003ch2 id=\"dashboard-导出备份\"\u003edashboard 导出备份\u003c/h2\u003e\n\u003cp\u003e介绍的第一种方法是使用 apisix dashboard 进行数据导出，但这种方法有许多缺陷，只能导出 route 数据，其他服务、ssl 数据都不能导出，而且新版本 (3.0+)dashboard 导出的路由不包含上游服务的数据，不方便进行快速的路由迁移复制 (我猜测可能是害怕上游服务信息不一致导致路由错误)。\u003c/p\u003e\n\u003cp\u003e接下来就来介绍如何进行导入导出。\u003c/p\u003e\n\u003cp\u003e1 我们打开 dashboard\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e5%a4%87%e4%bb%bd/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e2 选择要导出的路由，点击 export openapi\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e5%a4%87%e4%bb%bd/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e3 在新的 apisix dashboard 导入刚刚导出的 openapi 文件并填写相应的信息，导入成功后就可以看到导入的路由信息，相应路由的服务需要补充填写。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e5%a4%87%e4%bb%bd/img_2.png\" alt=\"img_2.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e5%a4%87%e4%bb%bd/img_3.png\" alt=\"img_3.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"根据-admin-api-编写相应的脚本\"\u003e根据 admin api 编写相应的脚本\u003c/h2\u003e\n\u003cp\u003eapisix 提供了各种 route、service 的 admin api 数据接口，我们可以根据官方提供的接口编写相应的脚本。\u003c/p\u003e\n\u003ch2 id=\"使用-etcd-备份方案\"\u003e使用 etcd 备份方案\u003c/h2\u003e\n\u003cp\u003e由于 apisix 默认采用 etcd 进行数据存储，我们可以备份 etcd 数据，到新的 apisix 集群导入备份的数据。\u003c/p\u003e\n\u003cp\u003e由于我对 etcd 的运维不太熟悉，想要了解 etcd 备份快照，可以查看这条\u003ca href=\"https://etcd.io/docs/v3.5/op-guide/recovery/\"\u003e链接\u003c/a\u003e。\u003c/p\u003e","title":"apisix 数据备份"},{"content":"最近在研究 apisix 插件，想要研究插件的执行流程，为了了解插件的具体运行流程，查看了几种方法来调试:1. inspect plugin 2. 自定义插件调试 等等。\n本文介绍了添加启用自定义插件。\n简单修改插件 最近在研究 apisix 的 proxy-cache 插件，本文就以 proxy-cache 插件为例子来讲解 docker 环境下如何自定义插件。\n我们先从 apisix 官方 git 库拷贝 proxy-cache 插件代码到本地文件夹。我们对插件的内容进行修改删除，并将插件名称修改为 proxy-cache2, 修改后的插件文件列表如下：\n删除了内存缓存的相关内容，只保留了磁盘缓存的内容，并添加了一些日志记录好了解整个插件的整体流程。\napisix 添加自定义插件 接下来需要给 apisix 添加我们修改的 proxy-cache2 插件，通过查看容器的目录，我们需要将插件挂载到 /usr/local/apisix/apisix/plugins 目录下，我们修改 docker-compose 文件：\nversion: \u0026#34;3\u0026#34; services: apisix: image: apache/apisix:${APISIX_IMAGE_TAG:-3.2.0-debian} restart: always volumes: - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro - ./apisix/plugins/proxy-cache2:/usr/local/apisix/apisix/plugins/proxy-cache2 - ./apisix_log://usr/local/apisix/logs depends_on: - etcd ##network_mode: host ports: - \u0026#34;9180:9180/tcp\u0026#34; - \u0026#34;9080:9080/tcp\u0026#34; - \u0026#34;9091:9091/tcp\u0026#34; - \u0026#34;9443:9443/tcp\u0026#34; - \u0026#34;9092:9092/tcp\u0026#34; networks: apisix: 我们添加 ./apisix/plugins/proxy-cache2:/usr/local/apisix/apisix/plugins/proxy-cache2 将本地的插件目录挂载进行容器中，重启 apisix。\n执行 curl \u0026quot;http://127.0.0.1:9180/apisix/admin/plugins/list\u0026quot; -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1'\n可以看到插件已经添加成功了。\napisix dashboard 添加自定义插件 apisix 已经成功添加我们自定义的插件了，但我们打开 dashboard 发现我们的自定义插件没有添加成功，接下来讲述如何在 dashboard 添加我们的插件。\n执行命令导出 schema.json 文件 我们通过 curl 127.0.0.1:9092/v1/schema \u0026gt; schema.json 可以导出 schema.json 文件，\n将 schema.json 文件挂载进 dashboard 容器中 接下来我们只需将 schema.json 挂载进 dashboard 容器即可，修改后的 compose 文件如下：\n# # Licensed to the Apache Software Foundation (ASF) under one or more # contributor license agreements. See the NOTICE file distributed with # this work for additional information regarding copyright ownership. # The ASF licenses this file to You under the Apache License, Version 2.0 # (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with # the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # version: \u0026#34;3\u0026#34; services: apisix-dashboard: image: apache/apisix-dashboard:3.0.0-alpine restart: always volumes: - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml - ./dashboard_conf/schema.json:/usr/local/apisix-dashboard/conf/schema.json ports: - \u0026#34;9000:9000\u0026#34; networks: apisix: apisix: image: apache/apisix:${APISIX_IMAGE_TAG:-3.2.0-debian} restart: always volumes: - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro - ./apisix/plugins/proxy-cache2:/usr/local/apisix/apisix/plugins/proxy-cache2 - ./apisix_log://usr/local/apisix/logs depends_on: - etcd ##network_mode: host ports: - \u0026#34;9180:9180/tcp\u0026#34; - \u0026#34;9080:9080/tcp\u0026#34; - \u0026#34;9091:9091/tcp\u0026#34; - \u0026#34;9443:9443/tcp\u0026#34; - \u0026#34;9092:9092/tcp\u0026#34; networks: apisix: etcd: image: bitnami/etcd:3.4.15 restart: always volumes: - etcd_data:/bitnami/etcd environment: ETCD_ENABLE_V2: \u0026#34;true\u0026#34; ALLOW_NONE_AUTHENTICATION: \u0026#34;yes\u0026#34; ETCD_ADVERTISE_CLIENT_URLS: \u0026#34;http://etcd:2379\u0026#34; ETCD_LISTEN_CLIENT_URLS: \u0026#34;http://0.0.0.0:2379\u0026#34; ports: - \u0026#34;2379:2379/tcp\u0026#34; networks: apisix: networks: apisix: driver: bridge volumes: etcd_data: driver: local 我们重启容器，可以看到自定义插件已经添加成功了。\n小结 本文简单介绍了 apisix 如何启用自定义插件来帮助我们加强 apisix 网关的能力。\n参考 https://apisix.incubator.apache.org/zh/docs/apisix/admin-api/#plugin https://apisix.incubator.apache.org/zh/docs/apisix/plugins/proxy-cache/ https://apisix.incubator.apache.org/zh/docs/apisix/terminology/plugin/ https://apisix.incubator.apache.org/zh/docs/apisix/plugin-develop/ ","permalink":"https://jasminides.com/posts/apisix-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/","summary":"\u003cp\u003e最近在研究 apisix 插件，想要研究插件的执行流程，为了了解插件的具体运行流程，查看了几种方法来调试:1. inspect plugin 2. 自定义插件调试 等等。\u003c/p\u003e\n\u003cp\u003e本文介绍了添加启用自定义插件。\u003c/p\u003e\n\u003ch2 id=\"简单修改插件\"\u003e简单修改插件\u003c/h2\u003e\n\u003cp\u003e最近在研究 apisix 的 proxy-cache 插件，本文就以 proxy-cache 插件为例子来讲解 docker 环境下如何自定义插件。\u003c/p\u003e\n\u003cp\u003e我们先从 apisix 官方 git 库拷贝 proxy-cache 插件代码到本地文件夹。我们对插件的内容进行修改删除，并将插件名称修改为 proxy-cache2, 修改后的插件文件列表如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/apisix%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8f%92%e4%bb%b6/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e删除了内存缓存的相关内容，只保留了磁盘缓存的内容，并添加了一些日志记录好了解整个插件的整体流程。\u003c/p\u003e\n\u003ch2 id=\"apisix-添加自定义插件\"\u003eapisix 添加自定义插件\u003c/h2\u003e\n\u003cp\u003e接下来需要给 apisix 添加我们修改的 proxy-cache2 插件，通过查看容器的目录，我们需要将插件挂载到 /usr/local/apisix/apisix/plugins 目录下，我们修改 docker-compose 文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-docker-compose\" data-lang=\"docker-compose\"\u003eversion: \u0026#34;3\u0026#34;\n\nservices:\n  apisix:\n    image: apache/apisix:${APISIX_IMAGE_TAG:-3.2.0-debian}\n    restart: always\n    volumes:\n      - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro\n      - ./apisix/plugins/proxy-cache2:/usr/local/apisix/apisix/plugins/proxy-cache2\n      - ./apisix_log://usr/local/apisix/logs\n    depends_on:\n      - etcd\n    ##network_mode: host\n    ports:\n      - \u0026#34;9180:9180/tcp\u0026#34;\n      - \u0026#34;9080:9080/tcp\u0026#34;\n      - \u0026#34;9091:9091/tcp\u0026#34;\n      - \u0026#34;9443:9443/tcp\u0026#34;\n      - \u0026#34;9092:9092/tcp\u0026#34;\n    networks:\n      apisix:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们添加 ./apisix/plugins/proxy-cache2:/usr/local/apisix/apisix/plugins/proxy-cache2 将本地的插件目录挂载进行容器中，重启 apisix。\u003c/p\u003e","title":"apisix 如何添加自定义插件"},{"content":"前言 最近有一个需求，需要配置一个路由，这个路由是子域名形式的，域名类似 xx.apps.overstarry.vip，我们需要根据子域名中的 xx 内容来请求同一个对象存储中不同的文件。\n这个需求之前处理过，那时采用了 nginx 来处理主要路径的逻辑，apisix 直接请求 nginx 服务，也就是大概这样的一种结构：apisix -\u0026gt; nginx -\u0026gt; oss。这次同样的需求，我决定采用 2 层结构，去除中间的 nginx 层，由 apisix 直接访问 oss 服务。\n接下来我就来讲述处理的过程。\n过程 使用 proxy-rewrite 处理这个需求，我第一反应是使用 proxy-rewrite 插件来处理，我使用 regex_uri 字段来进行正则替换匹配，添加的插件内容如下：\n\u0026#34;proxy-rewrite\u0026#34;: { \u0026#34;regex_uri\u0026#34;: [ \u0026#34;^(.*).apps0.overstarry.vip(.*)$\u0026#34;, \u0026#34;/$1/production$2\u0026#34; ] } 配置完后，请求了几次，发现没有请求成功，通过查看日志发现请求到了奇怪的地址。又仔细的研究了一会，发现是我理解错误了，proxy_rewrite 是根据 uri 进行正则匹配的，没有根据 host 匹配的选项，前面填写的那些是根本不会匹配成功的。\nserverless proxy-rewrite 插件不能实现我们的需求，我又查看了 issue 列表，发现了一个 issue(#7739),里面提到了可以使用插件 serverless 来实现我们的需求。\nserverless 介绍 APISIX 有两个 serverless 插件：serverless-pre-function 和 serverless-post-function。\nserverless-pre-function 插件会在指定阶段开始时运行，serverless-post-function 插件会在指定阶段结束时运行。这两个插件使用相同的属性。\n实现 我们的需求应该是采用 serverless-pre-function 来实现，具体过程描述如下：获得请求的 host, 对 host 进行相应的文本正则替换，将替换的文本和 uri 进行组合拼接，得到真正的 uri.\nserverless-pre-function 的函数是由 lua 编写的，由于我不会 lua, 我特地的查看了其它插件的 lua 代码逻辑和 nginx 的文档，写出了相应的代码函数：\n\u0026#34;serverless-pre-function\u0026#34;: { \u0026#34;functions\u0026#34;: [ \u0026#34;return function(conf, ctx) local uri, _, err = ngx.re.sub(ctx.var.host, \\\u0026#34;^(.*).apps0.top007games.com(.*)$\\\u0026#34;,\\\u0026#34;/$1/production$2\\\u0026#34;, \\\u0026#34;jo\\\u0026#34;);ctx.var.uri = uri..ctx.var.uri ;ngx.log(ngx.ERR, \\\u0026#34;match uri \\\u0026#34;, ctx.var.uri ); end\u0026#34; ], \u0026#34;phase\u0026#34;: \u0026#34;rewrite\u0026#34; } 配置好路由插件，请求路由，成功访问了相应的对象。\n小结 本文简单的介绍了如何采用 serverless-pre-function 插件编写函数来实现根据请求的路径，来访问不同的对象存储路径。\n参考 https://apisix.incubator.apache.org/zh/docs/apisix/plugins/serverless/ https://github.com/apache/apisix/pull/8997 https://apisix.incubator.apache.org/zh/docs/apisix/FAQ/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-regex-%E5%8C%B9%E9%85%8D-route-%E4%B8%AD%E7%9A%84-uri https://nginx.org/en/docs/varindex.html https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/req.md https://github.com/apache/apisix/blob/master/apisix/plugins/proxy-rewrite.lua https://github.com/apache/apisix/issues/7739 ","permalink":"https://jasminides.com/posts/apisix-%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82-host-%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近有一个需求，需要配置一个路由，这个路由是子域名形式的，域名类似 \u003ccode\u003exx.apps.overstarry.vip\u003c/code\u003e，我们需要根据子域名中的 xx 内容来请求同一个对象存储中不同的文件。\u003c/p\u003e\n\u003cp\u003e这个需求之前处理过，那时采用了 nginx 来处理主要路径的逻辑，apisix 直接请求 nginx 服务，也就是大概这样的一种结构：\u003ccode\u003eapisix -\u0026gt; nginx -\u0026gt; oss\u003c/code\u003e。这次同样的需求，我决定采用 2 层结构，去除中间的\nnginx 层，由 apisix 直接访问 oss 服务。\u003c/p\u003e\n\u003cp\u003e接下来我就来讲述处理的过程。\u003c/p\u003e\n\u003ch2 id=\"过程\"\u003e过程\u003c/h2\u003e\n\u003ch3 id=\"使用-proxy-rewrite\"\u003e使用 proxy-rewrite\u003c/h3\u003e\n\u003cp\u003e处理这个需求，我第一反应是使用 proxy-rewrite 插件来处理，我使用 regex_uri 字段来进行正则替换匹配，添加的插件内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;proxy-rewrite\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;regex_uri\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^(.*).apps0.overstarry.vip(.*)$\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/$1/production$2\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e配置完后，请求了几次，发现没有请求成功，通过查看日志发现请求到了奇怪的地址。又仔细的研究了一会，发现是我理解错误了，proxy_rewrite 是根据 uri 进行正则匹配的，没有根据 host 匹配的选项，前面填写的那些是根本不会匹配成功的。\u003c/p\u003e\n\u003ch3 id=\"serverless\"\u003e\u003ccode\u003eserverless\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eproxy-rewrite 插件不能实现我们的需求，我又查看了 issue 列表，发现了一个 issue(#7739),里面提到了可以使用插件 serverless 来实现我们的需求。\u003c/p\u003e\n\u003ch4 id=\"serverless-介绍\"\u003eserverless 介绍\u003c/h4\u003e\n\u003cp\u003eAPISIX 有两个 serverless 插件：serverless-pre-function 和 serverless-post-function。\u003c/p\u003e\n\u003cp\u003eserverless-pre-function 插件会在指定阶段开始时运行，serverless-post-function 插件会在指定阶段结束时运行。这两个插件使用相同的属性。\u003c/p\u003e\n\u003ch3 id=\"实现\"\u003e实现\u003c/h3\u003e\n\u003cp\u003e我们的需求应该是采用 serverless-pre-function 来实现，具体过程描述如下：获得请求的 host, 对 host 进行相应的文本正则替换，将替换的文本和 uri 进行组合拼接，得到真正的 uri.\u003c/p\u003e","title":"apisix 根据请求 host 访问不同路径"},{"content":"前言 最近在给 APISIX 配置自动更新 SSL 证书的时候，发现了一些问题，本文记录以下发现问题的过程和解决方案。\n步骤 我们先来看下原始的配置方法吧：\n1 安装相应脚本\n$ curl --output /root/.acme.sh/renew-hook-update-APISIX.sh --silent https://gist.githubusercontent.com/anjia0532/9ebf8011322f43e3f5037bc2af3aeaa6/raw/65b359a4eed0ae990f9188c2afa22bacd8471652/renew-hook-update-APISIX.sh $ chmod +x /root/.acme.sh/renew-hook-update-APISIX.sh $ /root/.acme.sh/renew-hook-update-APISIX.sh Usage : /root/.acme.sh/renew-hook-update-APISIX.sh -h \u0026lt;APISIX admin host\u0026gt; -p \u0026lt;certificate pem file\u0026gt; -k \u0026lt;certificate private key file\u0026gt; -a \u0026lt;admin api key\u0026gt; -t \u0026lt;print debug info switch off/on,default off\u0026gt; 2 安装 acme.sh\ncurl https://get.acme.sh | sh -s email=my@example.com 3 申请证书，并添加 renew-hook\n这里我采用的是 dns api 的方式申请证书的\n~/.acme.sh/acme.sh --issue --dns dns_ali -d *.xx.com --renew-hook \u0026#39;~/.acme.sh/renew-hook-update-APISIX.sh -h http://127.0.0.1:9280 -p ~/.acme.sh/\u0026#34;*.xx.com_ecc\u0026#34;/\u0026#34;fullchain.cer\u0026#34; -k ~/.acme.sh/\u0026#34;*.xx.com_ecc\u0026#34;/\u0026#34;*.xx.com.key\u0026#34; -a {admin-key}\u0026#39; --log --debug 这里的 http://127.0.0.1:9280 是你的 APISIX 的 admin 接口地址，admin-key 是你的 key。\n问题 在执行以上步骤后，我以为能顺利申请证书，并添加至 APISIX, 但在允许命令后，提示以下错误： 从报错信息可以看出是 jq 解析 json 出现错误。\n解决 我们先来看看原来的脚本内容：\n#!/usr/bin/env bash # author anjia0532@gmail.com # blog https://anjia0532.github.io/ # github https://github.com/anjia0532 # this script depend on jq,check it first RED=\u0026#39;\\033[0;31m\u0026#39; NC=\u0026#39;\\033[0m\u0026#39; # No Color if ! [ -x \u0026#34;$(command -v jq)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: jq is not installed.${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi if ! [ -x \u0026#34;$(command -v openssl)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: openssl is not installed.${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi if ! [ -x \u0026#34;$(command -v ~/.acme.sh/acme.sh)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: acme.sh is not installed.(doc https://github.com/acmesh-official/acme.sh/wiki/How-to-install)${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi usage () { echo \u0026#34;Usage : $0 -h \u0026lt;apisix admin host\u0026gt; -p \u0026lt;certificate pem file\u0026gt; -k \u0026lt;certificate private key file\u0026gt; -a \u0026lt;admin api key\u0026gt; -t \u0026lt;print debug info switch off/on,default off\u0026gt;\u0026#34;; } # parse args while getopts \u0026#34;h:p:k:a:t:\u0026#34; opts; do case ${opts} in h) HOST=${OPTARG} ;; p) PEM=${OPTARG} ;; k) KEY=${OPTARG} ;; a) API_KEY=${OPTARG} ;; t) DEBUG=${OPTARG} ;; *) usage; exit;; esac done # those args must be not null if [ ! \u0026#34;$HOST\u0026#34; ] || [ ! \u0026#34;$PEM\u0026#34; ] || [ ! \u0026#34;$KEY\u0026#34; ] || [ ! \u0026#34;$API_KEY\u0026#34; ] then usage exit 1 fi # optional args,set default value [ -z \u0026#34;$DEBUG\u0026#34; ] \u0026amp;\u0026amp; DEBUG=off # print vars key and value when DEBUG eq on [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;HOST:${HOST} API_KEY:${API_KEY} PEM FILE:${PEM} KEY FILE:${KEY} DEBUG:${DEBUG}\u0026#34; # get all ssl and filter this one by sni name cert_content=$(curl --silent --location --request GET \u0026#34;${HOST}/apisix/admin/ssl/\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; | jq \u0026#34;first(.node.nodes[]| select(.value.snis[] | contains(\\\u0026#34;$(openssl x509 -in $PEM -noout -text|grep -oP \u0026#39;(?\u0026lt;=DNS:|IP Address:)[^,]+\u0026#39;|sort|head -n1)\\\u0026#34;)))\u0026#34;) validity_start=$(date --date=\u0026#34;$(openssl x509 -startdate -noout -in $PEM|cut -d= -f 2)\u0026#34; +\u0026#34;%s\u0026#34;) validity_end=$(date --date=\u0026#34;$(openssl x509 -enddate -noout -in $PEM|cut -d= -f 2)\u0026#34; +\u0026#34;%s\u0026#34;) # create a new ssl when it not exist if [ -z \u0026#34;$cert_content\u0026#34; ] then cert_content=\u0026#34;{\\\u0026#34;snis\\\u0026#34;:[],\\\u0026#34;status\\\u0026#34;: 1}\u0026#34; # read domains from pem file by openssl snis=$(openssl x509 -in $PEM -noout -text|grep -oP \u0026#39;(?\u0026lt;=DNS:|IP Address:)[^,]+\u0026#39;|sort) for sni in ${snis[@]} ; do cert_content=$(echo $cert_content | jq \u0026#34;.snis += [\\\u0026#34;$sni\\\u0026#34;]\u0026#34;) done cert_content=$(echo $cert_content | jq \u0026#34;.|.cert = \\\u0026#34;$(cat $PEM)\\\u0026#34;|.key = \\\u0026#34;$(cat $KEY)\\\u0026#34;|.validity_start=${validity_start}|.validity_end=${validity_end}\u0026#34;) cert_update_result=$(curl --silent --location --request POST \u0026#34;${HOST}/apisix/admin/ssl/\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data \u0026#34;$cert_content\u0026#34; ) [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;cert_content: \\n${cert_content}\\n\\ncreate result json:\\n\\n${cert_update_result}\u0026#34; else # get exist ssl id URI=$(echo $cert_content | jq -r \u0026#34;.key\u0026#34;) ID=$(echo ${URI##*/}) # get exist ssl certificate json , modify cert and key value cert_content=$(echo $cert_content | jq \u0026#34;.value|.cert = \\\u0026#34;$(cat $PEM)\\\u0026#34;|.key = \\\u0026#34;$(cat $KEY)\\\u0026#34;|.id=\\\u0026#34;${ID}\\\u0026#34;|.update_time=$(date +\u0026#39;%s\u0026#39;)|.validity_start=${validity_start}|.validity_end=${validity_end}\u0026#34;) # update apisix ssl cert_update_result=$(curl --silent --location --request PUT \u0026#34;${HOST}/apisix/admin/ssl/${ID}\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data \u0026#34;$cert_content\u0026#34; ) [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;cert_content: \\n${cert_content}\\n\\nupdate result json:\\n\\n${cert_update_result}\u0026#34; fi exit 0 通过简单分析脚本可以看出功能是解析申请的证书，通过 APISIX admin API 添加更新证书至 APISIX。通过简单的调试可以发现是调研 APISIX admin API 时解析 json 响应时出现问题，通过这里我才想起来，APISIX 3.x 版本后 admin API 进行了比较大的更新，接口和相应的响应不兼容 2.X 版本的接口，于是这里就需要通过对脚本中 APISIX 相关的接口进行调整。\n修改后的内容如下：\n#!/usr/bin/env bash # author anjia0532@gmail.com # blog https://anjia0532.github.io/ # github https://github.com/anjia0532 # this script depend on jq,check it first RED=\u0026#39;\\033[0;31m\u0026#39; NC=\u0026#39;\\033[0m\u0026#39; # No Color if ! [ -x \u0026#34;$(command -v jq)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: jq is not installed.${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi if ! [ -x \u0026#34;$(command -v openssl)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: openssl is not installed.${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi if ! [ -x \u0026#34;$(command -v ~/.acme.sh/acme.sh)\u0026#34; ]; then echo -e \u0026#34;${RED}Error: acme.sh is not installed.(doc https://github.com/acmesh-official/acme.sh/wiki/How-to-install)${NC}\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi usage () { echo \u0026#34;Usage : $0 -h \u0026lt;apisix admin host\u0026gt; -p \u0026lt;certificate pem file\u0026gt; -k \u0026lt;certificate private key file\u0026gt; -a \u0026lt;admin api key\u0026gt; -t \u0026lt;print debug info switch off/on,default off\u0026gt;\u0026#34;; } # parse args while getopts \u0026#34;h:p:k:a:t:\u0026#34; opts; do case ${opts} in h) HOST=${OPTARG} ;; p) PEM=${OPTARG} ;; k) KEY=${OPTARG} ;; a) API_KEY=${OPTARG} ;; t) DEBUG=${OPTARG} ;; *) usage; exit;; esac done # those args must be not null if [ ! \u0026#34;$HOST\u0026#34; ] || [ ! \u0026#34;$PEM\u0026#34; ] || [ ! \u0026#34;$KEY\u0026#34; ] || [ ! \u0026#34;$API_KEY\u0026#34; ] then usage exit 1 fi # optional args,set default value [ -z \u0026#34;$DEBUG\u0026#34; ] \u0026amp;\u0026amp; DEBUG=off # print vars key and value when DEBUG eq on [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;HOST:${HOST} API_KEY:${API_KEY} PEM FILE:${PEM} KEY FILE:${KEY} DEBUG:${DEBUG}\u0026#34; # get all ssl and filter this one by sni name cert_content=$(curl --silent --location --request GET \u0026#34;${HOST}/apisix/admin/ssls/\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; | jq \u0026#34;first(.list[]| select(.value.snis[] | contains(\\\u0026#34;$(openssl x509 -in $PEM -noout -text|grep -oP \u0026#39;(?\u0026lt;=DNS:|IP Address:)[^,]+\u0026#39;|sort|head -n1)\\\u0026#34;)))\u0026#34;) validity_start=$(date --date=\u0026#34;$(openssl x509 -startdate -noout -in $PEM|cut -d= -f 2)\u0026#34; +\u0026#34;%s\u0026#34;) validity_end=$(date --date=\u0026#34;$(openssl x509 -enddate -noout -in $PEM|cut -d= -f 2)\u0026#34; +\u0026#34;%s\u0026#34;) # create a new ssl when it not exist if [ -z \u0026#34;$cert_content\u0026#34; ] then cert_content=\u0026#34;{\\\u0026#34;snis\\\u0026#34;:[],\\\u0026#34;status\\\u0026#34;: 1}\u0026#34; # read domains from pem file by openssl snis=$(openssl x509 -in $PEM -noout -text|grep -oP \u0026#39;(?\u0026lt;=DNS:|IP Address:)[^,]+\u0026#39;|sort) for sni in ${snis[@]} ; do cert_content=$(echo $cert_content | jq \u0026#34;.snis += [\\\u0026#34;$sni\\\u0026#34;]\u0026#34;) done cert_content=$(echo $cert_content | jq \u0026#34;.|.cert = \\\u0026#34;$(cat $PEM)\\\u0026#34;|.key = \\\u0026#34;$(cat $KEY)\\\u0026#34;|.validity_start=${validity_start}|.validity_end=${validity_end}\u0026#34;) cert_update_result=$(curl --silent --location --request POST \u0026#34;${HOST}/apisix/admin/ssls/\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data \u0026#34;$cert_content\u0026#34; ) [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;cert_content: \\n${cert_content}\\n\\ncreate result json:\\n\\n${cert_update_result}\u0026#34; else # get exist ssl id URI=$(echo $cert_content | jq -r \u0026#34;.key\u0026#34;) ID=$(echo ${URI##*/}) # get exist ssl certificate json , modify cert and key value cert_content=$(echo $cert_content | jq \u0026#34;.value|.cert = \\\u0026#34;$(cat $PEM)\\\u0026#34;|.key = \\\u0026#34;$(cat $KEY)\\\u0026#34;|.id=\\\u0026#34;${ID}\\\u0026#34;|.update_time=$(date +\u0026#39;%s\u0026#39;)|.validity_start=${validity_start}|.validity_end=${validity_end}\u0026#34;) # update apisix ssl cert_update_result=$(curl --silent --location --request PUT \u0026#34;${HOST}/apisix/admin/ssls/${ID}\u0026#34; \\ --header \u0026#34;X-API-KEY: ${API_KEY}\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data \u0026#34;$cert_content\u0026#34; ) [[ \u0026#34;on\u0026#34; == \u0026#34;$DEBUG\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;cert_content: \\n${cert_content}\\n\\nupdate result json:\\n\\n${cert_update_result}\u0026#34; fi exit 0 运行后顺利申请证书并添加证书至 APISIX 数据存储。\n修改后的脚本地址：https://gist.github.com/overstarry/0f5c2cf7cd4ccfe653dfa071390ae90b\n参考 https://github.com/acmesh-official/acme.sh https://juejin.cn/post/6965778290619449351 https://apisix.incubator.apache.org/zh/docs/apisix/upgrade-guide-from-2.15.x-to-3.0.0/ https://apisix.incubator.apache.org/zh/docs/apisix/admin-api/ https://apisix.incubator.apache.org/zh/docs/apisix/FAQ/#%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E-acmesh-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0-apisix-ssl-%E8%AF%81%E4%B9%A6 ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-acme-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0-apisix-ssl-%E8%AF%81%E4%B9%A6/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在给 APISIX 配置自动更新 SSL 证书的时候，发现了一些问题，本文记录以下发现问题的过程和解决方案。\u003c/p\u003e\n\u003ch2 id=\"步骤\"\u003e步骤\u003c/h2\u003e\n\u003cp\u003e我们先来看下原始的配置方法吧：\u003c/p\u003e\n\u003cp\u003e1 安装相应脚本\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ curl --output /root/.acme.sh/renew-hook-update-APISIX.sh --silent https://gist.githubusercontent.com/anjia0532/9ebf8011322f43e3f5037bc2af3aeaa6/raw/65b359a4eed0ae990f9188c2afa22bacd8471652/renew-hook-update-APISIX.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ chmod +x /root/.acme.sh/renew-hook-update-APISIX.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ /root/.acme.sh/renew-hook-update-APISIX.sh \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUsage : /root/.acme.sh/renew-hook-update-APISIX.sh -h \u0026lt;APISIX admin host\u0026gt; -p \u0026lt;certificate pem file\u0026gt; -k \u0026lt;certificate private key file\u0026gt; -a \u0026lt;admin api key\u0026gt; -t \u0026lt;print debug info switch off/on,default off\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2 安装 acme.sh\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl https://get.acme.sh | sh -s email\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003emy@example.com\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e3 申请证书，并添加 renew-hook\u003c/p\u003e\n\u003cp\u003e这里我采用的是 dns api 的方式申请证书的\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ~/.acme.sh/acme.sh --issue  --dns dns_ali     -d *.xx.com   --renew-hook \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;~/.acme.sh/renew-hook-update-APISIX.sh  -h http://127.0.0.1:9280 -p ~/.acme.sh/\u0026#34;*.xx.com_ecc\u0026#34;/\u0026#34;fullchain.cer\u0026#34;  -k ~/.acme.sh/\u0026#34;*.xx.com_ecc\u0026#34;/\u0026#34;*.xx.com.key\u0026#34; -a {admin-key}\u0026#39;\u003c/span\u003e --log --debug \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的 http://127.0.0.1:9280 是你的 APISIX 的 admin 接口地址，admin-key 是你的 key。\u003c/p\u003e","title":"使用 acme 自动更新 APISIX ssl 证书"},{"content":"最近在学习常用的容器运行时 containerd, 本篇我就来介绍如何本地构建 containerd 进行调试开发，主要介绍 2 种 常规方式和使用容器构建，由于本地环境限制，我主要是使用 docker 搭建本地调试环境。\n非容器 build 这里先开始介绍常规直接从源码本地构建的方式。\n构建环境要求 1 go1.19.x 及以上版本\n2 Protoc 3.x+\n3 适用于您的发行版的 Btrfs 标头和库。请注意，可以通过构建标签禁用构建 btrfs 驱动程序 no_btrfs，从而删除此依赖项。\n前面 2 点相信大家都很清楚，第三点的 Btrfs 是什么呢？Btrfs 是一种现代的 Linux 写时复制（COW）文件系统，旨在实现先进的功能，同时也注重容错、修复和简易管理。\nbuild 1 拉取 containerd 源代码至本地\n2 构建\n进入源代码根目录，执行一下命令：\ncd containerd make 执行后，会在 ./bin/ 目录下生成所有项目的二进制文件。\n如果你需要修改 gRPC API ,修改后需要使用 protoc 编译生成新的代码：make generate\ndocker 容器构建 接下来讲解怎么通过 docker 构建本地 containerd 调试环境。\n构建要求 1 go1.19.x 及以上版本\n2 Protoc 3.x+\n3 docker\n构建 进入源代码根目录 cd containerd，执行以下命令：\ndocker run -it -v ${PWD}/containerd:/go/src/github.com/containerd/containerd -e GOPATH=/go -w /go/src/github.com/containerd/containerd golang:1.19 make \u0026amp;\u0026amp; make install 这将会进行 containerd 的构建，过了一会发现构建失败，错误信息如下：\ngo build -gcflags=-trimpath=/go/src -buildmode=pie -o bin/containerd -ldflags \u0026#39;-X github.com/containerd/containerd/version.Version=v1.6.0-beta.3-1838-g4c44ec702.m -X github.com/containerd/containerd/version.Revision=4c44ec702fccbfdbe1e14382d21a8123fd5774a9.m -X github.com/containerd/containerd/version.Package=github.com/containerd/containerd -s -w \u0026#39; -tags \u0026#34;urfave_cli_no_docs\u0026#34; ./cmd/containerd # github.com/containerd/btrfs vendor/github.com/containerd/btrfs/btrfs.go:21:10: fatal error: btrfs/ioctl.h: No such file or directory 21 | #include \u0026lt;btrfs/ioctl.h\u0026gt; | ^~~~~~~~~~~~~~~ compilation terminated. 看了一下，可能这个镜像没有 Btrfs 需要执行 apt-get update \u0026amp;\u0026amp; apt-get install -y --no-install-recommends libbtrfs-dev 。执行完继续构建，过了一会可以看到构建成功。\n如果你想要完整的容器运行时，你还需要 runc 的支持，我们拉取 runc 的源代码至本地，修改前面的 docker 允许命令：\ndocker run -it -v /var/lib/containerd -v ${PWD}/runc:/go/src/github.com/opencontainers/runc -v ${PWD}/containerd:/go/src/github.com/containerd/containerd -e GOPATH=/go -w /go/src/github.com/containerd/containerd golang:1.19 接下来我们跟前面一样先构建 containerd:\ncd /go/src/github.com/containerd/containerd make \u0026amp;\u0026amp; make install containerd 构建好了，我们来构建 runc:\ncd /go/src/github.com/opencontainers/runc make \u0026amp;\u0026amp; make install 过了一会，可以看到 runc 已经构建成功。\n小结 本文简单介绍了 2 种构建本地 containerd 调试环境的方式，主要介绍了使用 docker 构建的过程。\n参考 https://github.com/containerd/containerd/issues/5824 https://github.com/containerd/containerd/issues/3488 ","permalink":"https://jasminides.com/posts/containerd-%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"\u003cp\u003e最近在学习常用的容器运行时 containerd, 本篇我就来介绍如何本地构建 containerd 进行调试开发，主要介绍 2 种\n常规方式和使用容器构建，由于本地环境限制，我主要是使用 docker 搭建本地调试环境。\u003c/p\u003e\n\u003ch2 id=\"非容器-build\"\u003e非容器 build\u003c/h2\u003e\n\u003cp\u003e这里先开始介绍常规直接从源码本地构建的方式。\u003c/p\u003e\n\u003ch3 id=\"构建环境要求\"\u003e构建环境要求\u003c/h3\u003e\n\u003cp\u003e1 go1.19.x 及以上版本\u003c/p\u003e\n\u003cp\u003e2 Protoc 3.x+\u003c/p\u003e\n\u003cp\u003e3 适用于您的发行版的 Btrfs 标头和库。请注意，可以通过构建标签禁用构建 btrfs 驱动程序 no_btrfs，从而删除此依赖项。\u003c/p\u003e\n\u003cp\u003e前面 2 点相信大家都很清楚，第三点的 Btrfs 是什么呢？Btrfs 是一种现代的 Linux 写时复制（COW）文件系统，旨在实现先进的功能，同时也注重容错、修复和简易管理。\u003c/p\u003e\n\u003ch3 id=\"build\"\u003ebuild\u003c/h3\u003e\n\u003cp\u003e1 拉取 containerd 源代码至本地\u003c/p\u003e\n\u003cp\u003e2 构建\u003c/p\u003e\n\u003cp\u003e进入源代码根目录，执行一下命令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd containerd\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行后，会在 ./bin/ 目录下生成所有项目的二进制文件。\u003c/p\u003e\n\u003cp\u003e如果你需要修改 gRPC API ,修改后需要使用 protoc 编译生成新的代码：\u003ccode\u003emake generate\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"docker-容器构建\"\u003edocker 容器构建\u003c/h2\u003e\n\u003cp\u003e接下来讲解怎么通过 docker 构建本地 containerd 调试环境。\u003c/p\u003e\n\u003ch3 id=\"构建要求\"\u003e构建要求\u003c/h3\u003e\n\u003cp\u003e1 go1.19.x 及以上版本\u003c/p\u003e\n\u003cp\u003e2 Protoc 3.x+\u003c/p\u003e","title":"Containerd 本地调试环境搭建"},{"content":"介绍 containerd 是一个用于管理容器生命周期的开源容器守护程序，是 Docker 引擎中的核心组件之一。它负责容器的创建、启动、停止、销毁等操作，并提供了对容器的基本管理功能，如镜像管理、网络管理、存储管理等。与 Docker 引擎相比，containerd 更加轻量级，同时也支持多种容器运行时，如 runc、gVisor、Kata Containers 等。由于其简单、可扩展和可移植等优点，containerd 也成为了许多容器平台和工具的基础组件之一。\n安装 本文只介绍 Linux 系统下的安装方式。Linux 下的 deb 和 rpm 包 containerd.io 由 docker 官方进行分发，通过查阅官方文档，具体的安装步骤如下：\n1 更新 apt 软件包索引并安装必要的软件包，以便 apt 能够使用 HTTPS 仓库。\nsudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 2 添加 Docker’s 官方 GPG key:\nsudo mkdir -m 0755 -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg 3 设置存储库\necho \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 4 安装\nsudo apt-get install containerd.io 5 查看版本\n执行\n# 启动 containerd containerd # 查看 containerd 版本 containerd -v containerd containerd.io 1.6.16 31aa4358a36870b21a992d3ad2bef29e1d693bec 如果打印了相应的版本信息，就代表安装成功。\n客户端初体验 目前有例如 ctr crictl 等客户端工具可以来操作 containerd ,我比较常用 crictl ,但本文不使用这 2 个工具，而是使用官方提供的简易客户端包来简单操作容器。\n初始代码如下：\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/containerd/containerd\u0026#34; ) func main() { if err := redisExample(); err != nil { log.Fatal(err) } } func redisExample() error { client, err := containerd.New(\u0026#34;/run/containerd/containerd.sock\u0026#34;) if err != nil { return err } defer client.Close() return nil } 使用 containerd.New 根据 containerd 默认的套接字路径创建客户端连接，redisExample 函数的作用是拉取 redis 的官方镜像并输出镜像名称，接下来我们来补充代码。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/containerd/containerd/namespaces\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/containerd/containerd\u0026#34; ) func main() { if err := redisExample(); err != nil { log.Fatal(err) } } func redisExample() error { client, err := containerd.New(\u0026#34;/run/containerd/containerd.sock\u0026#34;) if err != nil { return err } defer client.Close() ctx := namespaces.WithNamespace(context.Background(), \u0026#34;redis\u0026#34;) image, err := client.Pull(ctx, \u0026#34;docker.io/library/redis:alpine\u0026#34;, containerd.WithPullUnpack) if err != nil { return err } fmt.Println(image.Name()) return nil } 使用 namespaces.WithNamespace 可以防止我们创建的一些容器镜像和其他用户起冲突，使用 client.Pull 拉取官方的 redis 镜像。\n小结 本文我简单介绍了如何安装 containerd 和官方客户端的简单使用。后面文章我还会对 containerd 进行简单的分析，敬请期待。\n参考 https://github.com/containerd/containerd https://pkg.go.dev/github.com/containerd/containerd ","permalink":"https://jasminides.com/posts/containerd-%E5%AE%89%E8%A3%85%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003econtainerd 是一个用于管理容器生命周期的开源容器守护程序，是 Docker\n引擎中的核心组件之一。它负责容器的创建、启动、停止、销毁等操作，并提供了对容器的基本管理功能，如镜像管理、网络管理、存储管理等。与\nDocker 引擎相比，containerd 更加轻量级，同时也支持多种容器运行时，如 runc、gVisor、Kata Containers\n等。由于其简单、可扩展和可移植等优点，containerd 也成为了许多容器平台和工具的基础组件之一。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e本文只介绍 Linux 系统下的安装方式。Linux 下的 deb 和 rpm 包 containerd.io 由 docker 官方进行分发，通过查阅官方文档，具体的安装步骤如下：\u003c/p\u003e\n\u003cp\u003e1 更新 apt 软件包索引并安装必要的软件包，以便 apt 能够使用 HTTPS 仓库。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get install \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    ca-certificates \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    curl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    gnupg \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    lsb-release\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2 添加 Docker’s 官方 GPG key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo mkdir -m \u003cspan style=\"color:#ae81ff\"\u003e0755\u003c/span\u003e -p /etc/apt/keyrings\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e3 设置存储库\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deb [arch=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003edpkg --print-architecture\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  \u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003elsb_release -cs\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e stable\u0026#34;\u003c/span\u003e | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get update\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e4 安装\u003c/p\u003e","title":"containerd 安装和客户端简单使用"},{"content":"今天我来简单介绍 kubernetes 生态中一个重要一环 - 包管理工具 Helm。\n介绍 Helm 是 Kubernetes 的开源包管理器。它提供了提供、共享和使用为 Kubernetes 构建的软件的能力。\nHelm 于 2015 年在 Deis 创建，后来被微软收购。现在称为 Helm Classic 的是在当年 11 月的首届 KubeCon 上推出的。2016 年 1 月，Helm Classic 与谷歌的 Kubernetes 部署管理器合并到现在是 Helm 主要项目的存储库中。\n该项目目前拥有超过 30,000 个 GitHub stars，每月从全球获得超过 200 万次下载。2020 年 4 月，Helm 在 CNCF 中获得毕业。\n安装 Helm 二进制安装 1 打开 https://github.com/helm/helm/releases , 下载你需要的版本 2 解压安装包 3 将文件夹中的 helm 二进制文件移动到相应的位置\n脚本安装 helm 官方提供了一个安装的脚本：\n$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 $ chmod 700 get_helm.sh $ ./get_helm.sh 除了以上 2 种安装方式，你还可以通过各个操作系统的包管理工具安装和编译源码安装，这里就不过多赘述了。\n与 k8s 版本兼容的 Helm 版本列表 不同版本的 Helm 兼容不同的 k8s 版本，需要根据你的集群版本来选择不同的 Helm 版本，下面列出相应的关系：\nHelm 版本\t支持的 Kubernetes 版本 3.11.x\t1.26.x - 1.23.x 3.10.x\t1.25.x - 1.22.x 3.9.x\t1.24.x - 1.21.x 3.8.x\t1.23.x - 1.20.x 3.7.x\t1.22.x - 1.19.x 3.6.x\t1.21.x - 1.18.x 3.5.x\t1.20.x - 1.17.x 3.4.x\t1.19.x - 1.16.x 3.3.x\t1.18.x - 1.15.x 3.2.x\t1.18.x - 1.15.x 3.1.x\t1.17.x - 1.14.x 3.0.x\t1.16.x - 1.13.x 2.16.x\t1.16.x - 1.15.x 2.15.x\t1.15.x - 1.14.x 2.14.x\t1.14.x - 1.13.x 2.13.x\t1.13.x - 1.12.x 2.12.x\t1.12.x - 1.11.x 2.11.x\t1.11.x - 1.10.x 2.10.x\t1.10.x - 1.9.x 2.9.x\t1.10.x - 1.9.x 2.8.x\t1.9.x - 1.8.x 2.7.x\t1.8.x - 1.7.x 2.6.x\t1.7.x - 1.6.x 2.5.x\t1.6.x - 1.5.x 2.4.x\t1.6.x - 1.5.x 2.3.x\t1.5.x - 1.4.x 2.2.x\t1.5.x - 1.4.x 2.1.x\t1.5.x - 1.4.x 2.0.x\t1.4.x - 1.3.x 使用 接下来由我来简单的介绍如何使用 Helm.\n添加 chart 存储库 我们可以通过 helm repo add 命令添加各种存储库。\nhelm repo add bitnami https://charts.bitnami.com/bitnami 展示可以安装的 chart 我们可以通过 helm search repo 命令搜索相应 chart 存储库中可以安装的 chart\nhelm search repo bitnami bitnami/airflow 14.0.11 2.5.1 Apache Airflow is a tool to express and execute... bitnami/apache 9.2.15 2.4.55 Apache HTTP Server is an open-source HTTP serve... bitnami/appsmith 0.1.9 1.9.2 Appsmith is an open source platform for buildin... bitnami/argo-cd 4.4.6 2.5.10 Argo CD is a continuous delivery tool for Kuber... bitnami/argo-workflows 5.1.4 3.4.4 Argo Workflows is meant to orchestrate Kubernet... bitnami/aspnet-core 4.0.3 7.0.2 ASP.NET Core is an open-source framework .... 安装 chart 要安装 chart，可以通过 helm install 命令来安装。\n$ helm repo update # Make sure we get the latest list of charts $ helm install bitnami/mysql --generate-name NAME: mysql-1612624192 LAST DEPLOYED: Sat Feb 6 16:09:56 2021 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: ... 查看安装 想查看 Helm 安装了哪些 chart，可以通过 helm list (helm ls) 命令来安装。\n$ helm ls NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION pyroscope default 7 2023-01-04 09:41:40.388931012 +0000 UTC deployed pyroscope-0.2.86 0.36.0 pyroscope-ebpf default 1 2023-01-04 08:46:33.590784083 +0000 UTC deployed pyroscope-ebpf-0.1.25 0.36.0 卸载 要卸载一个版本可以通过 helm uninstall 命令：\n$ helm uninstall mysql-1612624192 release \u0026#34;mysql-1612624192\u0026#34; uninstalled 其它命令 要想查看 Helm 的其他命令可以通过 helm get -h 查看。\n小结 本文简单介绍了 helm，介绍了如何安装 helm，以及对 helm 的简单使用。\n参考 https://helm.sh/ https://www.cncf.io/reports/helm-project-journey-report/ ","permalink":"https://jasminides.com/posts/helm-%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/","summary":"\u003cp\u003e今天我来简单介绍 kubernetes 生态中一个重要一环 - 包管理工具 Helm。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eHelm 是 Kubernetes 的开源包管理器。它提供了提供、共享和使用为 Kubernetes 构建的软件的能力。\u003c/p\u003e\n\u003cp\u003eHelm 于 2015 年在 Deis 创建，后来被微软收购。现在称为 Helm Classic 的是在当年 11 月的首届 KubeCon 上推出的。2016 年 1 月，Helm Classic 与谷歌的 Kubernetes 部署管理器合并到现在是 Helm 主要项目的存储库中。\u003c/p\u003e\n\u003cp\u003e该项目目前拥有超过 30,000 个 GitHub stars，每月从全球获得超过 200 万次下载。2020 年 4 月，Helm 在 CNCF 中获得毕业。\u003c/p\u003e\n\u003ch2 id=\"安装-helm\"\u003e安装 Helm\u003c/h2\u003e\n\u003ch3 id=\"二进制安装\"\u003e二进制安装\u003c/h3\u003e\n\u003cp\u003e1 打开 \u003ca href=\"https://github.com/helm/helm/releases\"\u003ehttps://github.com/helm/helm/releases\u003c/a\u003e , 下载你需要的版本\n2 解压安装包\n3 将文件夹中的 helm 二进制文件移动到相应的位置\u003c/p\u003e\n\u003ch3 id=\"脚本安装\"\u003e脚本安装\u003c/h3\u003e\n\u003cp\u003ehelm 官方提供了一个安装的脚本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ chmod \u003cspan style=\"color:#ae81ff\"\u003e700\u003c/span\u003e get_helm.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ./get_helm.sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了以上 2 种安装方式，你还可以通过各个操作系统的包管理工具安装和编译源码安装，这里就不过多赘述了。\u003c/p\u003e","title":"Helm 介绍及使用"},{"content":"最近一台 Ubuntu 出现了网络问题，ping baidu.com 出现了 temporary failure in name resolution 报错，根据我的经验这是服务器的 DNS 出现了问题，特此在本文记录一下如何设置 DNS 的过程。\n修改 netplan 配置文件 我先尝试修改 netplan 的配置文件，编辑相应的配置文件，我这里的路径是 /etc/netplan/00-installer-config.yaml, 修改后的内容如下：\nnetwork: ethernets: ens160: addresses: - 192.168.1.51/24 gateway4: 192.168.1.1 nameservers: addresses: - 114.114.114.114 search: [] version: 2 修改后执行 netplan apply, 重新 ping 后发现没有效果，未能解决问题。\n修改 /etc/resolv.conf 我们还可以通过修改 /etc/resolv.conf 文件来设置 dns, 虽然通过修改此文件可以解决我们的问题，但编辑 /etc/resolv.conf 文件时，发现了一行注释 This file is managed by man:systemd-resolved(8). Do not edit. 可以得知这个文件是由 man:systemd-resolved(8) 管理，/etc/resolv.conf 是一个动态生成的文件，下次重启服务器时此文件还会恢复到默认的内容，所以此方案只适合临时解决，不能一次性解决问题。\n接下来我来介绍如何永久的修改 /etc/resolv.conf\n修改 /etc/systemd/resolved.conf 文件 # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. # # Entries in this file show the compile time defaults. # You can change settings by editing this file. # Defaults can be restored by simply deleting this file. # # See resolved.conf(5) for details [Resolve] DNS=114.114.114.114 8.8.8.8 #FallbackDNS= #Domains= #LLMNR=no #MulticastDNS=no #DNSSEC=no #DNSOverTLS=no #Cache=no-negative #DNSStubListener=yes #ReadEtcHosts=yes ~ ~ ~ ~ ~ ~ ~ 添加要修改的 dns 信息。\n重启服务 接下来执行如下命令：\nsudo systemctl restart systemd-resolved sudo systemctl enable systemd-resolved sudo mv /etc/resolv.conf /etc/resolv.conf.bak sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf 再查看/etc/resolv.conf 文件就可以看到新的 dns 信息已经写入其中了，接下来再使用就不会被重置。\n","permalink":"https://jasminides.com/posts/ubuntu20.04-%E8%AE%BE%E7%BD%AE-dns/","summary":"\u003cp\u003e最近一台 Ubuntu 出现了网络问题，ping baidu.com 出现了  temporary failure in name resolution 报错，根据我的经验这是服务器的 DNS 出现了问题，特此在本文记录一下如何设置 DNS 的过程。\u003c/p\u003e\n\u003ch2 id=\"修改-netplan-配置文件\"\u003e修改 netplan 配置文件\u003c/h2\u003e\n\u003cp\u003e我先尝试修改 netplan 的配置文件，编辑相应的配置文件，我这里的路径是 \u003ccode\u003e/etc/netplan/00-installer-config.yaml\u003c/code\u003e, 修改后的内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003enetwork\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eethernets\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eens160\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eaddresses\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e192.168.1.51\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e/24\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003egateway4\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e192.168.1.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003enameservers\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003eaddresses\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#ae81ff\"\u003e114.114.114.114\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003esearch\u003c/span\u003e: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e修改后执行 \u003ccode\u003enetplan apply\u003c/code\u003e, 重新 ping 后发现没有效果，未能解决问题。\u003c/p\u003e\n\u003ch2 id=\"修改-etcresolvconf\"\u003e修改 /etc/resolv.conf\u003c/h2\u003e\n\u003cp\u003e我们还可以通过修改 /etc/resolv.conf  文件来设置 dns, 虽然通过修改此文件可以解决我们的问题，但编辑 /etc/resolv.conf  文件时，发现了一行注释 \u003ccode\u003e This file is managed by man:systemd-resolved(8). Do not edit.\u003c/code\u003e 可以得知这个文件是由 man:systemd-resolved(8) 管理，/etc/resolv.conf 是一个动态生成的文件，下次重启服务器时此文件还会恢复到默认的内容，所以此方案只适合临时解决，不能一次性解决问题。\u003c/p\u003e\n\u003cp\u003e接下来我来介绍如何永久的修改 /etc/resolv.conf\u003c/p\u003e\n\u003ch3 id=\"修改-etcsystemdresolvedconf-文件\"\u003e修改 /etc/systemd/resolved.conf 文件\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-conf\" data-lang=\"conf\"\u003e#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n#\n# Entries in this file show the compile time defaults.\n# You can change settings by editing this file.\n# Defaults can be restored by simply deleting this file.\n#\n# See resolved.conf(5) for details\n\n[Resolve]\nDNS=114.114.114.114 8.8.8.8\n#FallbackDNS=\n#Domains=\n#LLMNR=no\n#MulticastDNS=no\n#DNSSEC=no\n#DNSOverTLS=no\n#Cache=no-negative\n#DNSStubListener=yes\n#ReadEtcHosts=yes\n~                                                                                                                                       ~                                                                                                                                       ~                                                                                                                                       ~                                                                                                                                       ~                                                                                                                                       ~                                                                                                                                       ~                                      \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e添加要修改的 dns 信息。\u003c/p\u003e","title":"Ubuntu20.04 设置 DNS"},{"content":"最近工作需要使用 sql 语句进行 Postgresql json 类型字段的查询，本文特此记录下一些常用的函数。\nPostgresql json 类型简介 postgresql 支持两种 json 数据类型：json 和 jsonb，而两者唯一的区别在于效率，json 是对输入的完整拷贝，使用时再去解析，所以它会保留输入的空格，重复键以及顺序等。而 jsonb 是解析输入后保存的二进制，它在解析时会删除不必要的空格和重复的键，顺序和输入可能也不相同。使用时不用再次解析。两者对重复键的处理都是保留最后一个键值对。效率的差别：json 类型存储快，使用慢，jsonb 类型存储稍慢，使用较快。\njson 类型操作符 我们先介绍 json 和 jsonb 的一些常用通用操作符：\n操作符 右操作数类型 描述 示例 结果 -\u0026gt; int 获取 JSON 数组元素（索引从 0 开始） select \u0026lsquo;[{\u0026ldquo;a\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;},{\u0026ldquo;b\u0026rdquo;:\u0026ldquo;bar\u0026rdquo;},{\u0026ldquo;c\u0026rdquo;:\u0026ldquo;baz\u0026rdquo;}]\u0026rsquo;::json-\u0026gt;2; {\u0026ldquo;c\u0026rdquo;:\u0026ldquo;baz\u0026rdquo;} -\u0026gt; text 通过键获取值 select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;: {\u0026ldquo;b\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;}}\u0026rsquo;::json-\u0026gt;\u0026lsquo;a\u0026rsquo;; {\u0026ldquo;b\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;} -\u0026raquo; int 获取 JSON 数组元素为 text select \u0026lsquo;[1,2,3]\u0026rsquo;::json-\u0026raquo;2; 3 -\u0026raquo; text 通过键获取值为 text select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1,\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::json-\u0026raquo;\u0026lsquo;b\u0026rsquo;; 2 jsonb 独有的操作符 操作符 右操作数类型 描述 示例 结果 @\u0026gt; jsonb 左侧 json 最上层的值是否包含右边 json 对象 select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:{\u0026ldquo;b\u0026rdquo;:2}}\u0026rsquo;::jsonb @\u0026gt; \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb;\nselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb @\u0026gt; \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb; f\nt \u0026lt;@ jsonb 左侧 json 对象是否包含于右侧 json 最上层的值内 select \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb \u0026lt;@ \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb; t ? text text 是否作为左侧 Json 对象最上层的键 select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb ? \u0026lsquo;b\u0026rsquo;; t ?| text[] text[]中的任一元素是否作为左侧 Json 对象最上层的键 select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2, \u0026ldquo;c\u0026rdquo;:3}\u0026rsquo;::jsonb ?| array[\u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;]; t ?\u0026amp; text[] text[]中的所有元素是否作为左侧 Json 对象最上层的键 select \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb ?\u0026amp; array[\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;]; t || jsonb 连接两个 json 对象，组成一个新的 json 对象 select \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb || \u0026lsquo;[\u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;]\u0026rsquo;::jsonb; [\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;] - text 删除左侧 json 对象中键为 text 的键值对 select \u0026lsquo;{\u0026ldquo;a\u0026rdquo;: \u0026ldquo;b\u0026rdquo;}\u0026rsquo;::jsonb - \u0026lsquo;a\u0026rsquo;; {} - integer 删除数组指定索引处的元素，如果索引值为负数，则从右边计算索引值。如果最上层容器内不是数组，则抛出错误。 select \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb - 1; [\u0026ldquo;a\u0026rdquo;] 创建 json 类型 那我们该如何创建 json 类型呢，下面介绍一些常见的函数\n函数 描述 示例 结果 to_json(anyelement)\nto_jsonb(anyelement) 返回 json 或 jsonb 类型的值。数组和复合被转换（递归）成数组和对象。另外除数字、布尔、NULL 值（直接使用 NULL 抛出错误）外，其他标量必须有类型转换。（此处请参考原文） select to_json(\u0026lsquo;3\u0026rsquo;::int); 3 array_to_json(anyarray\n[, pretty_bool]) 以 JSON 数组返回该数组。PostgreSQL 多维数组变成 JSON 数组中的数组。\n如果 pretty_bool 为真，则在维度 1 元素之间添加换行。 select array_to_json(\u0026rsquo;{{1,5},{99,100}}\u0026rsquo;::int[],true); [[1,5],\n[99,100]] row_to_json(record\n[, pretty_bool]) 以 JSON 对象返回行。如果 pretty_bool 为真，则在级别 1 元素之间添加换行。 select row_to_json(row(1,\u0026lsquo;foo\u0026rsquo;),true); {\u0026ldquo;f1\u0026rdquo;:1,\n\u0026ldquo;f2\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;} json_build_array(VARIADIC \u0026ldquo;any\u0026rdquo;)\njsonb_build_array(VARIADIC \u0026ldquo;any\u0026rdquo;) 建立一个由可变参数列表组成的不同类型的 JSON 数组 select json_build_array(1,2,\u0026lsquo;3\u0026rsquo;,4,5); [1, 2, \u0026ldquo;3\u0026rdquo;, 4, 5] json 常见处理函数 函数 描述 示例 结果 json_array_length(json)\njsonb_array_length(jsonb) 返回 Json 数组最外层元素个数 select json_array_length(\u0026rsquo;[1,2,3,{\u0026ldquo;f1\u0026rdquo;:1,\u0026ldquo;f2\u0026rdquo;:[5,6]},4]\u0026rsquo;); 5 json_each(json)\njsonb_each(jsonb) setof key text, value json\nsetof key text, value jsonb\n将最外层 Json 对象转换为键值对集合 select json_each(\u0026rsquo;{\u0026ldquo;a\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;, \u0026ldquo;b\u0026rdquo;:\u0026ldquo;bar\u0026rdquo;}\u0026rsquo;); (a,\u0026ldquo;\u0026ldquo;\u0026ldquo;foo\u0026rdquo;\u0026rdquo;\u0026rdquo;)\n(b,\u0026ldquo;\u0026ldquo;\u0026ldquo;bar\u0026rdquo;\u0026rdquo;\u0026rdquo;) json_each_text(json)\njsonb_each_text(jsonb) setof key text, value text\n将最外层 Json 对象转换为键值对集合，且 value 为 text 类型 select json_each_text(\u0026rsquo;{\u0026ldquo;a\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;, \u0026ldquo;b\u0026rdquo;:\u0026ldquo;bar\u0026rdquo;}\u0026rsquo;); (a,foo)\n(b,bar) 参考 https://www.postgresql.org/docs/current/functions-json.html ","permalink":"https://jasminides.com/posts/postgresql-%E7%9A%84-json-%E7%B1%BB%E5%9E%8B/","summary":"\u003cp\u003e最近工作需要使用 sql 语句进行 Postgresql json 类型字段的查询，本文特此记录下一些常用的函数。\u003c/p\u003e\n\u003ch2 id=\"postgresql-json-类型简介\"\u003ePostgresql json 类型简介\u003c/h2\u003e\n\u003cp\u003epostgresql 支持两种 json 数据类型：json 和 jsonb，而两者唯一的区别在于效率，json 是对输入的完整拷贝，使用时再去解析，所以它会保留输入的空格，重复键以及顺序等。而 jsonb 是解析输入后保存的二进制，它在解析时会删除不必要的空格和重复的键，顺序和输入可能也不相同。使用时不用再次解析。两者对重复键的处理都是保留最后一个键值对。效率的差别：json 类型存储快，使用慢，jsonb 类型存储稍慢，使用较快。\u003c/p\u003e\n\u003ch3 id=\"json-类型操作符\"\u003ejson 类型操作符\u003c/h3\u003e\n\u003cp\u003e我们先介绍 json 和 jsonb 的一些常用通用操作符：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e操作符\u003c/th\u003e\n          \u003cth\u003e右操作数类型\u003c/th\u003e\n          \u003cth\u003e描述\u003c/th\u003e\n          \u003cth\u003e示例\u003c/th\u003e\n          \u003cth\u003e结果\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u0026gt;\u003c/td\u003e\n          \u003ctd\u003eint\u003c/td\u003e\n          \u003ctd\u003e获取 JSON 数组元素（索引从 0 开始）\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;[{\u0026ldquo;a\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;},{\u0026ldquo;b\u0026rdquo;:\u0026ldquo;bar\u0026rdquo;},{\u0026ldquo;c\u0026rdquo;:\u0026ldquo;baz\u0026rdquo;}]\u0026rsquo;::json-\u0026gt;2;\u003c/td\u003e\n          \u003ctd\u003e{\u0026ldquo;c\u0026rdquo;:\u0026ldquo;baz\u0026rdquo;}\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u0026gt;\u003c/td\u003e\n          \u003ctd\u003etext\u003c/td\u003e\n          \u003ctd\u003e通过键获取值\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;: {\u0026ldquo;b\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;}}\u0026rsquo;::json-\u0026gt;\u0026lsquo;a\u0026rsquo;;\u003c/td\u003e\n          \u003ctd\u003e{\u0026ldquo;b\u0026rdquo;:\u0026ldquo;foo\u0026rdquo;}\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u0026raquo;\u003c/td\u003e\n          \u003ctd\u003eint\u003c/td\u003e\n          \u003ctd\u003e获取 JSON 数组元素为 text\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;[1,2,3]\u0026rsquo;::json-\u0026raquo;2;\u003c/td\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u0026raquo;\u003c/td\u003e\n          \u003ctd\u003etext\u003c/td\u003e\n          \u003ctd\u003e通过键获取值为 text\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1,\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::json-\u0026raquo;\u0026lsquo;b\u0026rsquo;;\u003c/td\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"jsonb-独有的操作符\"\u003ejsonb 独有的操作符\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e操作符\u003c/th\u003e\n          \u003cth\u003e右操作数类型\u003c/th\u003e\n          \u003cth\u003e描述\u003c/th\u003e\n          \u003cth\u003e示例\u003c/th\u003e\n          \u003cth\u003e结果\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e@\u0026gt;\u003c/td\u003e\n          \u003ctd\u003ejsonb\u003c/td\u003e\n          \u003ctd\u003e左侧 json 最上层的值是否包含右边 json 对象\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:{\u0026ldquo;b\u0026rdquo;:2}}\u0026rsquo;::jsonb @\u0026gt; \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb;\u003cbr\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb @\u0026gt; \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb;\u003c/td\u003e\n          \u003ctd\u003ef\u003cbr\u003et\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u0026lt;@\u003c/td\u003e\n          \u003ctd\u003ejsonb\u003c/td\u003e\n          \u003ctd\u003e左侧 json 对象是否包含于右侧 json 最上层的值内\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb \u0026lt;@ \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb;\u003c/td\u003e\n          \u003ctd\u003et\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e?\u003c/td\u003e\n          \u003ctd\u003etext\u003c/td\u003e\n          \u003ctd\u003etext 是否作为左侧 Json 对象最上层的键\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2}\u0026rsquo;::jsonb ? \u0026lsquo;b\u0026rsquo;;\u003c/td\u003e\n          \u003ctd\u003et\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e?|\u003c/td\u003e\n          \u003ctd\u003etext[]\u003c/td\u003e\n          \u003ctd\u003etext[]中的任一元素是否作为左侧 Json 对象最上层的键\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;:1, \u0026ldquo;b\u0026rdquo;:2, \u0026ldquo;c\u0026rdquo;:3}\u0026rsquo;::jsonb ?| array[\u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;];\u003c/td\u003e\n          \u003ctd\u003et\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e?\u0026amp;\u003c/td\u003e\n          \u003ctd\u003etext[]\u003c/td\u003e\n          \u003ctd\u003etext[]中的所有元素是否作为左侧 Json 对象最上层的键\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb ?\u0026amp; array[\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;];\u003c/td\u003e\n          \u003ctd\u003et\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e||\u003c/td\u003e\n          \u003ctd\u003ejsonb\u003c/td\u003e\n          \u003ctd\u003e连接两个 json 对象，组成一个新的 json 对象\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb || \u0026lsquo;[\u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;]\u0026rsquo;::jsonb;\u003c/td\u003e\n          \u003ctd\u003e[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n          \u003ctd\u003etext\u003c/td\u003e\n          \u003ctd\u003e删除左侧 json 对象中键为 text 的键值对\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;{\u0026ldquo;a\u0026rdquo;: \u0026ldquo;b\u0026rdquo;}\u0026rsquo;::jsonb - \u0026lsquo;a\u0026rsquo;;\u003c/td\u003e\n          \u003ctd\u003e{}\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n          \u003ctd\u003einteger\u003c/td\u003e\n          \u003ctd\u003e删除数组指定索引处的元素，如果索引值为负数，则从右边计算索引值。如果最上层容器内不是数组，则抛出错误。\u003c/td\u003e\n          \u003ctd\u003eselect \u0026lsquo;[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;]\u0026rsquo;::jsonb - 1;\u003c/td\u003e\n          \u003ctd\u003e[\u0026ldquo;a\u0026rdquo;]\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"创建-json-类型\"\u003e创建 json 类型\u003c/h2\u003e\n\u003cp\u003e那我们该如何创建 json 类型呢，下面介绍一些常见的函数\u003c/p\u003e","title":"Postgresql 的 json 类型"},{"content":"本文我来讲解如何使用 APISIX 来代理 PostgreSQL 数据库服务。\n初试 最开始我以为很简单，我采用了直接在 APISIX DashBoard 上配置了一条路由，配置好后，连接发现无法成功连接，提示连接失败。\n经过仔细的思考，发现 PostgreSQL 是使用 TCP 协议的数据库，不能通过简单的 route 进行配置，必须使用 stream-proxy 进行代理，接下来我们来看看怎么样来进行配置。\nstream-proxy TCP 是许多流行应用程序和服务的协议，例如 LDAP、MySQL 和 RTMP。UDP（用户数据报协议）是许多流行的非事务性应用程序的协议，例如 DNS、系统日志和 RADIUS。\nAPISIX 可以动态负载平衡 TCP/UDP 代理。在 Nginx 的世界里，我们把 TCP/UDP proxy 称为 stream proxy，APISIX 就遵循了这个说法。\n启用 stream-proxy 要开启 APISIX 流代理需要在 APISIX 配置中开启，APISIX 默认是关闭的。\napisix: stream_proxy: # TCP/UDP proxy tcp: # TCP proxy address list - 9100 - \u0026#34;127.0.0.1:9101\u0026#34; udp: # UDP proxy address list - 9200 - \u0026#34;127.0.0.1:9211\u0026#34; 如果 apisix.enable_admin 为 true，则 HTTP 和流代理都启用了上述配置。\n如果您已将 设置 enable_admin 为 false，并且需要同时启用 HTTP 和流代理，请将 设置 only 为 false：\napisix: enable_admin: false stream_proxy: # TCP/UDP proxy only: false tcp: # TCP proxy address list - 9100 我修改后的配置如下：\napisix: node_listen: 9080 # APISIX listening port enable_ipv6: false port_admin: 9180 # use a separate port stream_proxy: # TCP/UDP proxy only: false tcp: # TCP proxy address list - 9100 - \u0026#34;127.0.0.1:9101\u0026#34; 配置了流代理相关的配置，我们也要配置流代理请求日志，APISIX 也是默认关闭的，需要我们自己开启，具体如下：\nnginx_config: # config for render the template to generate nginx.conf stream: enable_access_log: true # enable access log or not, default false access_log: logs/access_stream.log access_log_format: \u0026#34;$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time\u0026#34; # create your custom log format by visiting http://nginx.org/en/docs/varindex.html access_log_format_escape: default # allows setting json or default characters escaping in variables lua_shared_dict: etcd-cluster-health-check-stream: 10m lrucache-lock-stream: 10m plugin-limit-conn-stream: 10m 配置路由 开启了流代理后，接下来需要配置路由，由于 DashBoard 没有提供流代理的配置，我们只能通过接口来创建流路由，来看看我的配置吧：\ncurl http://127.0.0.1:9180/apisix/admin/stream_routes/1 -H \u0026#39;X-API-KEY: xx\u0026#39; -X PUT -d \u0026#39; { \u0026#34;server_port\u0026#34;: 9100, \u0026#34;upstream\u0026#34;: { \u0026#34;nodes\u0026#34;: { \u0026#34;xxx:5432\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34; }, \u0026#34;plugins\u0026#34;: { \u0026#34;ip-restriction\u0026#34;: { \u0026#34;whitelist\u0026#34;: [ \u0026#34;127.0.0.1\u0026#34;, \u0026#34;xx\u0026#34;, \u0026#34;192.168.1.117\u0026#34; ] } } }\u0026#39; 在这个配置里，我通过 9100 端口将数据库代理出去，并添加了 ip-restriction 白名单，只允许特定 ip 进行访问。\n小结 在本文中，我简单介绍了如何使用 APISIX 来代理数据库 TCP 服务的过程，并添加了白名单来限制 IP 访问，通过 APISIX stream_proxy 我们能很轻松的代理 TCP/UDP 服务。\n参考 https://apisix.apache.org/docs/apisix/2.15/stream-proxy/ ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-apisix-%E4%BB%A3%E7%90%86-postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"\u003cp\u003e本文我来讲解如何使用 APISIX 来代理 PostgreSQL 数据库服务。\u003c/p\u003e\n\u003ch2 id=\"初试\"\u003e初试\u003c/h2\u003e\n\u003cp\u003e最开始我以为很简单，我采用了直接在 APISIX DashBoard 上配置了一条路由，配置好后，连接发现无法成功连接，提示连接失败。\u003c/p\u003e\n\u003cp\u003e经过仔细的思考，发现 PostgreSQL 是使用 TCP 协议的数据库，不能通过简单的 route 进行配置，必须使用 stream-proxy 进行代理，接下来我们来看看怎么样来进行配置。\u003c/p\u003e\n\u003ch2 id=\"stream-proxy\"\u003estream-proxy\u003c/h2\u003e\n\u003cp\u003eTCP 是许多流行应用程序和服务的协议，例如 LDAP、MySQL 和 RTMP。UDP（用户数据报协议）是许多流行的非事务性应用程序的协议，例如 DNS、系统日志和 RADIUS。\u003c/p\u003e\n\u003cp\u003eAPISIX 可以动态负载平衡 TCP/UDP 代理。在 Nginx 的世界里，我们把 TCP/UDP proxy 称为 stream proxy，APISIX 就遵循了这个说法。\u003c/p\u003e\n\u003ch3 id=\"启用-stream-proxy\"\u003e启用 stream-proxy\u003c/h3\u003e\n\u003cp\u003e要开启 APISIX 流代理需要在 APISIX 配置中开启，APISIX 默认是关闭的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eapisix\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003estream_proxy\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# TCP/UDP proxy\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003etcp\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# TCP proxy address list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e9100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1:9101\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eudp\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# UDP proxy address list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e9200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1:9211\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果 apisix.enable_admin 为 true，则 HTTP 和流代理都启用了上述配置。\u003c/p\u003e","title":"使用 APISIX 代理 PostgreSQL 数据库"},{"content":"最近在使用 DataX 进行 PostgreSQL 和 PostgreSQL 之间的数据同步，在数据同步过程中，遇到了一个问题，在本文简单记录下问题和相应的解决方案。\n问题 在一次数据同步中，DataX 执行失败，错误信息如下：\n具体错误信息为：com.alibaba.datax.common.exception.DataXException: Code:[DBUtilErrorCode-12], Description:[不支持的数据库类型. 请注意查看 DataX 已经支持的数据库类型以及数据库版本.]. - 您的配 置文件中的列配置信息有误. 因为DataX 不支持数据库读取这种字段类型. 字段名:[country], 字段名称:[1111], 字段Java类型:[java.lang.String]. 请尝试使用数据库函数将其转换datax支持的类型 我的配置如下：\n{ \u0026#34;job\u0026#34;: { \u0026#34;setting\u0026#34;: { \u0026#34;speed\u0026#34;: { \u0026#34;channel\u0026#34;: 3 }, \u0026#34;errorLimit\u0026#34;: { \u0026#34;record\u0026#34;: 0, \u0026#34;percentage\u0026#34;: 0.02 } }, \u0026#34;content\u0026#34;: [ { \u0026#34;reader\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlreader\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;xasdas\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country\u0026#34; ], \u0026#34;connection\u0026#34;: [ { \u0026#34;table\u0026#34;: [ \u0026#34;xx\u0026#34; ], \u0026#34;jdbcUrl\u0026#34;: [ \u0026#34;jdbc:postgresql://xxx:5432/xxxx\u0026#34; ] } ] } }, \u0026#34;writer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlwriter\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;xxxx\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;x\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country\u0026#34; ], \u0026#34;preSql\u0026#34;: [ ], \u0026#34;postSql\u0026#34;: [ ], \u0026#34;connection\u0026#34;: [ { \u0026#34;jdbcUrl\u0026#34;: \u0026#34;jdbc:postgresql://xxx:5432/xxxx\u0026#34;, \u0026#34;table\u0026#34;: [ \u0026#34;xx\u0026#34; ] } ] } } } ] } } 通过检查数据库字段，发现 country 字段是 jsonb 类型，DataX 不支持此类型，DataX 的支持列表：\nDataX 内部类型 PostgreSQL 数据类型 Long bigint, bigserial, integer, smallint, serial Double double precision, money, numeric, real String varchar, char, text, bit, inet Date date, time, timestamp Boolean bool Bytes bytea 那该如何解决呢，我查看了相关的 issues 和 pr , 发现了一些通过修改源代码的解决方案和一些不修改代码的方案，由于对 java 不熟悉，就不采用修改代码的方式来解决问题。\n解决方案 接下来我来介绍尝试的几种方案和最终采用的方案。\n修改列类型 最方便的可能是直接将列的类型改为支持的类型，但由于数据库已经大规模使用了，修改数据库类型会影响正在使用的程序，所以不采用此方法。\nreader 修改字段类型 第二种方法是在 DataX reader 时将列类型转换为 varchar 类型，writer 列不动，看看 postgresql 能否自动将数据类型转换为 jsonb 类型。\n修改后的配置如下：\n{ \u0026#34;job\u0026#34;: { \u0026#34;setting\u0026#34;: { \u0026#34;speed\u0026#34;: { \u0026#34;channel\u0026#34;: 3 }, \u0026#34;errorLimit\u0026#34;: { \u0026#34;record\u0026#34;: 0, \u0026#34;percentage\u0026#34;: 0.02 } }, \u0026#34;content\u0026#34;: [ { \u0026#34;reader\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlreader\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;xxxx\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;xxxx\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country::varchar\u0026#34; ], \u0026#34;connection\u0026#34;: [ { \u0026#34;table\u0026#34;: [ \u0026#34;xxxx\u0026#34; ], \u0026#34;jdbcUrl\u0026#34;: [ \u0026#34;jdbc:postgresql://xxxx3:5432/xxxx\u0026#34; ] } ] } }, \u0026#34;writer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlwriter\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;xxxx\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country\u0026#34; ], \u0026#34;preSql\u0026#34;: [ ], \u0026#34;postSql\u0026#34;: [ ], \u0026#34;connection\u0026#34;: [ { \u0026#34;jdbcUrl\u0026#34;: \u0026#34;jdbc:postgresql://xxx:5432/xxx\u0026#34;, \u0026#34;table\u0026#34;: [ \u0026#34;xx\u0026#34; ] } ] } } } ] } } 运行后还是没有成功同步，出现报错：\n[不支持的数据库类型. 请注意查看 DataX 已经支持的数据库类型以及数据库版本.]. - 您的配置文件中的列配置信息有误. 因为DataX 不支持数据库写入这种字段类型. 字段名:[country], 字段类型:[1111], 字段Java类型:[jsonb]. 请修改表中该字段的类型或者不同步该字段 临时列写入 第三种方法是第二种的扩展，除了在 reader 时进行数据转换，writer 时将 reader 转换的数据写入临时列中，写入后通过 postSql 将临时列的值更新至正确的列上。\n具体的配置如下：\n{ \u0026#34;job\u0026#34;: { \u0026#34;setting\u0026#34;: { \u0026#34;speed\u0026#34;: { \u0026#34;channel\u0026#34;: 3 }, \u0026#34;errorLimit\u0026#34;: { \u0026#34;record\u0026#34;: 0, \u0026#34;percentage\u0026#34;: 0.02 } }, \u0026#34;content\u0026#34;: [ { \u0026#34;reader\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlreader\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;postgres\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country::varchar\u0026#34; ], \u0026#34;connection\u0026#34;: [ { \u0026#34;table\u0026#34;: [ \u0026#34;xx\u0026#34; ], \u0026#34;jdbcUrl\u0026#34;: [ \u0026#34;jdbc:postgresql://xxx:5432/xxx\u0026#34; ] } ] } }, \u0026#34;writer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;postgresqlwriter\u0026#34;, \u0026#34;parameter\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;postgres\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;xx\u0026#34;, \u0026#34;column\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;country_tmp\u0026#34; ], \u0026#34;preSql\u0026#34;: [ ], \u0026#34;postSql\u0026#34;: [ \u0026#34;UPDATE matches SET country = country_tmp::JSONB;\u0026#34; ], \u0026#34;connection\u0026#34;: [ { \u0026#34;jdbcUrl\u0026#34;: \u0026#34;jdbc:postgresql://xxxx:5432/xxx\u0026#34;, \u0026#34;table\u0026#34;: [ \u0026#34;xxx\u0026#34; ] } ] } } } ] } } 运行后顺利同步成功了。此方案就是我采用的最终解决方案。\n小结 本文主要介绍了在 postgresql 和 postgresql 之间遇到的一个 jsonb 数据类型不支持的问题，本文简单介绍了这个问题，并给出了不修改代码的解决方案，\n参考 https://github.com/alibaba/DataX https://github.com/alibaba/DataX/blob/master/postgresqlwriter/doc/postgresqlwriter.md https://github.com/alibaba/DataX/blob/master/postgresqlreader/doc/postgresqlreader.md ","permalink":"https://jasminides.com/posts/datax-%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e最近在使用 DataX 进行 PostgreSQL 和 PostgreSQL 之间的数据同步，在数据同步过程中，遇到了一个问题，在本文简单记录下问题和相应的解决方案。\u003c/p\u003e\n\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e在一次数据同步中，DataX 执行失败，错误信息如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e具体错误信息为：com.alibaba.datax.common.exception.DataXException: Code:[DBUtilErrorCode-12], Description:[不支持的数据库类型. 请注意查看 DataX 已经支持的数据库类型以及数据库版本.].  - 您的配\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e置文件中的列配置信息有误. 因为DataX 不支持数据库读取这种字段类型. 字段名:[country], 字段名称:[1111], 字段Java类型:[java.lang.String]. 请尝试使用数据库函数将其转换datax支持的类型 \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我的配置如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;job\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;setting\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;speed\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;channel\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;errorLimit\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;record\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;percentage\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0.02\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;reader\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;postgresqlreader\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003e\u0026#34;parameter\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xasdas\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;column\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;connection\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;table\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;jdbcUrl\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;jdbc:postgresql://xxx:5432/xxxx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;writer\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;postgresqlwriter\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003e\u0026#34;parameter\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxxx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;column\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;preSql\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;postSql\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;connection\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;jdbcUrl\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;jdbc:postgresql://xxx:5432/xxxx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;table\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过检查数据库字段，发现 country 字段是 jsonb 类型，DataX 不支持此类型，DataX 的支持列表：\u003c/p\u003e","title":"DataX 数据同步中遇到的问题"},{"content":"我们在日常开发中，常常会对时间进行各种处理，今天我来介绍一个 go 处理时间的库 golang-module/carbon。\nCarbon 是一个轻量级、语义化、对开发者友好的 golang 时间处理库，支持链式调用。\n安装 go 版本大于 1.16\ngo get -u github.com/golang-module/carbon/v2 版本小于 1.16\ngo get -u github.com/golang-module/carbon 使用 创建 carbon 实例 carbon.Now() // 获取当前时间 carbon.Now(\u0026#34;Asia/Qatar\u0026#34;).ToDateTimeString() // 不同时区当前的时间，卡塔尔当前的时间 carbon.Yesterday() // 昨天 carbon.CreateFromTime(22, 9, 13).ToString() carbon.Tomorrow().ToDateString() // 明天 标准库转换 carbon 还可以和标准库 time 进行相互转换。\n// 将 标准库 time 转换为 carbon 实例 carbon.Time2Carbon(time.Now()) // carbon 转换为 time.Time 解析字符串 carbon 可以解析字符串，生成 carbon 实例\n// 将时间字符串转换为 carbon 实例 fmt.Println(carbon.Parse(\u0026#34;1998-04-01\u0026#34;).ToDateTimeString()) carbon.Parse(\u0026#34;tomorrow\u0026#34;).ToString() carbon.ParseByFormat(\u0026#34;2020|08|05 13|14|15\u0026#34;, \u0026#34;Y|m|d H|i|s\u0026#34;).ToDateTimeString() // 2020-08-05 13:14:15 carbon.ParseByFormat(\u0026#34;It is 2020-08-05 13:14:15\u0026#34;, \u0026#34;\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\u0026#34;).ToDateTimeString() // 2020-08-05 13:14:15 carbon.ParseByFormat(\u0026#34;今天是 2020 年 08 月 05 日 13 时 14 分 15 秒\u0026#34;, \u0026#34;今天是 Y 年 m 月 d 日 H 时 i 分 s 秒\u0026#34;).ToDateTimeString() // 2020-08-05 13:14:15 carbon.ParseByFormat(\u0026#34;2020-08-05 13:14:15\u0026#34;, \u0026#34;Y-m-d H:i:s\u0026#34;, carbon.Tokyo).ToDateTimeString() // 2020-08-05 14:14:15 获取开始时间和结束时间 carbon 可以很方便的获取一个时刻的开始和结束\n// 获取本世纪的开始 fmt.Println(carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).StartOfCentury().ToDateTimeString()) // 本世纪结束时间 fmt.Println(carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).EndOfCentury().ToDateTimeString()) // 本年结束时间 carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).EndOfYear().ToDateTimeString() 时间旅行 carbon 实现了时间旅行的功能，增加或减少时间可以到达另一个时间点\n// 三个世纪后 carbon.Parse(\u0026#34;2020-02-29 13:14:15\u0026#34;).AddCenturies(3).ToDateTimeString() // 2320-02-29 13:14:15 // 一个世纪后 (月份不溢出) carbon.Parse(\u0026#34;2020-02-29 13:14:15\u0026#34;).AddCenturyNoOverflow().ToDateTimeString() // 30 天后 fmt.Println(carbon.Now().AddDays(30).ToDateTimeString()) // 30 天前 fmt.Println(carbon.Now().SubDays(30).ToDateTimeString()) 时间差 carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).DiffInSeconds(carbon.Parse(\u0026#34;2020-08-05 13:14:14\u0026#34;)) // -1 例子 接下来看看实际的例子：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/golang-module/carbon/v2\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Printf(\u0026#34;%s\\n\u0026#34;, carbon.Now()) fmt.Printf(\u0026#34;%s\\n\u0026#34;, carbon.CreateFromTimestamp(0).ToString()) fmt.Println(carbon.Now(\u0026#34;Asia/Qatar\u0026#34;).ToDateTimeString()) fmt.Println(carbon.CreateFromTime(22, 9, 13).ToString()) fmt.Println(carbon.Parse(\u0026#34;1998-04-01\u0026#34;).ToDateTimeString()) fmt.Println(carbon.Time2Carbon(time.Now())) fmt.Println(carbon.Now().Carbon2Time()) fmt.Println(carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).StartOfCentury().ToDateTimeString()) fmt.Println(carbon.Parse(\u0026#34;2020-08-05 13:14:15\u0026#34;).EndOfCentury().ToDateTimeString()) fmt.Println(carbon.Parse(\u0026#34;2020-02-29 13:14:15\u0026#34;).AddCenturies(3).ToDateTimeString()) fmt.Println(carbon.Now().AddDays(30).ToDateTimeString()) fmt.Println(carbon.Now().SubDays(30).ToDateTimeString()) } 2022-12-03 23:51:28 1970-01-01 08:00:00 +0800 CST 2022-12-03 18:51:28 2022-12-03 22:09:13.9376781 +0800 CST 1998-04-01 00:00:00 2022-12-03 23:51:28 2022-12-03 23:51:28.9376781 +0800 CST 2000-01-01 00:00:00 2099-12-31 23:59:59 2320-02-29 13:14:15 2023-01-02 23:51:28 2022-11-03 23:51:28 小结 本文主要结束了一个时间处理库 carbon, 从文档来看，carbon 提供的功能特别丰富，让你不用做额外的处理。\n参考 https://github.com/golang-module/carbon ","permalink":"https://jasminides.com/posts/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-carbon/","summary":"\u003cp\u003e我们在日常开发中，常常会对时间进行各种处理，今天我来介绍一个 go 处理时间的库 golang-module/carbon。\u003c/p\u003e\n\u003cp\u003eCarbon 是一个轻量级、语义化、对开发者友好的 golang 时间处理库，支持链式调用。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003ego 版本大于 1.16\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get -u github.com/golang-module/carbon/v2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e版本小于 1.16\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get -u github.com/golang-module/carbon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003ch3 id=\"创建-carbon-实例\"\u003e创建 carbon 实例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 获取当前时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Asia/Qatar\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 不同时区当前的时间，卡塔尔当前的时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYesterday\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 昨天\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCreateFromTime\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToString\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTomorrow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eToDateString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 明天\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"标准库转换\"\u003e标准库转换\u003c/h3\u003e\n\u003cp\u003ecarbon 还可以和标准库 time 进行相互转换。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 将 标准库 time 转换为 carbon 实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime2Carbon\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// carbon 转换为 time.Time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解析字符串\"\u003e解析字符串\u003c/h3\u003e\n\u003cp\u003ecarbon 可以解析字符串，生成 carbon 实例\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 将时间字符串转换为 carbon 实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1998-04-01\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tomorrow\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToString\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParseByFormat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2020|08|05 13|14|15\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Y|m|d H|i|s\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2020-08-05 13:14:15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParseByFormat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;It is 2020-08-05 13:14:15\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2020-08-05 13:14:15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParseByFormat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;今天是 2020 年 08 月 05 日 13 时 14 分 15 秒\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;今天是 Y 年 m 月 d 日 H 时 i 分 s 秒\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2020-08-05 13:14:15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParseByFormat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2020-08-05 13:14:15\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Y-m-d H:i:s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecarbon\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTokyo\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eToDateTimeString\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2020-08-05 14:14:15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"获取开始时间和结束时间\"\u003e获取开始时间和结束时间\u003c/h3\u003e\n\u003cp\u003ecarbon 可以很方便的获取一个时刻的开始和结束\u003c/p\u003e","title":"Go 时间处理库 carbon"},{"content":"本文我来讲讲 Superset 的简单使用，并使用 superset 制作一个简单的图表。\nApache Superset 介绍 Apache Superset 是一款现代化的开源大数据工具，也是企业级商业智能 Web 应用，用于数据探索分析和数据可视化。它提供了简单易用的无代码可视化构建器和声称是最先进的 SQL 编辑器，用户可以使用这些工具快速地构建数据仪表盘。\nSuperset 提供了源码、pypi、Docker 等多种安装方式，其文档称，Superset 目前在许多公司被大规模使用。例如，Superset 在 Airbnb 基于 Kubernetes 的生产环境中运行，为每天查看超过 10 万张图表的 600 多名活跃用户提供服务。\nApache Superset 将 SQL IDE、数据浏览工具、拖拽式仪表板编辑器和插件组合使用，以构建自定义的可视化效果，支持从许多关系数据库和非关系数据库中创建仪表板，这些数据库包括 SQLite、MySQL，以及 Amazon Redshift、Google BigQuery、Snowflake、Oracle 数据库、IBM DB2 和其他各种兼容的数据源，并且可以连接到 Apache Drill 和 Apache Druid。此外，Superset 还适用于云原生场景和 Docker。\n安装 我采用官方提供的 helm chart 安装在 Kubernetes 上，安装过程中遇到了一些问题。这里就不过多讲述了，接下来进入本文的正题，如何使用 superset 制作一个简单的图表呢。\n简单使用 连接数据源 我们打开 Superset 主界面，点击右上角 settings ,选择 连接数据库选项，进入数据库配置界面。点击右上角的添加数据库，选择相应的数据源，并填写相应的数据库连接配置，superset 内置几种常见的数据源，如果你想添加的数据源类型不再此列，可能需要安装相应的 python package 来解决。\n在数据源连接的配置里还可以进行权限、安全性的配置。\n数据源添加完成后，你就可以在界面内看到所添加的数据源了。\n创建 Datasets 有了数据源后，我们需要创建一个 Dataset 来支持后续的图表创建。在主界面点击导航上的 SQL 下的 SQL Lab。\n由于原始数据中数据可能会比较大，我们可能会对原有数据源的表进行裁剪，形成一个数据集。\n我们通过 sql 语句查询出数据后，可以通过 save 按钮保存为数据集。\n建立图表 有了数据集后，我们就可以来创建我们的第一张图表了。\n我们来创建一个图表来展示每日 pv 的变化，我们选择刚才创建的数据集，我们选择时序折线图来展示，时间维度我们选择天，mertics 即我们要展示的指标，通过简单的配置，我们就完成了一个简单的每日 pv 变化的图表。\n小结 本文简单的讲述了使用 Superset 从 0 至 1 创建一个图表的过程，由于才刚刚接触，还有许多地方还不熟悉，需要多多学习。\n我的初步感受是，Superset 需要 sql 的基础知识，不太适合非技术人员使用。\n参考 https://superset.apache.org/ ","permalink":"https://jasminides.com/posts/superset-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","summary":"\u003cp\u003e本文我来讲讲 Superset 的简单使用，并使用 superset 制作一个简单的图表。\u003c/p\u003e\n\u003ch2 id=\"apache-superset-介绍\"\u003eApache Superset 介绍\u003c/h2\u003e\n\u003cp\u003eApache Superset 是一款现代化的开源大数据工具，也是企业级商业智能 Web 应用，用于数据探索分析和数据可视化。它提供了简单易用的无代码可视化构建器和声称是最先进的 SQL 编辑器，用户可以使用这些工具快速地构建数据仪表盘。\u003c/p\u003e\n\u003cp\u003eSuperset 提供了源码、pypi、Docker 等多种安装方式，其文档称，Superset 目前在许多公司被大规模使用。例如，Superset 在 Airbnb 基于 Kubernetes 的生产环境中运行，为每天查看超过 10 万张图表的 600 多名活跃用户提供服务。\u003c/p\u003e\n\u003cp\u003eApache Superset 将 SQL IDE、数据浏览工具、拖拽式仪表板编辑器和插件组合使用，以构建自定义的可视化效果，支持从许多关系数据库和非关系数据库中创建仪表板，这些数据库包括 SQLite、MySQL，以及 Amazon Redshift、Google BigQuery、Snowflake、Oracle 数据库、IBM DB2 和其他各种兼容的数据源，并且可以连接到 Apache Drill 和 Apache Druid。此外，Superset 还适用于云原生场景和 Docker。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e我采用官方提供的 helm chart 安装在 Kubernetes 上，安装过程中遇到了一些问题。这里就不过多讲述了，接下来进入本文的正题，如何使用 superset 制作一个简单的图表呢。\u003c/p\u003e\n\u003ch2 id=\"简单使用\"\u003e简单使用\u003c/h2\u003e\n\u003ch3 id=\"连接数据源\"\u003e连接数据源\u003c/h3\u003e\n\u003cp\u003e我们打开 Superset 主界面，点击右上角 settings ,选择 连接数据库选项，进入数据库配置界面。点击右上角的添加数据库，选择相应的数据源，并填写相应的数据库连接配置，superset 内置几种常见的数据源，如果你想添加的数据源类型不再此列，可能需要安装相应的 python package 来解决。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/superset1/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"Superset 简单使用"},{"content":"前面的文章讲了 Fly.io 的入门使用和如何使用 Fly.io 部署 go 开发的应用程序。今天我们来继续讲解使用 Fly.io 部署 对象存储服务 MinIO.\nMinIO 是什么我就不过多介绍了，接下来我们就进入正题，进行 MinIO 服务的部署。\n准备 Dockerfile 文件 我们先准备 MinIO docker 部署相关的文件，我们使用官方的镜像进行部署，Dockerfile 文件内容如下：\nFROM minio/minio CMD [ \u0026#34;server\u0026#34;, \u0026#34;/data\u0026#34;, \u0026#34;--console-address\u0026#34;, \u0026#34;:9001\u0026#34;] MinIO 的数据文件将存储在 data 目录下，指定 9001 为 web 控制台的端口，如果不指定将会使用随机端口。\n初始化 Fly.io 应用 接下来像以前一样使用 flyctl launch 命令进行应用的初始化。\n我们照常不使用数据库，不立即部署，生成的配置如下：\n# fly.toml file generated for twilight-lake-5450 on 2022-11-19T22:34:39+08:00 app = \u0026#34;twilight-lake-5450\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 processes = [] [env] [experimental] allowed_public_ports = [] auto_rollback = true [[services]] http_checks = [] internal_port = 8080 processes = [\u0026#34;app\u0026#34;] protocol = \u0026#34;tcp\u0026#34; script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \u0026#34;connections\u0026#34; [[services.ports]] force_https = true handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [[services.tcp_checks]] grace_period = \u0026#34;1s\u0026#34; interval = \u0026#34;15s\u0026#34; restart_limit = 0 timeout = \u0026#34;2s\u0026#34; 如果我们要限制从公网连接 MinIO ,只允许和 MinIO 使用相同网络的应用访问，只要删除 [[services]] 下的内容即可。\n数据存储 Fly.io 应用部署的 vm 和 image 是临时的，每当你删除或移动应用程序时，当前应用写入的数据就会丢失，为了保持数据，我们要创建存储卷来持久化数据。\n我们使用 flyctl vol create miniodata 来创建持久化存储，需要注意的是存储卷要和 MinIO 应用要在同一个区域。\n由于没有指定大小，默认使用 3GB 的大小。我们需要在应用配置中，将刚创建的存储卷挂载进应用中。\n[mounts] source = \u0026#34;miniodata\u0026#34; destination = \u0026#34;/data\u0026#34; 机密信息 MinIO 使用 MINIO_ROOT_USER 和 MINIO_ROOT_PASSWORD 环境变量来存储管理员的登录信息，为了安全起见，我们不能使用普通的环境变量直接设置，而是使用 Fly secret 来设置账号密码，使用 flyctl 设置的敏感信息，只会在真正使用时解密。\nflyctl secrets set MINIO_ROOT_USER=xxx MINIO_ROOT_PASSWORD=xxx 部署 接下来我们执行 flyctl deploy 进行应用的部署。\nMinIO 管理界面 MinIO 提供了一个 dashboard ,它使用我们前面 Dockerfile 指定的端口，我们前面设置端口为 9001，由于 fly,io 限制了对标准端口的访问，我们需要连接到我们的私有 WireGuard 网络。\n有 2 个方法可以进行连接：1 设置一个常规的 WireGuard 隧道 2 将端口代理到我们的本地，就像 k8s 的 kubectl proxy 一样\n由于我对 WireGuard 不熟悉，这里我将使用第二种方法进行，我们使用 flyctl proxy 9001 命令将端口代理到我本地。我们浏览器访问 http://localhost:9001/ 即可看到我们熟悉的界面 (访问有点慢)\nConsole 的用户名密码是我们前面设置的 MINIO_ROOT_USER 和 MINIO_ROOT_PASSWORD 的值。进入后我们可以创建存储桶、进行管理以及上传和下载文件。\n小结 本文我介绍了怎么样在 fly.io 上部署 MinIO 服务的过程，在实际过程中，我遇到了一些问题，你们在遇到问题时可以使用 flyctl logs 命令查看部署过程中的问题。\n参考 https://fly.io/ ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-fly.io-%E9%83%A8%E7%BD%B2-minio-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/","summary":"\u003cp\u003e前面的文章讲了 Fly.io 的入门使用和如何使用 Fly.io 部署 go 开发的应用程序。今天我们来继续讲解使用 Fly.io 部署 对象存储服务\nMinIO.\u003c/p\u003e\n\u003cp\u003eMinIO 是什么我就不过多介绍了，接下来我们就进入正题，进行 MinIO 服务的部署。\u003c/p\u003e\n\u003ch2 id=\"准备-dockerfile-文件\"\u003e准备 Dockerfile 文件\u003c/h2\u003e\n\u003cp\u003e我们先准备 MinIO docker 部署相关的文件，我们使用官方的镜像进行部署，Dockerfile 文件内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eminio/minio\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eCMD\u003c/span\u003e [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;server\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/data\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--console-address\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:9001\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMinIO 的数据文件将存储在 data 目录下，指定 9001 为 web 控制台的端口，如果不指定将会使用随机端口。\u003c/p\u003e\n\u003ch2 id=\"初始化-flyio-应用\"\u003e初始化 Fly.io 应用\u003c/h2\u003e\n\u003cp\u003e接下来像以前一样使用 \u003ccode\u003eflyctl launch\u003c/code\u003e 命令进行应用的初始化。\u003c/p\u003e\n\u003cp\u003e我们照常不使用数据库，不立即部署，生成的配置如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# fly.toml file generated for twilight-lake-5450 on 2022-11-19T22:34:39+08:00\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;twilight-lake-5450\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ekill_signal\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SIGINT\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ekill_timeout\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eexperimental\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eallowed_public_ports\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eauto_rollback\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp_checks\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einternal_port\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprotocol\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003escript_checks\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcurrency\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehard_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esoft_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;connections\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eports\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eforce_https\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehandlers\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eports\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehandlers\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tls\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etcp_checks\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003egrace_period\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einterval\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;15s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003erestart_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etimeout\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果我们要限制从公网连接 MinIO ,只允许和 MinIO 使用相同网络的应用访问，只要删除 [[services]] 下的内容即可。\u003c/p\u003e","title":"使用 Fly.io 部署 MinIO 对象存储服务"},{"content":"前面讲解了 Fly.io 的初步入门使用，本文讲解在没有 docker 环境情况下部署 go 开发的应用。\n项目 这里为了演示方便，简单使用 go 编写一个：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w,\u0026#34;hello world\u0026#34;) }) log.Println(\u0026#34;listening on\u0026#34;, 8080) log.Fatal(http.ListenAndServe(\u0026#34;:\u0026#34;+\u0026#34;8080\u0026#34;, nil)) } 安装 Flyctl 并登录 这个步骤上篇文章已经介绍过来，还不了解如何安装登录的可以参考前面的文章。\n配置 Fly 应用程序 进入项目的根目录，执行 flyctl launch,它会根据你输入的配置 (主要是应用名，部署区域，是否需要数据库和 redis) 来生成相应的配置文件，并帮你在远程构建器上打包镜像并部署，如果有 DOCKERFILE 文件就会使用你的进行构建，如果没有就会使用相应的官方文件进行构建镜像。\n需要注意的是你的应用需要监听 8080 端口，否则部署时会报错\n从日志可以看到打包好的镜像名是 registry.fly.io/cool-grass-2591:deployment-01GHPEDCXBC3K5NAGHNZWKT49H\nfly.toml 配置 我们来看看 flyctl 帮我们生成的 fly.toml 具体内容：\n# fly.toml file generated for cool-grass-2591 on 2022-11-13T01:32:35+08:00 app = \u0026#34;cool-grass-2591\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 processes = [] [env] [experimental] allowed_public_ports = [] auto_rollback = true [[services]] http_checks = [] internal_port = 8080 processes = [\u0026#34;app\u0026#34;] protocol = \u0026#34;tcp\u0026#34; script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \u0026#34;connections\u0026#34; [[services.ports]] force_https = true handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [[services.tcp_checks]] grace_period = \u0026#34;1s\u0026#34; interval = \u0026#34;15s\u0026#34; restart_limit = 0 timeout = \u0026#34;2s\u0026#34; 主要就是一些常规的服务端口配置等。\n查看服务状态 我们可以通过 flyctl status 查看服务的状态\n通过 flyctl open 可以在浏览器打开网站。\n小结 本文是简单的从 0 至 1 部署一个 go web 程序的流程，希望对你们有帮助。\n参考 https://fly.io/docs/getting-started/troubleshooting/ ","permalink":"https://jasminides.com/posts/fly.io-%E9%83%A8%E7%BD%B2-go-%E5%BA%94%E7%94%A8/","summary":"\u003cp\u003e前面讲解了 Fly.io 的初步入门使用，本文讲解在没有 docker 环境情况下部署 go 开发的应用。\u003c/p\u003e\n\u003ch2 id=\"项目\"\u003e项目\u003c/h2\u003e\n\u003cp\u003e这里为了演示方便，简单使用 go 编写一个：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandleFunc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFprintf\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;listening on\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListenAndServe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;8080\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"安装-flyctl-并登录\"\u003e安装 Flyctl 并登录\u003c/h2\u003e\n\u003cp\u003e这个步骤上篇文章已经介绍过来，还不了解如何安装登录的可以参考前面的文章。\u003c/p\u003e\n\u003ch2 id=\"配置-fly-应用程序\"\u003e配置 Fly 应用程序\u003c/h2\u003e\n\u003cp\u003e进入项目的根目录，执行 \u003ccode\u003eflyctl launch\u003c/code\u003e,它会根据你输入的配置 (主要是应用名，部署区域，是否需要数据库和 redis) 来生成相应的配置文件，并帮你在远程构建器上打包镜像并部署，如果有 DOCKERFILE 文件就会使用你的进行构建，如果没有就会使用相应的官方文件进行构建镜像。\u003c/p\u003e\n\u003cp\u003e需要注意的是你的应用需要监听 8080 端口，否则部署时会报错\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/fly2/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/fly2/img_3.png\" alt=\"img_3.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/fly2/img_4.png\" alt=\"img_4.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e从日志可以看到打包好的镜像名是 registry.fly.io/cool-grass-2591:deployment-01GHPEDCXBC3K5NAGHNZWKT49H\u003c/p\u003e\n\u003ch2 id=\"flytoml-配置\"\u003efly.toml 配置\u003c/h2\u003e\n\u003cp\u003e我们来看看 flyctl 帮我们生成的 fly.toml 具体内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# fly.toml file generated for cool-grass-2591 on 2022-11-13T01:32:35+08:00\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cool-grass-2591\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ekill_signal\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SIGINT\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ekill_timeout\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eexperimental\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eallowed_public_ports\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eauto_rollback\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehttp_checks\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003einternal_port\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;app\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprotocol\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003escript_checks\u003c/span\u003e = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcurrency\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehard_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esoft_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;connections\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eports\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eforce_https\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehandlers\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eports\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehandlers\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tls\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#a6e22e\"\u003eservices\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etcp_checks\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egrace_period\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einterval\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;15s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erestart_limit\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etimeout\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2s\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e主要就是一些常规的服务端口配置等。\u003c/p\u003e","title":"Fly.io 部署 go 应用"},{"content":"最近有一个需求，需要对 png 和 jpg 格式的图片进行压缩，jpg 格式的图片压缩比较简单，难点主要是针对 png 图片，本想继续采用前篇文章的方式将 png 转为 jpg 图片进行压缩的，但我发现部分转换后的图片出现比较大的问题，图片的背景由其它颜色变成了黑色，那看来不能采用原来的方法，得寻找新的方法，通过查阅资料发现了 2 个压缩 png 图片的工具 pngquant 和 pngcrush，接下来我就来分别介绍这 2 个工具。\npngquant pngquant 是一个命令行实用程序，也是一个用于 PNG 图像有损压缩的库。这种转换大大减少了文件大小 (通常多达 70%)，并保留了完全的 alpha 透明度。\n下载 可以通过官网提供的 gui 程序或者 命令行程序链接下载 pngquant，也可以通过源代码进行编译，我采用了编译好的命令行程序。\n参数 options: --force 覆盖原来输出的图片 --skip-if-larger 仅当原来图片小于原图片时才保留 --output file 输出的文件路径 --ext new.png 为输出文件名设置自定义扩展名。默认情况下使用-or8.png 或-fs8.png。 --quality min-max 指示使用达到或超过最高质量 pngquant 所需的最少颜色。如果转换导致质量低于最低质量，则图像将不会被保存（如果输出到标准输出，将输出 24 位原始图像）并将以状态码 99 退出。pngquant min 和 max 是 0（最差）到 100（完美）范围内的数字 --speed N 从 1（暴力）到 10（最快）的速度/质量权衡。默认值为 3。速度 10 的质量降低 5%，但比默认值快 8 倍。 --nofs 禁用 Floyd-Steinberg dithering --posterize N output lower-precision color (e.g. for ARGB4444 output) --strip remove optional metadata (default on Mac) --verbose 打印状态信息 简单使用 压缩单个 png pngquant \u0026ndash;force \u0026ndash;verbose \u0026ndash;quality=45-85 pngpath\npngquant.exe --force --verbose --quality=45-85 .\\gin_prometheus.png\n可以看到图片大小有了较大的压缩，\n压缩多个图片 pngquant.exe --force --verbose --quality=45-85 .\\*.png\n可以看到当前目录下的 png 图片都被压缩了，并且大小和图片效果都不错。\npngcrush 接下来介绍 pngcrush 这个工具，这个工具是各个论坛相关图像开源项目里推荐比较多的。\n安装 安装可以直接下载编译好的程序或者使用源码编译。\n使用 pngcrush.exe -reduce -brute .\\generics1.png .\\generics1_new.png\n-brute 是采用多种方法进行暴力压缩，会选取压缩效果最好的进行输出保存。\n小结 在简单使用这 2 个程序的过程中，我发现 pngquant 会比 pngcrush 好很多，不知道是不是参数使用不当的原因，最后我采用 pngquant 进行 png 压缩。\n参考 https://pngquant.org/ https://pmt.sourceforge.io/pngcrush/ https://overstarry.vip/posts/go%E5%8E%8B%E7%BC%A9png%E5%9B%BE%E5%83%8F%E5%A4%A7%E5%B0%8F/ ","permalink":"https://jasminides.com/posts/png-%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/","summary":"\u003cp\u003e最近有一个需求，需要对 png 和 jpg 格式的图片进行压缩，jpg 格式的图片压缩比较简单，难点主要是针对 png 图片，本想继续采用前篇文章的方式将 png\n转为 jpg 图片进行压缩的，但我发现部分转换后的图片出现比较大的问题，图片的背景由其它颜色变成了黑色，那看来不能采用原来的方法，得寻找新的方法，通过查阅资料发现了 2 个压缩 png\n图片的工具 pngquant 和 pngcrush，接下来我就来分别介绍这 2 个工具。\u003c/p\u003e\n\u003ch2 id=\"pngquant\"\u003epngquant\u003c/h2\u003e\n\u003cp\u003epngquant 是一个命令行实用程序，也是一个用于 PNG 图像有损压缩的库。这种转换大大减少了文件大小 (通常多达 70%)，并保留了完全的 alpha 透明度。\u003c/p\u003e\n\u003ch3 id=\"下载\"\u003e下载\u003c/h3\u003e\n\u003cp\u003e可以通过官网提供的 gui 程序或者 命令行程序链接下载 pngquant，也可以通过源代码进行编译，我采用了编译好的命令行程序。\u003c/p\u003e\n\u003ch3 id=\"参数\"\u003e参数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoptions:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --force           覆盖原来输出的图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --skip-if-larger  仅当原来图片小于原图片时才保留\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --output file     输出的文件路径\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --ext new.png     为输出文件名设置自定义扩展名。默认情况下使用-or8.png 或-fs8.png。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --quality min-max 指示使用达到或超过最高质量 pngquant 所需的最少颜色。如果转换导致质量低于最低质量，则图像将不会被保存（如果输出到标准输出，将输出 24 位原始图像）并将以状态码 99 退出。pngquant\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emin 和 max 是 0（最差）到 100（完美）范围内的数字\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --speed N         从 1（暴力）到 10（最快）的速度/质量权衡。默认值为 3。速度 10 的质量降低 5%，但比默认值快 8 倍。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --nofs            禁用 Floyd-Steinberg dithering\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --posterize N     output lower-precision color (e.g. for ARGB4444 output)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --strip           remove optional metadata (default on Mac)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --verbose         打印状态信息\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"简单使用\"\u003e简单使用\u003c/h3\u003e\n\u003ch3 id=\"压缩单个-png\"\u003e压缩单个 png\u003c/h3\u003e\n\u003cp\u003epngquant \u0026ndash;force \u0026ndash;verbose \u0026ndash;quality=45-85 pngpath\u003c/p\u003e","title":"Png 压缩工具"},{"content":"前言 最近需要使用 apisix 反向代理 oss, 实现通过域名访问相应的资源 (由于条件的限制，不能在 oss 绑定自定义域名)，我直接在 apisix dashboard 配置了路由，创建成功后，我通过浏览器访问时，发现资源不能预览会直接下载。\n这样的现象让我很奇怪，通过查阅相关资料，发现使用 OSS 默认域名通过文件 URL 从浏览器访问图片或者网页文件时，Response Header 中会自动加上 Content-Disposition:attachment。即从浏览器访问这些文件时，会以附件形式进行下载。\n解决 通过询问同事，得知他是通过 nginx 的 proxy_hide_header 忽略 Content-Disposition 解决的。那 apisix 该怎么实现呢，我通过自己的不断尝试和提 issue 询问官方人员，得知可以使用 response-rewrite 插件实现这个功能。\n接下来我就来介绍下我尝试的过程吧，我最开始是使用 proxy-rewrite 将 Content-Disposition 设置为 inline，具体配置如下：\n{ \u0026#34;uri\u0026#34;: \u0026#34;/*\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;xx\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;xixi.xx.work\u0026#34;, \u0026#34;plugins\u0026#34;: { \u0026#34;proxy-rewrite\u0026#34;: { \u0026#34;headers\u0026#34;: { \u0026#34;Content-Disposition\u0026#34;: \u0026#34;inline\u0026#34; }, \u0026#34;host\u0026#34;: \u0026#34;xx\u0026#34;, \u0026#34;regex_uri\u0026#34;: [ \u0026#34;/(.*)$\u0026#34;, \u0026#34;/xx/${1}\u0026#34; ] } }, \u0026#34;upstream\u0026#34;: { \u0026#34;nodes\u0026#34;: [ { \u0026#34;host\u0026#34;: \u0026#34;xxx.com\u0026#34;, \u0026#34;port\u0026#34;: 80, \u0026#34;weight\u0026#34;: 1 } ], \u0026#34;timeout\u0026#34;: { \u0026#34;connect\u0026#34;: 6, \u0026#34;send\u0026#34;: 6, \u0026#34;read\u0026#34;: 6 }, \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;, \u0026#34;scheme\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;pass_host\u0026#34;: \u0026#34;pass\u0026#34;, \u0026#34;keepalive_pool\u0026#34;: { \u0026#34;idle_timeout\u0026#34;: 60, \u0026#34;requests\u0026#34;: 1000, \u0026#34;size\u0026#34;: 320 } }, \u0026#34;status\u0026#34;: 1 } curl 结果：\n$ curl -I xxk/index.html HTTP/1.1 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 5556 Connection: keep-alive Date: Sat, 05 Nov 2022 06:45:06 GMT Vary: Accept-Encoding Accept-Ranges: bytes ETag: \u0026#34;xxx\u0026#34; Last-Modified: Wed, 02 Nov 2022 10:27:56 GMT Content-Disposition: attachment Content-MD5: ExxA== Server: APISIX/2.13.3 可以看到 Content-Disposition: attachment 没有改变。\n接下来我尝试使用 response-rewrite 插件进行，我的配置如下：\ncurl 后发现还是没有成功，后来通过 issue 问题回答的帮助得知我所使用的 apisix 2.13.3 不支持 Remove/Add/Set Header 操作，Remove/Add/Set Header 操作 是 3.0 版本才增加的功能，最后我的配置如下：\n{ \u0026#34;uri\u0026#34;: \u0026#34;/*\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;xx\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;xixxxe.work\u0026#34;, \u0026#34;plugins\u0026#34;: { \u0026#34;proxy-rewrite\u0026#34;: { \u0026#34;host\u0026#34;: \u0026#34;xx.aliyuncs.com\u0026#34;, \u0026#34;regex_uri\u0026#34;: [ \u0026#34;/(.*)$\u0026#34;, \u0026#34;/xx/${1}\u0026#34; ] }, \u0026#34;response-rewrite\u0026#34;: { \u0026#34;disable\u0026#34;: false, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Disposition\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;vars\u0026#34;: [ [ \u0026#34;status\u0026#34;, \u0026#34;==\u0026#34;, 200 ] ] } }, \u0026#34;upstream\u0026#34;: { \u0026#34;nodes\u0026#34;: [ { \u0026#34;host\u0026#34;: \u0026#34;xx.aliyuncs.com\u0026#34;, \u0026#34;port\u0026#34;: 80, \u0026#34;weight\u0026#34;: 1 } ], \u0026#34;timeout\u0026#34;: { \u0026#34;connect\u0026#34;: 6, \u0026#34;send\u0026#34;: 6, \u0026#34;read\u0026#34;: 6 }, \u0026#34;type\u0026#34;: \u0026#34;roundrobin\u0026#34;, \u0026#34;scheme\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;pass_host\u0026#34;: \u0026#34;pass\u0026#34;, \u0026#34;keepalive_pool\u0026#34;: { \u0026#34;idle_timeout\u0026#34;: 60, \u0026#34;requests\u0026#34;: 1000, \u0026#34;size\u0026#34;: 320 } }, \u0026#34;status\u0026#34;: 1 } curl 结果：\n$ curl -I xx.work/index.html HTTP/1.1 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 5556 Connection: keep-alive Date: Sat, 05 Nov 2022 06:59:00 GMT Vary: Accept-Encoding Accept-Ranges: bytes Last-Modified: Wed, 02 Nov 2022 10:27:56 GMT Server: APISIX/2.13.3 小结 本文介绍了如何使用 apisix 实现 nginx proxy_hide_header 相同的操作。\n参考 https://github.com/apache/apisix/issues/8230 https://help.aliyun.com/document_detail/142631.html?spm=a2c4g.11186623.0.0.44931a2eswiBi1 https://apisix.apache.org/zh/docs/apisix/2.13/plugins/response-rewrite/ ","permalink":"https://jasminides.com/posts/apisix-%E5%AE%9E%E7%8E%B0-nginx-proxy_hide_header-%E5%8F%82%E6%95%B0/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近需要使用 apisix 反向代理 oss, 实现通过域名访问相应的资源 (由于条件的限制，不能在 oss 绑定自定义域名)，我直接在 apisix dashboard 配置了路由，创建成功后，我通过浏览器访问时，发现资源不能预览会直接下载。\u003c/p\u003e\n\u003cp\u003e这样的现象让我很奇怪，通过查阅相关资料，发现使用 OSS 默认域名通过文件 URL 从浏览器访问图片或者网页文件时，Response Header 中会自动加上 Content-Disposition:attachment。即从浏览器访问这些文件时，会以附件形式进行下载。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e通过询问同事，得知他是通过 nginx 的 proxy_hide_header 忽略 Content-Disposition 解决的。那 apisix 该怎么实现呢，我通过自己的不断尝试和提 issue 询问官方人员，得知可以使用 response-rewrite 插件实现这个功能。\u003c/p\u003e\n\u003cp\u003e接下来我就来介绍下我尝试的过程吧，我最开始是使用 proxy-rewrite 将 Content-Disposition 设置为 inline，具体配置如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uri\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/*\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xixi.xx.work\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;plugins\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;proxy-rewrite\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;headers\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Content-Disposition\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;inline\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;regex_uri\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/(.*)$\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/xx/${1}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;upstream\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;nodes\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxx.com\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;port\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;weight\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;timeout\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;connect\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;send\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;read\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;roundrobin\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;scheme\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;pass_host\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pass\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;keepalive_pool\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;idle_timeout\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;requests\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e320\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ecurl 结果：\u003c/p\u003e","title":"apisix 实现 nginx proxy_hide_header 参数"},{"content":"最近遇到前后端传输数据需要进行加密的需求，本篇文章就分别介绍使用 Node.js 和 go 进行 AES 加密解密的方法，AES 有很多不同的算法，如 aes192，aes-128-ecb，aes-256-cbc 等，根据不同的密钥长度会使用不同的算法。加密后的结果有两种表示方法：hex 和 base64，我们这里使用 hex.\ngolang 使用 golang 实现 aes 加密，我使用标准库的方法实现，我使用的 CBC 模式。\n加密 func AesEncrypt(encryptStr string, key []byte, iv string) (string, error) { encryptBytes := []byte(encryptStr) block, err := aes.NewCipher(key) if err != nil { return \u0026#34;\u0026#34;, err } blockSize := block.BlockSize() encryptBytes = pkcs5Padding(encryptBytes, blockSize) blockMode := cipher.NewCBCEncrypter(block, []byte(iv)) encrypted := make([]byte, len(encryptBytes)) blockMode.CryptBlocks(encrypted, encryptBytes) return hex.EncodeToString(encrypted), nil } 解密 func AesDecrypt(decryptStr string, key []byte, iv string) (string, error) { decryptBytes, err := hex.DecodeString(decryptStr) if err != nil { return \u0026#34;\u0026#34;, err } block, err := aes.NewCipher(key) if err != nil { return \u0026#34;\u0026#34;, err } blockMode := cipher.NewCBCDecrypter(block, []byte(iv)) decrypted := make([]byte, len(decryptBytes)) blockMode.CryptBlocks(decrypted, decryptBytes) decrypted = pkcs5UnPadding(decrypted) return string(decrypted), nil } 运行加密解密例子 package main import ( \u0026#34;bytes\u0026#34; \u0026#34;crypto/aes\u0026#34; \u0026#34;crypto/cipher\u0026#34; \u0026#34;encoding/hex\u0026#34; \u0026#34;fmt\u0026#34; ) func AesEncrypt(encryptStr string, key []byte, iv string) (string, error) { encryptBytes := []byte(encryptStr) block, err := aes.NewCipher(key) if err != nil { return \u0026#34;\u0026#34;, err } blockSize := block.BlockSize() encryptBytes = pkcs5Padding(encryptBytes, blockSize) blockMode := cipher.NewCBCEncrypter(block, []byte(iv)) encrypted := make([]byte, len(encryptBytes)) blockMode.CryptBlocks(encrypted, encryptBytes) return hex.EncodeToString(encrypted), nil } func AesDecrypt(decryptStr string, key []byte, iv string) (string, error) { decryptBytes, err := hex.DecodeString(decryptStr) if err != nil { return \u0026#34;\u0026#34;, err } block, err := aes.NewCipher(key) if err != nil { return \u0026#34;\u0026#34;, err } blockMode := cipher.NewCBCDecrypter(block, []byte(iv)) decrypted := make([]byte, len(decryptBytes)) blockMode.CryptBlocks(decrypted, decryptBytes) decrypted = pkcs5UnPadding(decrypted) return string(decrypted), nil } func pkcs5Padding(cipherText []byte, blockSize int) []byte { padding := blockSize - len(cipherText)%blockSize padText := bytes.Repeat([]byte{byte(padding)}, padding) return append(cipherText, padText...) } func pkcs5UnPadding(decrypted []byte) []byte { length := len(decrypted) unPadding := int(decrypted[length-1]) return decrypted[:(length - unPadding)] } func main() { data := \u0026#34;i am test data\u0026#34; key := []byte(\u0026#34;1111111111111111\u0026#34;) iv := \u0026#34;1111122211111111\u0026#34; encrypt, err := AesEncrypt(data, key, iv) if err != nil { panic(err) return } fmt.Println(encrypt) decrypt, err := AesDecrypt(encrypt, key, iv) if err != nil { panic(err) } fmt.Println(decrypt) } 可以看到顺利生成加密后的字符串，加密后的字符串也顺利解密成功。\nNode.JS Node.js 我们同样使用标准库来进行加密解密，crypto 模块提供通用的加密和哈希算法。用纯 JavaScript 代码实现这些功能不是不可能，但速度会非常慢。Nodejs 用 C/C++ 实现这些算法后，通过 cypto 这个模块暴露为 JavaScript 接口，这样用起来方便，运行速度也快。\n加密 function aesEncode(data, secret,iv) { const cipher = crypto.createCipheriv(\u0026#39;aes-128-cbc\u0026#39;, secret, iv); var crypted = cipher.update(data, \u0026#34;binary\u0026#34;, \u0026#34;hex\u0026#34;); crypted += cipher.final(\u0026#39;hex\u0026#39;); return crypted } 我们根据输入的 data, key,iv 创建 Cipheriv 对象，设置输入的 data 的格式，输出加密后 hex 编码的字符串。\n解密 function aesDecode(data, secret,iv) { const cipher = crypto.createDecipheriv(\u0026#39;aes-128-cbc\u0026#39;, secret, iv); var crypted = cipher.update(data, \u0026#34;hex\u0026#34;, \u0026#34;binary\u0026#34;); crypted += cipher.final(\u0026#39;binary\u0026#39;); return crypted } 我们根据输入的 加密字符串，key,iv 创建 Decipheriv 对象，设置输入的 data 的格式，输出数据的原始数据。\n运行例子 var crypto = require(\u0026#34;crypto\u0026#34;); function aesEncode(data, secret,iv) { const cipher = crypto.createCipheriv(\u0026#39;aes-128-cbc\u0026#39;, secret, iv); var crypted = cipher.update(data, \u0026#34;binary\u0026#34;, \u0026#34;hex\u0026#34;); crypted += cipher.final(\u0026#39;hex\u0026#39;); return crypted } function aesDecode(data, secret,iv) { const cipher = crypto.createDecipheriv(\u0026#39;aes-128-cbc\u0026#39;, secret, iv); var crypted = cipher.update(data, \u0026#34;hex\u0026#34;, \u0026#34;binary\u0026#34;); crypted += cipher.final(\u0026#39;binary\u0026#39;); return crypted } const date_crypto = aesEncode(\u0026#34;111\u0026#34;, \u0026#34;1234567812345678\u0026#34;,\u0026#34;1234567812345678\u0026#34;) console.log(date_crypto) console.log(aesDecode(date_crypto, \u0026#34;1234567812345678\u0026#34;,\u0026#34;1234567812345678\u0026#34;)) node go 互相加密解密 接下来我们来简单模拟下 go 和 node 之间的数据传输过程。统一使用 data = \u0026ldquo;i am test data\u0026rdquo; key = \u0026ldquo;abcdefghabcdefgh\u0026rdquo; iv = \u0026ldquo;1234567812345678\u0026rdquo;\ngo 加密数据 node 解密 这是使用 go 加密后的数据，我们接下来使用 node 解密\n42961cdaeab0aba366826529fdc36035 可以看到顺利输出了原始数据\nnode 加密数据 go 解密 接下来我们先使用 node 加密同样的数据，然后使用 go 解密，看看能不能输出原始数据。\n可以看到 node 也输出了同样的字符串 42961cdaeab0aba366826529fdc36035，接下来使用 go 解密。\n可以看到也顺利还原数据成功。\ni am test data 小结 本文简单介绍了使用 node 和 go 进行 aes 加密解密。本文的代码放在了这里：https://github.com/overstarry/aes-demo/tree/master\n参考 https://www.liaoxuefeng.com/wiki/1022910821149312/1023025778520640 https://github.com/overstarry/aes-demo/tree/master ","permalink":"https://jasminides.com/posts/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BD%BF%E7%94%A8-aes-%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/","summary":"\u003cp\u003e最近遇到前后端传输数据需要进行加密的需求，本篇文章就分别介绍使用 Node.js 和 go 进行 AES 加密解密的方法，AES 有很多不同的算法，如 aes192，aes-128-ecb，aes-256-cbc 等，根据不同的密钥长度会使用不同的算法。加密后的结果有两种表示方法：hex 和 base64，我们这里使用 hex.\u003c/p\u003e\n\u003ch2 id=\"golang\"\u003egolang\u003c/h2\u003e\n\u003cp\u003e使用 golang 实现 aes 加密，我使用标准库的方法实现，我使用的 CBC 模式。\u003c/p\u003e\n\u003ch3 id=\"加密\"\u003e加密\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesEncrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencryptStr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []byte(\u003cspan style=\"color:#a6e22e\"\u003eencryptStr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCipher\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBlockSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epkcs5Padding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecipher\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCBCEncrypter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, []byte(\u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCryptBlocks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEncodeToString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解密\"\u003e解密\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesDecrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecryptStr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDecodeString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecryptStr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCipher\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecipher\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCBCDecrypter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, []byte(\u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCryptBlocks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epkcs5UnPadding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e string(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"运行加密解密例子\"\u003e运行加密解密例子\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bytes\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;crypto/aes\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;crypto/cipher\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/hex\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesEncrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencryptStr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []byte(\u003cspan style=\"color:#a6e22e\"\u003eencryptStr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCipher\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBlockSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epkcs5Padding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecipher\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCBCEncrypter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, []byte(\u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCryptBlocks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eencryptBytes\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEncodeToString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypted\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesDecrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecryptStr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDecodeString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecryptStr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCipher\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecipher\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewCBCDecrypter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eblock\u003c/span\u003e, []byte(\u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eblockMode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCryptBlocks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edecryptBytes\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003epkcs5UnPadding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e string(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epkcs5Padding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecipherText\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003ecipherText\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eblockSize\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epadText\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRepeat\u003c/span\u003e([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e{byte(\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e)}, \u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e append(\u003cspan style=\"color:#a6e22e\"\u003ecipherText\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epadText\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epkcs5UnPadding\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eunPadding\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e int(\u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edecrypted\u003c/span\u003e[:(\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunPadding\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;i am test data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []byte(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1111111111111111\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1111122211111111\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eencrypt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesEncrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypt\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edecrypt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAesDecrypt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eencrypt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eiv\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecrypt\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/aes/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"前后端使用 AES 加密传输数据"},{"content":"前言 最近在群里看到群友提到了 Fly.io 这个 应用部署平台，相比其它平台，Fly.io 提供了数据库。本篇文章我就来简单介绍如何使用 Fly.io。\n安装 flyctl Flyctl 是一个应用命令行工具，可以让你很方便的从创建用户、创建应用并部署应用。\nWindows 安装 iwr https://fly.io/install.ps1 -useb | iex Linux 安装 curl -L https://fly.io/install.sh | sh MAC 安装 brew install flyctl 或者\ncurl -L https://fly.io/install.sh | sh 注册 Fly.io 账号 使用 flyctl auth signup 命令进行用户注册，你可以使用电子邮件注册，也可以使用 Github 账号进行登录。\n登录账号 使用 flyctl auth login 命令登录你的 Fly.io 账号，由于我没有 Fly.io 账号，前面注册时就会登录，可以直接跳过这步。\n启动应用程序 接下来我们就可以进行应用的部署了，Fly.io 使用的是 docker 镜像的方式进行应用部署的，由于我本地环境的限制，本文我使用一个基础的 flyio/hellofly:latest 镜像进行部署使用。\n每个应用使用 fly.toml 配置文件来告诉 Fly.io 如何进行部署。我们使用 flyctl launch 命令生成相应的配置文件。\nflyctl launch --image flyio/hellofly:latest 创建过程中会提醒输入应用名，部署的地域和是否使用数据库，我这里使用自动生成的用户名，部署在新加坡，不使用数据库。\n生成的配置文件如下：\n# fly.toml file generated for long-silence-8142 on 2022-10-23T00:05:25+08:00 app = \u0026#34;long-silence-8142\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 processes = [] [build] image = \u0026#34;flyio/hellofly:latest\u0026#34; [env] [experimental] allowed_public_ports = [] auto_rollback = true [[services]] http_checks = [] internal_port = 8080 processes = [\u0026#34;app\u0026#34;] protocol = \u0026#34;tcp\u0026#34; script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \u0026#34;connections\u0026#34; [[services.ports]] force_https = true handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [[services.tcp_checks]] grace_period = \u0026#34;1s\u0026#34; interval = \u0026#34;15s\u0026#34; restart_limit = 0 timeout = \u0026#34;2s\u0026#34; 使用 flyctl deploy 即可部署我们的应用程序。这将查找配置文件并在平台进行部署程序。\n检查应用程序状态 通过 flyctl status 可以检查部署的应用程序的状态\nApp Name = long-silence-8142 Owner = personal Version = 0 Status = running Hostname = long-silence-8142.fly.dev Platform = nomad Deployment Status ID = c25f5f0e-374b-95b5-9f96-820b2f620c53 Version = v0 Status = successful Description = Deployment completed successfully Instances = 1 desired, 1 placed, 1 healthy, 0 unhealthy Instances ID PROCESS VERSION REGION DESIRED STATUS HEALTH CHECKS RESTARTS CREATED 88ae291a app 0 sin run running 1 total, 1 passing 0 1m41s ago 可以看到我们的程序使用了 long-silence-8142.fly.dev DNS 主机名进行部署，应用程序在新加坡地区运行。我们通过浏览器访问 https://long-silence-8142.fly.dev/ 可以看到正确的页面。\n小结 本篇文章主要介绍了 Fly.io 平台，并进行简单的使用，接下来还会有对这个平台深入研究的文章。\n参考 https://fly.io/docs/ ","permalink":"https://jasminides.com/posts/fly.io-%E5%88%9D%E4%BD%93%E9%AA%8C/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在群里看到群友提到了 Fly.io 这个 应用部署平台，相比其它平台，Fly.io 提供了数据库。本篇文章我就来简单介绍如何使用 Fly.io。\u003c/p\u003e\n\u003ch2 id=\"安装-flyctl\"\u003e安装 flyctl\u003c/h2\u003e\n\u003cp\u003eFlyctl 是一个应用命令行工具，可以让你很方便的从创建用户、创建应用并部署应用。\u003c/p\u003e\n\u003ch3 id=\"windows-安装\"\u003eWindows 安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiwr https://fly.io/install.ps1 -useb | iex\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"linux-安装\"\u003eLinux 安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -L https://fly.io/install.sh | sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"mac-安装\"\u003eMAC 安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install flyctl\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -L https://fly.io/install.sh | sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"注册-flyio-账号\"\u003e注册 Fly.io 账号\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003eflyctl auth signup\u003c/code\u003e 命令进行用户注册，你可以使用电子邮件注册，也可以使用 Github 账号进行登录。\u003c/p\u003e\n\u003ch2 id=\"登录账号\"\u003e登录账号\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003eflyctl auth login\u003c/code\u003e 命令登录你的 Fly.io 账号，由于我没有 Fly.io 账号，前面注册时就会登录，可以直接跳过这步。\u003c/p\u003e\n\u003ch2 id=\"启动应用程序\"\u003e启动应用程序\u003c/h2\u003e\n\u003cp\u003e接下来我们就可以进行应用的部署了，Fly.io 使用的是 docker 镜像的方式进行应用部署的，由于我本地环境的限制，本文我使用一个基础的 flyio/hellofly:latest 镜像进行部署使用。\u003c/p\u003e\n\u003cp\u003e每个应用使用 fly.toml 配置文件来告诉 Fly.io 如何进行部署。我们使用 \u003ccode\u003eflyctl launch\u003c/code\u003e 命令生成相应的配置文件。\u003c/p\u003e","title":"Fly.io 初体验"},{"content":"前言 最近我发现各个群里出现了一股利用 AI 进行绘画的潮流，今天我也尝试使用 Stable Diffusion 模型 进行 AI 绘画。\nStable Diffusion 简介 Stable Diffusion 是一个文本到图像的模型，将使人们可以在几秒钟内创造出令人惊叹的艺术作品。它在速度和质量方面都有突破，这意味着它可以在消费级 GPU 上运行\n开始 我们采用别人封装的 stable-diffusion-webui 平台进行绘画，由于各种条件限制，我们使用 github 上提供的 Google colab notbook 进行部署 (https://colab.research.google.com/drive/1IplUv47g9CgtlJmFnyT2sDyNYDEeMJDi?usp=sharing).\n打开链接，我简单的看了下代码，前面是基础的安装运行环境、需要的 Python package .我们依次运行即可。\n我们直接来到 1.4 Connect to Google Drive， 勾选 download_if_missing，然后到 https://huggingface.co/settings/tokens 复制你的 toekn 并填入。(huggingface 注册耗费了许多时间，reCAPTCHA 没有通过).\n点击运行后就开始拉取模型。\n如果运行发现报错了：\nremote: Access to model CompVis/stable-diffusion-v-1-4-original is restricted and you are not in the authorized list. Visit https://huggingface.co/CompVis/stable-diffusion-v-1-4-original to ask for access. fatal: unable to access \u0026#39;https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/\u0026#39;: The requested URL returned error: 403 你需要到 https://huggingface.co/CompVis/stable-diffusion-v-1-4-original 授权模型的访问权限。授权后重新运行即可。\n接下来我们还是依次运行，最后会出现如下日志：\nRunning on local URL: http://localhost:7860/ Running on public URL: https://xxxxx.gradio.app This share link expires in 72 hours. For free permanent hosting, check out Spaces: https://huggingface.co/spaces public URL 就是你的 AI 绘画平台的地址。点击链接打开网页，用户名是 webui 密码是前面代码中设置的，打开后是如下的界面：\n主要包含了 4 块功能，text2img，img2img，人脸修复算法，照片清晰化。\ntext2img 我们先来试用第一个功能 text2img\n我们输入如下文本:((a point coloration cat by the lakeside)), big face, small ears, play in the snow, sharp focus, illustration, highly detailed, concept art, matte, anime, trending on artstation，点击生成\n我们继续输入：((a Pikachu)), big face, small ears,Kyogre,sea\nImg2Img 第二个功能是利用图片生成图片\n其他 2 个功能这次就不多介绍了，下次有机会再介绍。\n参考 https://github.com/hua1995116/awesome-ai-painting https://github.com/CompVis/stable-diffusion https://github.com/altryne/awesome-ai-art-image-synthesis https://github.com/sd-webui/stable-diffusion-webui https://stability.ai/blog/stable-diffusion-public-release https://huggingface.co/CompVis/stable-diffusion-v-1-4-original ","permalink":"https://jasminides.com/posts/ai-%E7%BB%98%E7%94%BB%E5%88%9D%E4%BD%93%E9%AA%8C/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近我发现各个群里出现了一股利用 AI 进行绘画的潮流，今天我也尝试使用 Stable Diffusion 模型 进行 AI 绘画。\u003c/p\u003e\n\u003ch2 id=\"stable-diffusion-简介\"\u003eStable Diffusion 简介\u003c/h2\u003e\n\u003cp\u003eStable Diffusion 是一个文本到图像的模型，将使人们可以在几秒钟内创造出令人惊叹的艺术作品。它在速度和质量方面都有突破，这意味着它可以在消费级 GPU 上运行\u003c/p\u003e\n\u003ch2 id=\"开始\"\u003e开始\u003c/h2\u003e\n\u003cp\u003e我们采用别人封装的 stable-diffusion-webui 平台进行绘画，由于各种条件限制，我们使用 github 上提供的 Google colab notbook 进行部署 (\u003ca href=\"https://colab.research.google.com/drive/1IplUv47g9CgtlJmFnyT2sDyNYDEeMJDi?usp=sharing)\"\u003ehttps://colab.research.google.com/drive/1IplUv47g9CgtlJmFnyT2sDyNYDEeMJDi?usp=sharing)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e打开链接，我简单的看了下代码，前面是基础的安装运行环境、需要的 Python package .我们依次运行即可。\u003c/p\u003e\n\u003cp\u003e我们直接来到 1.4 Connect to Google Drive，\n\u003cimg loading=\"lazy\" src=\"/img/ai%e7%bb%98%e7%94%bb/img.png\" alt=\"img.png\"  /\u003e\n\n勾选 download_if_missing，然后到  \u003ca href=\"https://huggingface.co/settings/tokens\"\u003ehttps://huggingface.co/settings/tokens\u003c/a\u003e  复制你的 toekn 并填入。(huggingface 注册耗费了许多时间，reCAPTCHA 没有通过).\u003c/p\u003e\n\u003cp\u003e点击运行后就开始拉取模型。\u003c/p\u003e\n\u003cp\u003e如果运行发现报错了：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003eremote: Access to model CompVis/stable-diffusion-v-1-4-original is restricted and you are not in the authorized list. Visit https://huggingface.co/CompVis/stable-diffusion-v-1-4-original to ask for access.\nfatal: unable to access \u0026#39;https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/\u0026#39;: The requested URL returned error: 403\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你需要到 \u003ca href=\"https://huggingface.co/CompVis/stable-diffusion-v-1-4-original\"\u003ehttps://huggingface.co/CompVis/stable-diffusion-v-1-4-original\u003c/a\u003e 授权模型的访问权限。授权后重新运行即可。\u003c/p\u003e","title":"AI 绘画初体验"},{"content":"起因 最近在使用 k8s 部署应用时，我使用 ConfigMaps 的方式来挂载应用的配置文件。在我的知识储备中，k8s 修改 cm 的内容，pod 里的配置文件应该也会同步更新才是，但是我进入 pod , 发现配置还是旧版本没有更新，需要重启 pod 才会生效。\n问题 那为什么配置没有及时更新呢？通过查阅资料，我发现使用 subPath 挂载的容器不会接收到配置更新。这是为什么呢，相比于没有使用 subPath 有什么区别呢？\nsubPath 使用了符号链接的方式挂载文件，容器内的文件是一个链接到存储在一个隐藏的带有时间戳目录中的同名文件。当 configMaps 更新时，符号链接会更新，但挂载在容器中的文件绑定保持不变。\n解决 使用 path 字段为特定 ConfigMap 项指定所需的文件路径 具体如下：\napiVersion: v1 kind: Pod metadata: name: dapi-test-pod spec: containers: - name: test-container image: registry.k8s.io/busybox command: [ \u0026#34;/bin/sh\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;cat /etc/config/keys\u0026#34; ] volumeMounts: - name: config-volume mountPath: /etc/config volumes: - name: config-volume configMap: name: special-config items: - key: SPECIAL_LEVEL path: keys restartPolicy: Never 亲测这样是可以正常更新的，但同目录下的其它文件会删除掉，看了几个相关的 issues , 发现你还可以手动创建符号链接到相应的文件夹，\n小结 使用 subPath 挂载配置至容器时，配置更新时，容器内的配置不能同步更新，这是 k8s 官方处于各种原因做出的限制，目前还没有很好的办法来解决这个问题。\n参考 https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#mounted-configmaps-are-updated-automatically https://github.com/kubernetes/kubernetes/issues/50345 https://github.com/kubernetes/kubernetes/blob/master/pkg/volume/util/atomic_writer.go ","permalink":"https://jasminides.com/posts/kubernetes-configmaps-mounted-with-subpath-not-update-when-changed/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近在使用 k8s 部署应用时，我使用 ConfigMaps 的方式来挂载应用的配置文件。在我的知识储备中，k8s 修改 cm 的内容，pod 里的配置文件应该也会同步更新才是，但是我进入 pod , 发现配置还是旧版本没有更新，需要重启 pod 才会生效。\u003c/p\u003e\n\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e那为什么配置没有及时更新呢？通过查阅资料，我发现使用 subPath 挂载的容器不会接收到配置更新。这是为什么呢，相比于没有使用 subPath 有什么区别呢？\u003c/p\u003e\n\u003cp\u003esubPath 使用了符号链接的方式挂载文件，容器内的文件是一个链接到存储在一个隐藏的带有时间戳目录中的同名文件。当 configMaps 更新时，符号链接会更新，但挂载在容器中的文件绑定保持不变。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003ch3 id=\"使用-path-字段为特定-configmap-项指定所需的文件路径\"\u003e使用 path 字段为特定 ConfigMap 项指定所需的文件路径\u003c/h3\u003e\n\u003cp\u003e具体如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edapi-test-pod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etest-container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry.k8s.io/busybox\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/bin/sh\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-c\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat /etc/config/keys\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003evolumeMounts\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003econfig-volume\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003emountPath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/etc/config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003econfig-volume\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003econfigMap\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003especial-config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003eitems\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003ekey\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSPECIAL_LEVEL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ekeys\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003erestartPolicy\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNever\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e亲测这样是可以正常更新的，但同目录下的其它文件会删除掉，看了几个相关的 issues , 发现你还可以手动创建符号链接到相应的文件夹，\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e使用 subPath 挂载配置至容器时，配置更新时，容器内的配置不能同步更新，这是 k8s 官方处于各种原因做出的限制，目前还没有很好的办法来解决这个问题。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#mounted-configmaps-are-updated-automatically\"\u003ehttps://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#mounted-configmaps-are-updated-automatically\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes/kubernetes/issues/50345\"\u003ehttps://github.com/kubernetes/kubernetes/issues/50345\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes/kubernetes/blob/master/pkg/volume/util/atomic_writer.go\"\u003ehttps://github.com/kubernetes/kubernetes/blob/master/pkg/volume/util/atomic_writer.go\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Kubernetes Configmaps mounted with subPath not update when changed"},{"content":"本篇文章将由我来介绍一款健康/状态检查工具 - Easeprobe 的简单使用。\n介绍 EaseProbe 是一个由用 Go 编写的简单、独立、轻量级的工具，可以进行健康/状态检查，\nEaseProbe 主要完成 3 个目标工具：探测、通知、报告\n探测 EaseProbe 支持多种方法来执行其探测，例如：\n* HTTP。检查 HTTP 状态码，支持 mTLS，HTTP Basic Auth，可以设置 Request Header/Body。（HTTP 探针配置） * TCP。检查是否可以建立 TCP 连接。(TCP 探针配置) * shell。运行 Shell 命令并检查结果。（Shell 命令探针配置） * SSH。通过 SSH 运行远程命令并检查结果。支持堡垒/跳转服务器（SSH 命令探针配置） * TLS。使用 TLS 连接到给定端口并（可选）验证已撤销或过期的证书（TLS 探针配置） * Host。在远程主机上运行 SSH 命令并检查 CPU、内存和磁盘使用情况。（主机负载探针） * client。支持以下本机客户端。它们都支持 mTLS 和数据检查，请参阅 Native Client Probe 配置 * MySQL。连接到 MySQL 服务器并运行 SHOW STATUSSQL。 * Redis。连接到 Redis 服务器并运行 PING 命令。 * Memcache。连接到 Memcache 服务器并运行 version 命令或验证给定的键/值对。 * MongoDB。连接到 MongoDB 服务器并执行 ping。 * Kafka。连接到 Kafka 服务器并执行所有主题的列表。 * PostgreSQL。连接到 PostgreSQL 服务器并运行 SELECT 1SQL。 * Zookeeper。连接到 Zookeeper 服务器并运行 get /命令。 通知 EaseProbe 支持多种通知方式向你发送通知，例如：slack、钉钉、企业微信、邮件、Telegram 等。\n报告和指标 EaseProbe 支持以下报告和指标：\nSLA 报告通知。EaseProbe 将使用定义的 notify:方法发送每日、每周或每月 SLA 报告。\nSLA 实时报告。EaseProbe 的默认监听端口为 0.0.0.0:8181。通过访问该服务，你将得到实时的 SLA 报告，可以是 HTML 格式（http://localhost:8181/），也可以是 JSON 格式（http://localhost:8181/api/v1/sla）。\nSLA 数据持久性。默认情况下，SLA 将数据保存在 $CWD/data/data.yaml。您可以通过编辑配置文件来配置此路径。 更多信息，请查看全局设置配置\n普罗米修斯指标。默认情况下，EaseProbe 将侦听 8181 端口。通过访问此服务，您将获得一些预定义的 Prometheus 指标，地址是 http://easeprobe:8181/metrics.\n安装 你可以通过下载仓库编译好的程序来使用，也可以自己对源码编译使用。如果你有容器环境也可以使用 megaease/easeprobe 进行 docker 部署和 k8s 部署。\n本文采用了仓库预编译的程序进行使用。执行 easeprobe -f config.yaml 运行 easeprobe。\n接下来我来讲解在我实际使用中用到的配置项。\n配置 http 探测 在我的实际使用中，主要使用 http 探测来探测网页是否正常。\nhttp 探测的默认配置如下：\n# http: # # A completed HTTP Probe configuration # - name: Special Website # url: https://megaease.cn # # Proxy setting, support sock5, http, https, for example: # # proxy: http://proxy.server:8080 # # proxy: socks5://localhost:1085 # # proxy: https://user:password@proxy.example.com:443 # # Also support `HTTP_PROXY` \u0026amp; `HTTPS_PROXY` environment variables # proxy: http://proxy.server:8080 # # Request Method # method: GET # # Request Header # headers: # User-Agent: Customized User-Agent # default: \u0026#34;MegaEase EaseProbe / v1.6.0\u0026#34; # X-head-one: xxxxxx # X-head-two: yyyyyy # X-head-THREE: zzzzzzX- # content_encoding: text/json # # Request Body # body: \u0026#39;{ \u0026#34;FirstName\u0026#34;: \u0026#34;Mega\u0026#34;, \u0026#34;LastName\u0026#34; : \u0026#34;Ease\u0026#34;, \u0026#34;UserName\u0026#34; : \u0026#34;megaease\u0026#34;, \u0026#34;Email\u0026#34; : \u0026#34;user@example.com\u0026#34;}\u0026#39; # # HTTP Basic Auth # username: username # password: password # # mTLS # ca: /path/to/file.ca # cert: /path/to/file.crt # key: /path/to/file.key # # TLS # insecure: true # skip any security checks, useful for self-signed and expired certs. default: false # # HTTP successful response code range, default is [0, 499]. # success_code: # - [200,206] # the code \u0026gt;=200 and \u0026lt;= 206 # - [300,308] # the code \u0026gt;=300 and \u0026lt;= 308 # # Response Checking # contain: \u0026#34;success\u0026#34; # response body must contain this string, if not the probe is considered failed. # not_contain: \u0026#34;failure\u0026#34; # response body must NOT contain this string, if it does the probe is considered failed. # regex: false # if true, the contain and not_contain will be treated as regular expression. default: false # eval: # eval is a expression evaluation for HTTP response message # doc: XML # support XML, JSON, HTML, TEXT. # expression: \u0026#34;x_time(\u0026#39;//feed/updated\u0026#39;) \u0026gt; \u0026#39;2022-07-01\u0026#39;\u0026#34; # the expression to evaluate. # # configuration # timeout: 10s # default is 30 seconds 可以看到 http 探测提供的功能十分丰富，我主要用了简单的状态码判断，和对响应内容判断，我使用的配置如下：\n- name: cool url: https://cool.overstarry.vip success_code: - [ 200,200 ] - name: cool version url: https://cool.overstarry.vip/version.json contain: \u0026#34;\\\u0026#34;version\\\u0026#34;: \\\u0026#34;1.0\u0026#34; 第一个探测配置主要是判断网页的状态码，如果状态码不等于 200 就会给我发通知，第二项是判断接口的内容，相当于健康检查。\n邮件通知配置 如果探测项发送了改变，我采用邮件来进行通知。具体的配置项如下：\nemail: - name: \u0026#34;overstarry dev List\u0026#34; server: xx:465 username: xx@overstarry.vip password: xxx to: \u0026#34;overstarry@overstarry.vip;\u0026#34; 多个邮件接收人以分号分隔。\n时区设置 在我使用中发现邮件通知中的时间是以 UTC 时区展示的，我通过查看配置文件，发现有一个 timezone 可以设置时区，我将 timezone 设置为 \u0026ldquo;Asia/Shanghai\u0026rdquo;，但是发现接收到的通知时区还是 UTC ,后来通过查看 issue 得知还需要配置 timeformat: \u0026ldquo;2006-01-02 15:04:05 Z07:00\u0026rdquo; 才能正确显示时间。\n参考 https://github.com/megaease/easeprobe https://github.com/megaease/easeprobe/pull/167 ","permalink":"https://jasminides.com/posts/easeprobe-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/","summary":"\u003cp\u003e本篇文章将由我来介绍一款健康/状态检查工具 - Easeprobe 的简单使用。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eEaseProbe 是一个由用 Go 编写的简单、独立、轻量级的工具，可以进行健康/状态检查，\u003c/p\u003e\n\u003cp\u003eEaseProbe 主要完成 3 个目标工具：探测、通知、报告\u003c/p\u003e\n\u003ch3 id=\"探测\"\u003e探测\u003c/h3\u003e\n\u003cp\u003eEaseProbe 支持多种方法来执行其探测，例如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e*  HTTP。检查 HTTP 状态码，支持 mTLS，HTTP Basic Auth，可以设置 Request Header/Body。（HTTP 探针配置）\n*  TCP。检查是否可以建立 TCP 连接。(TCP 探针配置)\n*  shell。运行 Shell 命令并检查结果。（Shell 命令探针配置）\n*  SSH。通过 SSH 运行远程命令并检查结果。支持堡垒/跳转服务器（SSH 命令探针配置）\n*  TLS。使用 TLS 连接到给定端口并（可选）验证已撤销或过期的证书（TLS 探针配置）\n*  Host。在远程主机上运行 SSH 命令并检查 CPU、内存和磁盘使用情况。（主机负载探针）\n*  client。支持以下本机客户端。它们都支持 mTLS 和数据检查，请参阅 Native Client Probe 配置\n    *  MySQL。连接到 MySQL 服务器并运行 SHOW STATUSSQL。\n    *  Redis。连接到 Redis 服务器并运行 PING 命令。\n    *  Memcache。连接到 Memcache 服务器并运行 version 命令或验证给定的键/值对。\n    *  MongoDB。连接到 MongoDB 服务器并执行 ping。\n    *  Kafka。连接到 Kafka 服务器并执行所有主题的列表。\n    *  PostgreSQL。连接到 PostgreSQL 服务器并运行 SELECT 1SQL。\n    *  Zookeeper。连接到 Zookeeper 服务器并运行 get /命令。\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"通知\"\u003e通知\u003c/h3\u003e\n\u003cp\u003eEaseProbe 支持多种通知方式向你发送通知，例如：slack、钉钉、企业微信、邮件、Telegram 等。\u003c/p\u003e","title":"Easeprobe 简单介绍使用"},{"content":"本文我来介绍 gRPC 中的中间件相关知识。\n介绍 gRPC 中间件基于前面讲解的拦截器相关概念，它是一组拦截器、辅助、工具的集合，在我们使用 gRPC 开发应用时，往往会使用到各种中间件。它允许在服务端或客户端以拦截器链条形式应用多个中间件。因为拦截器经常用来实现一些通用的功能 ,如鉴权认证、日志、监控等，所以使用 gRPC 中间件来实现这些可重用功能是十分合适的。下面的代码就分别暂时服务端和客户端使用中间件的例子：\nimport \u0026#34;github.com/grpc-ecosystem/go-grpc-middleware\u0026#34; myServer := grpc.NewServer( grpc.StreamInterceptor(grpc_middleware.ChainStreamServer( grpc_ctxtags.StreamServerInterceptor(), grpc_opentracing.StreamServerInterceptor(), grpc_prometheus.StreamServerInterceptor, grpc_zap.StreamServerInterceptor(zapLogger), grpc_auth.StreamServerInterceptor(myAuthFunction), grpc_recovery.StreamServerInterceptor(), )), grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer( grpc_ctxtags.UnaryServerInterceptor(), grpc_opentracing.UnaryServerInterceptor(), grpc_prometheus.UnaryServerInterceptor, grpc_zap.UnaryServerInterceptor(zapLogger), grpc_auth.UnaryServerInterceptor(myAuthFunction), grpc_recovery.UnaryServerInterceptor(), )), ) import \u0026#34;github.com/grpc-ecosystem/go-grpc-middleware\u0026#34; clientConn, err = grpc.Dial( address, grpc.WithUnaryInterceptor(grpc_middleware.ChainUnaryClient(monitoringClientUnary, retryUnary)), grpc.WithStreamInterceptor(grpc_middleware.ChainStreamClient(monitoringClientStream, retryStream)), ) 常用的中间件 go-grpc-middleware 项目提供了一些常用的中间件：\n认证 grpc_auth - 一个可定制的（通过 AuthFunc）身份验证中间件 日志记录 grpc_ctxtags - 将 Tag 地图添加到上下文的库，数据从请求正文填充 grpc_zap - 将 zap 日志库集成到 gRPC 处理程序中。 grpc_logrus - 将 logrus 日志库集成到 gRPC 处理程序中。 grpc_kit - 将 go-kit/log 日志库集成到 gRPC 处理程序中。 grpc_grpc_logsettablegrpclog.LoggerV2 - 一个允许在运行时替换记录器的包装器（线程安全）。 监控 grpc_prometheus - Prometheus 客户端和服务器端监控中间件 otgrpc - OpenTracing 客户端和服务器端拦截器 grpc_opentracing - OpenTracing 客户端和服务器端拦截器，支持流式处理和处理程序返回的标签 otelgrpc - OpenTelemetry 客户端和服务器端拦截器 客户端中间件 grpc_retry - 一个通用的 gRPC 响应代码重试机制，客户端中间件\n服务端中间件 grpc_validator - 来自.proto 选项的代码生成入站消息验证 grpc_recovery - 将恐慌转化为 gRPC 错误 ratelimit - 限流\n编写自己的中间件 如果上面提供的中间件不满足你的需求，该如何定制中间件呢，就是使用前面讲解的拦截器来实现。\n小结 https://github.com/grpc-ecosystem/go-grpc-middleware https://pkg.go.dev/github.com/grpc-ecosystem/go-grpc-middleware ","permalink":"https://jasminides.com/posts/grpc-%E4%B8%AD%E9%97%B4%E4%BB%B6/","summary":"\u003cp\u003e本文我来介绍 gRPC 中的中间件相关知识。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003egRPC 中间件基于前面讲解的拦截器相关概念，它是一组拦截器、辅助、工具的集合，在我们使用 gRPC 开发应用时，往往会使用到各种中间件。它允许在服务端或客户端以拦截器链条形式应用多个中间件。因为拦截器经常用来实现一些通用的功能\n,如鉴权认证、日志、监控等，所以使用 gRPC 中间件来实现这些可重用功能是十分合适的。下面的代码就分别暂时服务端和客户端使用中间件的例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/grpc-ecosystem/go-grpc-middleware\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emyServer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc_middleware\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChainStreamServer\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_ctxtags\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_opentracing\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_prometheus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_zap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ezapLogger\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_auth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emyAuthFunction\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_recovery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStreamServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc_middleware\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChainUnaryServer\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_ctxtags\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_opentracing\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_prometheus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_zap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ezapLogger\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_auth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emyAuthFunction\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egrpc_recovery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInterceptor\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/grpc-ecosystem/go-grpc-middleware\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eclientConn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDial\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithUnaryInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc_middleware\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChainUnaryClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonitoringClientUnary\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eretryUnary\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithStreamInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc_middleware\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChainStreamClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonitoringClientStream\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eretryStream\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"常用的中间件\"\u003e常用的中间件\u003c/h2\u003e\n\u003cp\u003ego-grpc-middleware 项目提供了一些常用的中间件：\u003c/p\u003e\n\u003ch3 id=\"认证\"\u003e认证\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003egrpc_auth - 一个可定制的（通过 AuthFunc）身份验证中间件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"日志记录\"\u003e日志记录\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003egrpc_ctxtags - 将 Tag 地图添加到上下文的库，数据从请求正文填充\u003c/li\u003e\n\u003cli\u003egrpc_zap - 将 zap 日志库集成到 gRPC 处理程序中。\u003c/li\u003e\n\u003cli\u003egrpc_logrus - 将 logrus 日志库集成到 gRPC 处理程序中。\u003c/li\u003e\n\u003cli\u003egrpc_kit - 将 go-kit/log 日志库集成到 gRPC 处理程序中。\u003c/li\u003e\n\u003cli\u003egrpc_grpc_logsettablegrpclog.LoggerV2 - 一个允许在运行时替换记录器的包装器（线程安全）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"监控\"\u003e监控\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003egrpc_prometheus - Prometheus 客户端和服务器端监控中间件\u003c/li\u003e\n\u003cli\u003eotgrpc - OpenTracing 客户端和服务器端拦截器\u003c/li\u003e\n\u003cli\u003egrpc_opentracing - OpenTracing 客户端和服务器端拦截器，支持流式处理和处理程序返回的标签\u003c/li\u003e\n\u003cli\u003eotelgrpc - OpenTelemetry 客户端和服务器端拦截器\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"客户端中间件\"\u003e客户端中间件\u003c/h3\u003e\n\u003cp\u003egrpc_retry - 一个通用的 gRPC 响应代码重试机制，客户端中间件\u003c/p\u003e","title":"gRPC 中间件"},{"content":"起因 最近一台服务器出现服务器资源 cpu、内存过高的情况，通过对进程的分析，发现是 gitlab 容器进程，怀疑是 gitlab 被入侵运行了挖矿病毒，通过对 gitlab 日志的分析，可以得出入侵者是利用了 gitlab 的 CVE-2021-22205 的漏洞，对 gitlab 进行了攻击。\nCVE-2021-22205 介绍 CVE-2021-22205 是一个严重的严重性漏洞 (CVSS 10.0)，它是由第三方文件解析器 Exif-Tool 对图像文件进行不当验证的结果，导致远程命令执行漏洞，可能导致您的 GitLab 实例被攻击。\n以下版本受到漏洞影响:\n11.9.x - 13.8.7 13.9.0 - 13.9.5 13.10.0 - 13.10.2 解决 gitlab 发布了 GitLab 13.10.3、13.9.6 和 13.8.8 版本来解决这个漏洞。请尽快升级。\n如果无法即使更新和使用热更新补丁解决，可以通过将 exiftool 脚本替换为 cat -。这个解决方案将防止从上传的图像中剥离所有的 exif 数据。\n将 /opt/gitlab/embedded/bin/exiftool 脚本内容替换为\n#!/bin/bash cat - 这种方法不是长久之计，每次重启容器时都要手动修改文件，还是尽快更新版本。\n原因 根据 gitlab 的官方漏洞 issues 来看，当访问接口/uploads/user 上传图像文件时，GitLab Workhorse 会将扩展名为 jpg、jpeg、tiff 文件传递给 ExifTool。用于删除其中不合法的标签。具体的标签在 workhorse/internal/upload/exif/exif.go 中的 startProcessing 方法中有定义，为白名单处理。\n而 ExifTool 在解析文件的时候会忽略文件的扩展名，尝试根据文件的内容来确定文件类型，其中支持的类型有 DjVu。\n关键在于 ExifTool 在解析 DjVu 注释的 ParseAnt 函数中存在漏洞，所以我们就可以通过构造 DjVu 文件并插入恶意注释内容将其改为 jpg 后缀上传，因为 gitlab 并未在这个过程中验证文件内容是否是允许的格式，最后让 ExifTool 以 DjVu 形式来解析文件，造成了 ExifTool 代码执行漏洞。\n该漏洞存在于 ExifTool 的 7.44 版本以上，在 12.4 版本中修复。Gitlab v13.10.2 使用的 ExifTool 版本为 11.70。并且接口/uploads/user 可通过获取的 X-CSRF-Token 和未登录 Session 后来进行未授权访问。最终造成了 GitLab 未授权的远程代码执行漏洞。\n其它 gitlab 提供了对 gitlab 安全的一些最佳实践：https://about.gitlab.com/blog/2020/05/20/gitlab-instance-security-best-practices/\n参考 https://hackerone.com/reports/1154542 https://www.anquanke.com/post/id/266606 https://mp.weixin.qq.com/s?__biz=Mzg3MDAzMDQxNw==\u0026amp;mid=2247491418\u0026amp;idx=1\u0026amp;sn=853be1256de894c3c579a07738c11590 https://about.gitlab.com/blog/2021/11/04/action-needed-in-response-to-cve2021-22205/ https://forum.gitlab.com/t/cve-2021-22205-how-to-determine-if-a-self-managed-instance-has-been-impacted/60918?_gl=11y48o1u_gaODE5OTE4NTMuMTY2MjgxODQ3OQ.._ga_ENFH3X7M5Y*MTY2MjgxODQ5MC4xLjAuMTY2MjgxOTE4Ny4wLjAuMA.. https://forum.gitlab.com/t/cve-2021-22205-how-to-determine-if-a-self-managed-instance-has-been-impacted/60918/2?_gl=11y48o1u_gaODE5OTE4NTMuMTY2MjgxODQ3OQ.._ga_ENFH3X7M5Y*MTY2MjgxODQ5MC4xLjAuMTY2MjgxOTE4Ny4wLjAuMA.. https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/ https://hackerone.com/vakzz?type=user https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22205 ","permalink":"https://jasminides.com/posts/gitlab-cve-2021-22205/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近一台服务器出现服务器资源 cpu、内存过高的情况，通过对进程的分析，发现是 gitlab 容器进程，怀疑是 gitlab 被入侵运行了挖矿病毒，通过对 gitlab 日志的分析，可以得出入侵者是利用了 gitlab 的 CVE-2021-22205 的漏洞，对 gitlab 进行了攻击。\u003c/p\u003e\n\u003ch2 id=\"cve-2021-22205-介绍\"\u003eCVE-2021-22205 介绍\u003c/h2\u003e\n\u003cp\u003eCVE-2021-22205 是一个严重的严重性漏洞 (CVSS 10.0)，它是由第三方文件解析器 Exif-Tool 对图像文件进行不当验证的结果，导致远程命令执行漏洞，可能导致您的 GitLab 实例被攻击。\u003c/p\u003e\n\u003cp\u003e以下版本受到漏洞影响:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e11.9.x - 13.8.7\u003c/li\u003e\n\u003cli\u003e13.9.0 - 13.9.5\u003c/li\u003e\n\u003cli\u003e13.10.0 - 13.10.2\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003egitlab 发布了 GitLab 13.10.3、13.9.6 和 13.8.8 版本来解决这个漏洞。请尽快升级。\u003c/p\u003e\n\u003cp\u003e如果无法即使更新和使用热更新补丁解决，可以通过将 exiftool 脚本替换为 cat -。这个解决方案将防止从上传的图像中剥离所有的 exif 数据。\u003c/p\u003e\n\u003cp\u003e将  /opt/gitlab/embedded/bin/exiftool 脚本内容替换为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat -\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种方法不是长久之计，每次重启容器时都要手动修改文件，还是尽快更新版本。\u003c/p\u003e\n\u003ch2 id=\"原因\"\u003e原因\u003c/h2\u003e\n\u003cp\u003e根据 gitlab 的官方漏洞 issues 来看，当访问接口/uploads/user 上传图像文件时，GitLab Workhorse 会将扩展名为 jpg、jpeg、tiff 文件传递给 ExifTool。用于删除其中不合法的标签。具体的标签在 workhorse/internal/upload/exif/exif.go 中的 startProcessing 方法中有定义，为白名单处理。\u003c/p\u003e","title":"Gitlab CVE-2021-22205"},{"content":"前言 本文来简单介绍如何使用 wireshark 来获取 gRPC 请求。\nwireshark 配置 在进行对 gRPC 请求抓包前，得来几个准备。\n设置 proto 文件路径 依次打开 编辑 \u0026gt; 首选项 \u0026gt; Protocols \u0026gt; ProtoBuf, 点击如图选项，添加 proto 文件所在的路径。记得勾选右边的 \u0026ldquo;Load all files\u0026rdquo; 选项。\n设置 TCP 消息解码 默认情况下，界面上显示的都是 TCP 数据包。依次点击菜单栏的 分析 -\u0026gt; 解码为\u0026hellip; （或者右击随便一行）。\n把 9000 (你的 gRPC 服务端端口) 端口的 TCP 消息解码成 HTTP2 协议信息。\n开始抓包 现在开始捕获 gRPC 请求消息，为了避免其他无关的流量，在捕获选项设置筛选 tcp port 9000 只获得跟服务端相关的流量。\n我们使用 postman 向服务端发送请求。回到 wireshark 界面，我们就可以看到许多流量，通过前面设置的解码，我们可以很方便的获得 gRPC 消息的具体内容。\n小结 本文简单介绍了如何使用 wireshark 捕获 gRPC 请求流量。在使用 Wireshark 抓包时把未识别的 HTTP/2 协议手动设置为 HTTP/2，这样会方便很多。\n参考 https://jingwei.link/2018/10/02/grpc-wireshark-analysis.html ","permalink":"https://jasminides.com/posts/grpc-%E8%AF%B7%E6%B1%82%E6%8A%93%E5%8C%85/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e本文来简单介绍如何使用 wireshark 来获取 gRPC 请求。\u003c/p\u003e\n\u003ch2 id=\"wireshark-配置\"\u003ewireshark 配置\u003c/h2\u003e\n\u003cp\u003e在进行对 gRPC 请求抓包前，得来几个准备。\u003c/p\u003e\n\u003ch3 id=\"设置-proto-文件路径\"\u003e设置 proto 文件路径\u003c/h3\u003e\n\u003cp\u003e依次打开 编辑 \u0026gt; 首选项 \u0026gt; Protocols \u0026gt; ProtoBuf, 点击如图选项，添加 proto 文件所在的路径。记得勾选右边的 \u0026ldquo;Load all files\u0026rdquo; 选项。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/grpc%e8%af%b7%e6%b1%82%e6%8a%93%e5%8c%85/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"设置-tcp-消息解码\"\u003e设置 TCP 消息解码\u003c/h3\u003e\n\u003cp\u003e默认情况下，界面上显示的都是 TCP 数据包。依次点击菜单栏的 分析 -\u0026gt; 解码为\u0026hellip; （或者右击随便一行）。\u003c/p\u003e\n\u003cp\u003e把 9000 (你的 gRPC 服务端端口) 端口的 TCP 消息解码成 HTTP2 协议信息。\u003c/p\u003e\n\u003ch2 id=\"开始抓包\"\u003e开始抓包\u003c/h2\u003e\n\u003cp\u003e现在开始捕获 gRPC 请求消息，为了避免其他无关的流量，在捕获选项设置筛选 \u003ccode\u003etcp port 9000\u003c/code\u003e 只获得跟服务端相关的流量。\u003c/p\u003e\n\u003cp\u003e我们使用 postman 向服务端发送请求。回到 wireshark 界面，我们就可以看到许多流量，通过前面设置的解码，我们可以很方便的获得 gRPC 消息的具体内容。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/grpc%e8%af%b7%e6%b1%82%e6%8a%93%e5%8c%85/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文简单介绍了如何使用 wireshark 捕获 gRPC 请求流量。在使用 Wireshark 抓包时把未识别的 HTTP/2 协议手动设置为 HTTP/2，这样会方便很多。\u003c/p\u003e","title":"gRPC 请求抓包"},{"content":"本文主要介绍 gRPC 的服务反射协议和相关的应用。\n介绍 gRPC 服务反射协议 (server reflection) 是在 gRPC 服务端定义的一个服务，它能提供该服务器端上可公开使用的 gRPC 服务的信息，简单的来说，就是服务反射向客户端提供了服务端注册的服务的信息。因此客户端不需要预编译服务定义就能与服务端交互了。\n客户端想要与服务端程序进行通信，必须要有所定义的服务信息，需要编译生产客户端存根，借助 gRPC 服务反射协议，我们就可以无需编译服务定义就能通信。\n使用 该如何开启服务反射协议呢？很简单，只需要通过一行代码即可开启：reflection.Register()\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;google.golang.org/grpc/reflection\u0026#34; ecpb \u0026#34;google.golang.org/grpc/examples/features/proto/echo\u0026#34; hwpb \u0026#34;google.golang.org/grpc/examples/helloworld/helloworld\u0026#34; ) var port = flag.Int(\u0026#34;port\u0026#34;, 50051, \u0026#34;the port to serve on\u0026#34;) // hwServer is used to implement helloworld.GreeterServer. type hwServer struct { hwpb.UnimplementedGreeterServer } // SayHello implements helloworld.GreeterServer func (s *hwServer) SayHello(ctx context.Context, in *hwpb.HelloRequest) (*hwpb.HelloReply, error) { return \u0026amp;hwpb.HelloReply{Message: \u0026#34;Hello \u0026#34; + in.Name}, nil } type ecServer struct { ecpb.UnimplementedEchoServer } func (s *ecServer) UnaryEcho(ctx context.Context, req *ecpb.EchoRequest) (*ecpb.EchoResponse, error) { return \u0026amp;ecpb.EchoResponse{Message: req.Message}, nil } func main() { flag.Parse() lis, err := net.Listen(\u0026#34;tcp\u0026#34;, fmt.Sprintf(\u0026#34;:%d\u0026#34;, *port)) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } fmt.Printf(\u0026#34;server listening at %v\\n\u0026#34;, lis.Addr()) s := grpc.NewServer() // Register Greeter on the server. hwpb.RegisterGreeterServer(s, \u0026amp;hwServer{}) // Register RouteGuide on the same server. ecpb.RegisterEchoServer(s, \u0026amp;ecServer{}) // Register reflection service on gRPC server. reflection.Register(s) if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } 服务端开启服务反射协议后，就可以通过 gRPC CLI 工具来检查服务端了。这里就不多介绍了，接下来我们来看看服务反射协议在 kratos 中的使用。\nkratos 中的应用 在一次调试 gRPC 接口中，当时我是使用 postman 调试的，发现我输入了 gRPC 服务的地址，就会显示出我定义的所有服务。看了提示，kratos 应该也使用了服务反射协议。\n接下来我们通过 kratos 源码来看看，\nfunc NewServer(opts ...ServerOption) *Server { srv := \u0026amp;Server{ baseCtx: context.Background(), network: \u0026#34;tcp\u0026#34;, address: \u0026#34;:0\u0026#34;, timeout: 1 * time.Second, health: health.NewServer(), log: log.NewHelper(log.GetLogger()), } for _, o := range opts { o(srv) } unaryInts := []grpc.UnaryServerInterceptor{ srv.unaryServerInterceptor(), } streamInts := []grpc.StreamServerInterceptor{ srv.streamServerInterceptor(), } if len(srv.unaryInts) \u0026gt; 0 { unaryInts = append(unaryInts, srv.unaryInts...) } if len(srv.streamInts) \u0026gt; 0 { streamInts = append(streamInts, srv.streamInts...) } grpcOpts := []grpc.ServerOption{ grpc.ChainUnaryInterceptor(unaryInts...), grpc.ChainStreamInterceptor(streamInts...), } if srv.tlsConf != nil { grpcOpts = append(grpcOpts, grpc.Creds(credentials.NewTLS(srv.tlsConf))) } if len(srv.grpcOpts) \u0026gt; 0 { grpcOpts = append(grpcOpts, srv.grpcOpts...) } srv.Server = grpc.NewServer(grpcOpts...) srv.metadata = apimd.NewServer(srv.Server) // listen and endpoint srv.err = srv.listenAndEndpoint() // internal register grpc_health_v1.RegisterHealthServer(srv.Server, srv.health) apimd.RegisterMetadataServer(srv.Server, srv.metadata) reflection.Register(srv.Server) return srv } 可以看到 kratos 也注册了我们定义的所有服务和内置的健康检查服务。\n参考 https://github.com/grpc/grpc-go/blob/master/Documentation/server-reflection-tutorial.md https://github.com/grpc/grpc-go/tree/master/examples/features/reflection ","permalink":"https://jasminides.com/posts/grpc-%E6%9C%8D%E5%8A%A1%E5%8F%8D%E5%B0%84%E5%8D%8F%E8%AE%AE/","summary":"\u003cp\u003e本文主要介绍 gRPC 的服务反射协议和相关的应用。\u003c/p\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003egRPC 服务反射协议 (server reflection) 是在 gRPC 服务端定义的一个服务，它能提供该服务器端上可公开使用的 gRPC 服务的信息，简单的来说，就是服务反射向客户端提供了服务端注册的服务的信息。因此客户端不需要预编译服务定义就能与服务端交互了。\u003c/p\u003e\n\u003cp\u003e客户端想要与服务端程序进行通信，必须要有所定义的服务信息，需要编译生产客户端存根，借助 gRPC 服务反射协议，我们就可以无需编译服务定义就能通信。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e该如何开启服务反射协议呢？很简单，只需要通过一行代码即可开启：\u003ccode\u003ereflection.Register()\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc/reflection\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc/examples/features/proto/echo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google.golang.org/grpc/examples/helloworld/helloworld\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInt\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;port\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e50051\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;the port to serve on\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// hwServer is used to implement helloworld.GreeterServer.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehwServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnimplementedGreeterServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// SayHello implements helloworld.GreeterServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehwServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSayHello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHelloRequest\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHelloReply\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHelloReply\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ein\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnimplementedEchoServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eUnaryEcho\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoRequest\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEchoResponse\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:%d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to listen: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;server listening at %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAddr\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Register Greeter on the server.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterGreeterServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehwServer\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Register RouteGuide on the same server.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eecpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterEchoServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eecServer\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Register reflection service on gRPC server.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ereflection\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegister\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to serve: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e服务端开启服务反射协议后，就可以通过 gRPC CLI 工具来检查服务端了。这里就不多介绍了，接下来我们来看看服务反射协议在 kratos 中的使用。\u003c/p\u003e","title":"gRPC 服务反射协议"},{"content":"安装 Metrics Server 有了 Metrics Server，用户就可以访问 Kubernetes 核心监控数据（core metrics）。这其中包括了 Pod、Node、容器、Service 等主要 Kubernetes 核心概念的 Metrics。\nResource MetricsAPI: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 部署 Prometheus kube-prometheus 下载存储库 git clone https://github.com/prometheus-operator/kube-prometheus 使用 manifests 中的配置文件创建监控 stack cd kube-prometheus kubectl create -f manifests/setup until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo \u0026#34;\u0026#34;; done kubectl create -f manifests/ 访问 dashboards 通过 kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090 就能展现prometheus ui grafana\nkubectl --namespace monitoring port-forward svc/grafana 3000 默认账户密码 admin/admin，进入后会要求修改密码，可以看到已经有了预添加了数据源 可以看到有了许多 K8S 监控的默认看板 参考文献 [1] https://time.geekbang.org/column/article/72281?utm_source=geektime\u0026amp;utm_medium=summary\u0026amp;utm_campaign=100015201\u0026amp;utm_content=textlink [2] https://www.cnblogs.com/CloudMan6/p/9148723.html [3] https://www.cnblogs.com/CloudMan6/p/9141757.html [4] kube-prometheus [5] https://prometheus-operator.dev/\n","permalink":"https://jasminides.com/posts/prometheus_operato/","summary":"\u003ch2 id=\"安装-metrics-server\"\u003e安装 Metrics Server\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有了 Metrics Server，用户就可以访问 Kubernetes 核心监控数据（core metrics）。这其中包括了 Pod、Node、容器、Service 等主要 Kubernetes 核心概念的 Metrics。\u003c/p\u003e\n\u003ch1 id=\"resource-metricsapi-httpsgithubcomkubernetescommunityblobmastercontributorsdesign-proposalsinstrumentationresource-metrics-apimd\"\u003eResource MetricsAPI: \u003ca href=\"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md\"\u003ehttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md\u003c/a\u003e\u003c/h1\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"部署-prometheus\"\u003e部署 Prometheus\u003c/h2\u003e\n\u003ch3 id=\"kube-prometheus\"\u003e\u003ca href=\"https://github.com/prometheus-operator/kube-prometheus\"\u003ekube-prometheus\u003c/a\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e下载存储库\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone https://github.com/prometheus-operator/kube-prometheus\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e使用 manifests 中的配置文件创建监控 stack\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd kube-prometheus\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl create -f manifests/setup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003euntil\u003c/span\u003e kubectl get servicemonitors --all-namespaces ; \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e date; sleep 1; echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl create -f manifests/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e访问 dashboards\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e通过 kubectl --namespace monitoring port-forward svc/prometheus-k8s \u003cspan style=\"color:#ae81ff\"\u003e9090\u003c/span\u003e 就能展现prometheus ui\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1620875465230-6e7857ff-3535-4d15-bca9-98b47d21fedf.png#averageHue=%23cfe9d5\u0026amp;height=428\u0026amp;id=F1UKl\u0026amp;originHeight=856\u0026amp;originWidth=1917\u0026amp;originalType=binary\u0026amp;ratio=1\u0026amp;rotation=0\u0026amp;showTitle=false\u0026amp;size=110552\u0026amp;status=done\u0026amp;style=none\u0026amp;title=\u0026amp;width=958.5\" alt=\"image.png\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1620875535488-b3af94d4-1bf1-4221-b278-e86c845205a7.png#averageHue=%23fdfdfd\u0026amp;height=432\u0026amp;id=THWxy\u0026amp;originHeight=864\u0026amp;originWidth=1126\u0026amp;originalType=binary\u0026amp;ratio=1\u0026amp;rotation=0\u0026amp;showTitle=false\u0026amp;size=118446\u0026amp;status=done\u0026amp;style=none\u0026amp;title=\u0026amp;width=563\" alt=\"image.png\"  /\u003e\n\ngrafana\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl --namespace monitoring port-forward svc/grafana \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e默认账户密码 admin/admin，进入后会要求修改密码，可以看到已经有了预添加了数据源\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1620875723995-90f19f42-831f-4dcc-bd6b-8b7cf836bbae.png#averageHue=%23191b1f\u0026amp;height=115\u0026amp;id=sy8g1\u0026amp;originHeight=230\u0026amp;originWidth=1516\u0026amp;originalType=binary\u0026amp;ratio=1\u0026amp;rotation=0\u0026amp;showTitle=false\u0026amp;size=18275\u0026amp;status=done\u0026amp;style=none\u0026amp;title=\u0026amp;width=758\" alt=\"image.png\"  /\u003e\n\n可以看到有了许多 K8S 监控的默认看板\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1620876059975-f2891e89-5495-45ac-9462-e6cf6cdff75e.png#averageHue=%231c1e22\u0026amp;height=434\u0026amp;id=f7vVL\u0026amp;originHeight=867\u0026amp;originWidth=1830\u0026amp;originalType=binary\u0026amp;ratio=1\u0026amp;rotation=0\u0026amp;showTitle=false\u0026amp;size=114088\u0026amp;status=done\u0026amp;style=none\u0026amp;title=\u0026amp;width=915\" alt=\"image.png\"  /\u003e\n\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1620876236007-2d27475f-df3d-4e14-9724-7d5e1dd7dbbd.png#averageHue=%23131518\u0026amp;height=449\u0026amp;id=cjbcr\u0026amp;originHeight=897\u0026amp;originWidth=1860\u0026amp;originalType=binary\u0026amp;ratio=1\u0026amp;rotation=0\u0026amp;showTitle=false\u0026amp;size=115611\u0026amp;status=done\u0026amp;style=none\u0026amp;title=\u0026amp;width=930\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e","title":"Prometheus_operato"},{"content":"前言 在本文中将介绍使用 golang 进行加载某个网站并进行截图。\nchromedp 我们将使用 chromedp 通过浏览器驱动来加载网页并截图。具体的步骤如下：\n1 启动 chrome 浏览器 2 加载网页 (还可进行其他浏览器操作) 3 截图并保存\n需要注意的是项目使用了 Chrome 的驱动，如果没有 Chrome 将不能顺利运行，需要运行 https://hub.docker.com/r/chromedp/headless-shell/ 来进行 或运行其他 版本的 Chrome。\n安装 go get -u github.com/chromedp/chromedp 示例 package main import ( \u0026#34;context\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/chromedp/chromedp\u0026#34; ) func main() { ctx, cancel := chromedp.NewContext(context.Background(), chromedp.WithDebugf(log.Printf)) defer cancel() url := \u0026#34;https://www.minigame.vip/\u0026#34; filename := \u0026#34;minigame.png\u0026#34; var imageBuf []byte // 捕获某个元素的截图 if err := chromedp.Run(ctx, elementScreenshot(`https://pkg.go.dev/`, `img.Homepage-logo`, \u0026amp;imageBuf)); err != nil { log.Fatal(err) } if err := ioutil.WriteFile(\u0026#34;elementScreenshot.png\u0026#34;, imageBuf, 0644); err != nil { log.Fatal(err) } if err := chromedp.Run(ctx, ScreenshotTasks(url, \u0026amp;imageBuf)); err != nil { log.Fatal(err) } if err := ioutil.WriteFile(filename, imageBuf, 0644); err != nil { log.Fatal(err) } } func elementScreenshot(urlstr, sel string, res *[]byte) chromedp.Tasks { return chromedp.Tasks{ chromedp.Navigate(urlstr), chromedp.Screenshot(sel, res, chromedp.NodeVisible), } } func ScreenshotTasks(url string, imageBuf *[]byte) chromedp.Tasks { return chromedp.Tasks{ chromedp.Navigate(url), chromedp.FullScreenshot(imageBuf, 90), } } 上面的例子分别是对网页中的单个元素进行截图和对网页全局截图。\n小结 本文主要简单介绍使用 go 进行浏览器网页截图。chromedp 还有许多功能等待你们的发掘。\n参考 https://github.com/chromedp/chromedp https://github.com/chromedp/examples ","permalink":"https://jasminides.com/posts/go-%E8%BF%9B%E8%A1%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在本文中将介绍使用 golang 进行加载某个网站并进行截图。\u003c/p\u003e\n\u003ch2 id=\"chromedp\"\u003echromedp\u003c/h2\u003e\n\u003cp\u003e我们将使用 chromedp 通过浏览器驱动来加载网页并截图。具体的步骤如下：\u003c/p\u003e\n\u003cp\u003e1 启动 chrome 浏览器\n2 加载网页 (还可进行其他浏览器操作)\n3 截图并保存\u003c/p\u003e\n\u003cp\u003e需要注意的是项目使用了 Chrome 的驱动，如果没有 Chrome 将不能顺利运行，需要运行 \u003ca href=\"https://hub.docker.com/r/chromedp/headless-shell/\"\u003ehttps://hub.docker.com/r/chromedp/headless-shell/\u003c/a\u003e 来进行 或运行其他 版本的 Chrome。\u003c/p\u003e\n\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get -u github.com/chromedp/chromedp\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"示例\"\u003e示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io/ioutil\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/chromedp/chromedp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithDebugf\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://www.minigame.vip/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efilename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;minigame.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 捕获某个元素的截图\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eelementScreenshot\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`https://pkg.go.dev/`\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e`img.Homepage-logo`\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e)); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eioutil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWriteFile\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;elementScreenshot.png\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0644\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eScreenshotTasks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e)); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eioutil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWriteFile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0644\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eelementScreenshot\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurlstr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esel\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e[]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTasks\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTasks\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNavigate\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurlstr\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eScreenshot\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esel\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNodeVisible\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eScreenshotTasks\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e[]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTasks\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTasks\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNavigate\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003echromedp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFullScreenshot\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eimageBuf\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e90\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的例子分别是对网页中的单个元素进行截图和对网页全局截图。\u003c/p\u003e","title":"Go 进行浏览器网页截图"},{"content":"简介 psutil 是一个使用 Python 编写的跨平台平台进程和系统利用率监控库，gopsutil 就是 psutil 的 go 语言实现。\n使用 安装 go get github.com/shirou/gopsutil/v3 CPU 获取 cpu 基本信息 func getCpuInfo() { cpuInfos, err := cpu.Info() if err != nil { fmt.Printf(\u0026#34;get cpu info failed, err:%v\u0026#34;, err) } for _, ci := range cpuInfos { fmt.Println(ci) } for { percent, _ := cpu.Percent(time.Second, false) fmt.Printf(\u0026#34;cpu percent:%v\\n\u0026#34;, percent) } } {\u0026#34;cpu\u0026#34;:0,\u0026#34;vendorId\u0026#34;:\u0026#34;GenuineIntel\u0026#34;,\u0026#34;family\u0026#34;:\u0026#34;205\u0026#34;,\u0026#34;model\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;stepping\u0026#34;:0,\u0026#34;physicalId\u0026#34;:\u0026#34;BFEBFBFF000406E3\u0026#34;,\u0026#34;coreId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;cores\u0026#34;:4,\u0026#34;modelName\u0026#34;:\u0026#34;Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\u0026#34;,\u0026#34;mhz\u0026#34;:2400,\u0026#34;cacheSize\u0026#34;:0,\u0026#34;flags\u0026#34;:[],\u0026#34;microcode\u0026#34;:\u0026#34;\u0026#34;} cpu percent:[40.625] cpu percent:[15] cpu percent:[9.615384615384617] cpu percent:[28.125] 获取 cpu 负载 func getCpuLoad() { info, err := load.Avg() if err != nil { panic(err) } fmt.Printf(\u0026#34;%v\\n\u0026#34;, info) } 内存 获取内存 func getMemInfo() { memInfo, _ := mem.VirtualMemory() fmt.Printf(\u0026#34;mem info:%v\\n\u0026#34;, memInfo) } mem info:{\u0026#34;total\u0026#34;:8472920064,\u0026#34;available\u0026#34;:1921372160,\u0026#34;used\u0026#34;:6551547904,\u0026#34;usedPerce nt\u0026#34;:77,\u0026#34;free\u0026#34;:1921372160,\u0026#34;active\u0026#34;:0,\u0026#34;inactive\u0026#34;:0,\u0026#34;wired\u0026#34;:0,\u0026#34;laundry\u0026#34;:0,\u0026#34;buffers\u0026#34; :0,\u0026#34;cached\u0026#34;:0,\u0026#34;writeBack\u0026#34;:0,\u0026#34;dirty\u0026#34;:0,\u0026#34;writeBackTmp\u0026#34;:0,\u0026#34;shared\u0026#34;:0,\u0026#34;slab\u0026#34;:0,\u0026#34;srec laimable\u0026#34;:0,\u0026#34;sunreclaim\u0026#34;:0,\u0026#34;pageTables\u0026#34;:0,\u0026#34;swapCached\u0026#34;:0,\u0026#34;commitLimit\u0026#34;:0,\u0026#34;commit tedAS\u0026#34;:0,\u0026#34;highTotal\u0026#34;:0,\u0026#34;highFree\u0026#34;:0,\u0026#34;lowTotal\u0026#34;:0,\u0026#34;lowFree\u0026#34;:0,\u0026#34;swapTotal\u0026#34;:0,\u0026#34;swap Free\u0026#34;:0,\u0026#34;mapped\u0026#34;:0,\u0026#34;vmallocTotal\u0026#34;:0,\u0026#34;vmallocUsed\u0026#34;:0,\u0026#34;vmallocChunk\u0026#34;:0,\u0026#34;hugePagesT otal\u0026#34;:0,\u0026#34;hugePagesFree\u0026#34;:0,\u0026#34;hugePagesRsvd\u0026#34;:0,\u0026#34;hugePagesSurp\u0026#34;:0,\u0026#34;hugePageSize\u0026#34;:0} 库的其他用法可以查看相应的官方文档。\n小结 本文主要介绍 gopsutil 的使用，使用 gopsutil 可以很好的监控系统的资源。从 github 仓库可以看到此库十分受欢迎，在许多开源项目中有使用。\n本文的相关代码在这：https://github.com/overstarry/psutil/tree/master\n参考 https://github.com/shirou/gopsutil https://github.com/giampaolo/psutil ","permalink":"https://jasminides.com/posts/gopsutil-%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003epsutil 是一个使用 Python 编写的跨平台平台进程和系统利用率监控库，gopsutil 就是 psutil 的 go 语言实现。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/shirou/gopsutil/v3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"cpu\"\u003eCPU\u003c/h3\u003e\n\u003ch4 id=\"获取-cpu-基本信息\"\u003e获取 cpu 基本信息\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetCpuInfo\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ecpuInfos\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecpu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfo\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;get cpu info failed, err:%v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eci\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecpuInfos\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eci\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003epercent\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecpu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePercent\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cpu percent:%v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epercent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u0026#34;cpu\u0026#34;:0,\u0026#34;vendorId\u0026#34;:\u0026#34;GenuineIntel\u0026#34;,\u0026#34;family\u0026#34;:\u0026#34;205\u0026#34;,\u0026#34;model\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;stepping\u0026#34;:0,\u0026#34;physicalId\u0026#34;:\u0026#34;BFEBFBFF000406E3\u0026#34;,\u0026#34;coreId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;cores\u0026#34;:4,\u0026#34;modelName\u0026#34;:\u0026#34;Intel(R)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e Core(TM) i5-6200U CPU @ 2.30GHz\u0026#34;,\u0026#34;mhz\u0026#34;:2400,\u0026#34;cacheSize\u0026#34;:0,\u0026#34;flags\u0026#34;:[],\u0026#34;microcode\u0026#34;:\u0026#34;\u0026#34;}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecpu percent:[40.625]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecpu percent:[15]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecpu percent:[9.615384615384617]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecpu percent:[28.125]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"获取-cpu-负载\"\u003e获取 cpu 负载\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetCpuLoad\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eload\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAvg\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    panic(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"内存\"\u003e内存\u003c/h3\u003e\n\u003ch4 id=\"获取内存\"\u003e获取内存\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMemInfo\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ememInfo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emem\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eVirtualMemory\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mem info:%v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ememInfo\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emem info:{\u0026#34;total\u0026#34;:8472920064,\u0026#34;available\u0026#34;:1921372160,\u0026#34;used\u0026#34;:6551547904,\u0026#34;usedPerce\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ent\u0026#34;:77,\u0026#34;free\u0026#34;:1921372160,\u0026#34;active\u0026#34;:0,\u0026#34;inactive\u0026#34;:0,\u0026#34;wired\u0026#34;:0,\u0026#34;laundry\u0026#34;:0,\u0026#34;buffers\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e:0,\u0026#34;cached\u0026#34;:0,\u0026#34;writeBack\u0026#34;:0,\u0026#34;dirty\u0026#34;:0,\u0026#34;writeBackTmp\u0026#34;:0,\u0026#34;shared\u0026#34;:0,\u0026#34;slab\u0026#34;:0,\u0026#34;srec\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elaimable\u0026#34;:0,\u0026#34;sunreclaim\u0026#34;:0,\u0026#34;pageTables\u0026#34;:0,\u0026#34;swapCached\u0026#34;:0,\u0026#34;commitLimit\u0026#34;:0,\u0026#34;commit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etedAS\u0026#34;:0,\u0026#34;highTotal\u0026#34;:0,\u0026#34;highFree\u0026#34;:0,\u0026#34;lowTotal\u0026#34;:0,\u0026#34;lowFree\u0026#34;:0,\u0026#34;swapTotal\u0026#34;:0,\u0026#34;swap\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFree\u0026#34;:0,\u0026#34;mapped\u0026#34;:0,\u0026#34;vmallocTotal\u0026#34;:0,\u0026#34;vmallocUsed\u0026#34;:0,\u0026#34;vmallocChunk\u0026#34;:0,\u0026#34;hugePagesT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eotal\u0026#34;:0,\u0026#34;hugePagesFree\u0026#34;:0,\u0026#34;hugePagesRsvd\u0026#34;:0,\u0026#34;hugePagesSurp\u0026#34;:0,\u0026#34;hugePageSize\u0026#34;:0}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e库的其他用法可以查看相应的官方文档。\u003c/p\u003e","title":"gopsutil 介绍"},{"content":"最近在使用 MinIO go-sdk 操作阿里云 OSS 时遇到了一个问题，特此记录下。\n问题 在使用 sdk 调用 PutObject 方法时，发生了报错，具体报错如下：\nThe request signature we calculated does not match the signature you provided. Check your key and signing method. 解决 可以看出报错的意思是签名不一致问题，我们首先检查 AccessKey ID 和 AccessKey Secret 是否正确，我发现同样创建的 client 在其它地方调用 方法时，没有报错，成功上传了文件对象。\n后来查了多个相关的问题，发现可能是我填写的 objectName 的问题，我的 objectName 前带了 / 符号，导致在计算签名时变成 // ,使签名不一致。\n我去掉前面的 \u0026lsquo;/\u0026rsquo; 符号后，果然成功上传了。\n总结 在编写相关操作 OSS 代码时，要注意 objectName 的格式，不要加上多余的符号。但奇怪的是原来上传至 MinIO 时没有报错，正常上传，可能是不同的存储有不同的签名规则吧。\n参考 https://help.aliyun.com/document_detail/31951.htm?spm=a2c4g.11186623.0.0.3057jkGJjkGJjL https://blog.csdn.net/DCTANT/article/details/107917268 https://error-center.aliyun.com/status/search?Keyword=SignatureDoesNotMatch\u0026amp;source=PopGw\u0026amp;quot;; ","permalink":"https://jasminides.com/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91-oss-%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3/","summary":"\u003cp\u003e最近在使用 MinIO go-sdk 操作阿里云 OSS 时遇到了一个问题，特此记录下。\u003c/p\u003e\n\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e在使用 sdk 调用 PutObject 方法时，发生了报错，具体报错如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe request signature we calculated does not match the signature you provided. Check your key and signing method.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e可以看出报错的意思是签名不一致问题，我们首先检查 AccessKey ID  和 AccessKey Secret 是否正确，我发现同样创建的 client 在其它地方调用 方法时，没有报错，成功上传了文件对象。\u003c/p\u003e\n\u003cp\u003e后来查了多个相关的问题，发现可能是我填写的 objectName 的问题，我的 objectName 前带了 \u003ccode\u003e/\u003c/code\u003e 符号，导致在计算签名时变成 \u003ccode\u003e//\u003c/code\u003e ,使签名不一致。\u003c/p\u003e\n\u003cp\u003e我去掉前面的 \u0026lsquo;/\u0026rsquo; 符号后，果然成功上传了。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e在编写相关操作 OSS 代码时，要注意 objectName 的格式，不要加上多余的符号。但奇怪的是原来上传至 MinIO 时没有报错，正常上传，可能是不同的存储有不同的签名规则吧。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://help.aliyun.com/document_detail/31951.htm?spm=a2c4g.11186623.0.0.3057jkGJjkGJjL\"\u003ehttps://help.aliyun.com/document_detail/31951.htm?spm=a2c4g.11186623.0.0.3057jkGJjkGJjL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.csdn.net/DCTANT/article/details/107917268\"\u003ehttps://blog.csdn.net/DCTANT/article/details/107917268\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://error-center.aliyun.com/status/search?Keyword=SignatureDoesNotMatch\u0026amp;source=PopGw\u0026amp;quot;;\"\u003ehttps://error-center.aliyun.com/status/search?Keyword=SignatureDoesNotMatch\u0026amp;source=PopGw\u0026amp;quot;;\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"记一次阿里云 OSS 报错的解决"},{"content":"简介 gRPC 健康探针 grpc-health-probe 是社区提供的一个工具，用来检查 gRPC 服务的健康状态，此工具 是通过 gRPC 健康检查协议公开服务的状态。\n使用 我在本地使用 kratos 创建一个使用 9000 端口的 gRPC 的服务。通过 grpc-health-probe 可以检查服务的健康状态。\ngrpc-health-probe -addr=localhost:9000 status: SERVING 可以看到此服务目前是健康的，不健康的服务将以非零退出代码退出。\ngrpc_health_probe -addr=localhost:9000 -connect-timeout 250ms -rpc-timeout 100ms failed to connect service at \u0026#34;localhost:9000\u0026#34;: context deadline exceeded exit status 2 grpc_health_probe 发送了一个对 /grpc.health.v1.Health/Check 的 RPC 请求。如果已 SERVING 状态作为响应，就会正常成功退出，否则会给出一个非零的退出。\nKubernetes 使用 grpc_health_probe 可用于 Kubernetes 对 Pod 中运行的 gRPC 服务器进行健康检查。建议您使用 Kubernetes exec 探针并为您的 gRPC 服务器 pod 定义活跃度和/或就绪性检查。\n您可以将静态编译 grpc_health_probe 的内容捆绑到您的容器映像中。\nRUN GRPC_HEALTH_PROBE_VERSION=v0.3.1 \u0026amp;\u0026amp; \\ wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 \u0026amp;\u0026amp; \\ chmod +x /bin/grpc_health_probe 在您的 Kubernetes Pod 规范清单中，为容器指定一个 livenessProbe 和/或：readinessProbe\nspec: containers: - name: server image: \u0026#34;[YOUR-DOCKER-IMAGE]\u0026#34; ports: - containerPort: 5000 readinessProbe: exec: command: [\u0026#34;/bin/grpc_health_probe\u0026#34;, \u0026#34;-addr=:5000\u0026#34;] initialDelaySeconds: 5 livenessProbe: exec: command: [\u0026#34;/bin/grpc_health_probe\u0026#34;, \u0026#34;-addr=:5000\u0026#34;] initialDelaySeconds: 10 Kubernetes v1.23 现在引入了内置的 gRPC 健康检查 功能作为 alpha 功能。因此，您可能不再需要使用此工具，而是使用原生 Kubernetes 功能。\n如果您使用的是旧版本的 Kubernetes，或者使用高级配置（例如自定义元数据、TLS 或更精细的超时调整），或者根本不使用 Kubernetes，这个工具仍然很有用。\n参考 https://github.com/grpc/grpc-go/tree/master/examples/features/health https://github.com/grpc-ecosystem/grpc-health-probe ","permalink":"https://jasminides.com/posts/grpc-%E5%81%A5%E5%BA%B7%E6%8E%A2%E9%92%88/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003egRPC 健康探针 grpc-health-probe 是社区提供的一个工具，用来检查 gRPC 服务的健康状态，此工具 是通过 gRPC 健康检查协议公开服务的状态。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e我在本地使用 kratos 创建一个使用 9000 端口的 gRPC 的服务。通过 grpc-health-probe 可以检查服务的健康状态。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e grpc-health-probe -addr=localhost:9000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estatus: SERVING\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到此服务目前是健康的，不健康的服务将以非零退出代码退出。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egrpc_health_probe -addr=localhost:9000 -connect-timeout 250ms -rpc-timeout 100ms\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efailed to connect service at \u0026#34;localhost:9000\u0026#34;: context deadline exceeded\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexit status 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003egrpc_health_probe 发送了一个对 /grpc.health.v1.Health/Check 的 RPC 请求。如果已 SERVING 状态作为响应，就会正常成功退出，否则会给出一个非零的退出。\u003c/p\u003e\n\u003ch2 id=\"kubernetes-使用\"\u003eKubernetes 使用\u003c/h2\u003e\n\u003cp\u003egrpc_health_probe 可用于 Kubernetes 对 Pod 中运行的 gRPC 服务器进行健康检查。建议您使用 Kubernetes exec 探针并为您的 gRPC 服务器 pod 定义活跃度和/或就绪性检查。\u003c/p\u003e\n\u003cp\u003e您可以将静态编译 grpc_health_probe 的内容捆绑到您的容器映像中。\u003c/p\u003e","title":"gRPC 健康探针"},{"content":"本篇文章我来介绍 gRPC 中的健康检查相关的知识。\n简介 服务的健康检测一般是指的是检测服务是否正常运行：\n是否存在，因为程序逻辑错误或者 OOM 等进程不存在； 存在是否可以正常的响应请求，尽管进程存在但可能因为请求量过大或者程序逻辑错误，导致服务 hang 住，无法正常对外请求。 gRPC 定义了一个健康检查协议，它允许使用了 gRPC 服务暴露服务器的状态，这样服务的消费者就能获得服务的健康状态。服务器的健康状态是由服务器是否响应非健康状态来确定的。 当服务器还没准备好处理 rpc 请求或者根本没有响应健康探针的请求时，就会发生这种情况。\n健康服务定义 gRPC 健康检查协议基于 gRPC 定义了 API。下面就是服务定义：\nsyntax = \u0026#34;proto3\u0026#34;; package grpc.health.v1; message HealthCheckRequest { string service = 1; } message HealthCheckResponse { enum ServingStatus { UNKNOWN = 0; SERVING = 1; NOT_SERVING = 2; } ServingStatus status = 1; } service Health { rpc Check(HealthCheckRequest) returns (HealthCheckResponse); rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse); } 客户端应该调用 Check 服务来判断服务是否正常运行，并且设置 deadline。客户端可以设置需要查询的服务名称，来返回对应的服务是否正常。\n服务器应手动注册所有的服务并单个设置状态，包括空服务名称及其状态。对于收到的每一个请求，从注册表中查询服务的状态并返回。如果未找到，返回 NOT_FOUND 状态。服务器也可以根据实际的业务逻辑提供更为复杂的状态返回。\n客户端还可以调用 Watch 方法执行流的健康检测，服务器会不断的返回服务的健康状态。\ngolang 在代码中只要通过这几行代码：\nhealthcheck := health.NewServer() healthpb.RegisterHealthServer(s, healthcheck) 然后可以手动调用 SetServingStatus 来设置具体的 service 的状态。\n参考 https://github.com/grpc/grpc-go/tree/master/examples/features/health https://github.com/grpc/grpc/blob/master/doc/health-checking.md https://segmentfault.com/a/1190000018362469 ","permalink":"https://jasminides.com/posts/grpc-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/","summary":"\u003cp\u003e本篇文章我来介绍 gRPC 中的健康检查相关的知识。\u003c/p\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e服务的健康检测一般是指的是检测服务是否正常运行：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e是否存在，因为程序逻辑错误或者 OOM 等进程不存在；\u003c/li\u003e\n\u003cli\u003e存在是否可以正常的响应请求，尽管进程存在但可能因为请求量过大或者程序逻辑错误，导致服务 hang 住，无法正常对外请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003egRPC 定义了一个健康检查协议，它允许使用了 gRPC 服务暴露服务器的状态，这样服务的消费者就能获得服务的健康状态。服务器的健康状态是由服务器是否响应非健康状态来确定的。\n当服务器还没准备好处理 rpc 请求或者根本没有响应健康探针的请求时，就会发生这种情况。\u003c/p\u003e\n\u003ch2 id=\"健康服务定义\"\u003e健康服务定义\u003c/h2\u003e\n\u003cp\u003egRPC 健康检查协议基于 gRPC 定义了 API。下面就是服务定义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-protobuf\" data-lang=\"protobuf\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esyntax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e grpc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehealth.v1;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHealthCheckRequest\u003c/span\u003e {\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eservice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHealthCheckResponse\u003c/span\u003e {\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e ServingStatus {\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e    UNKNOWN \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e    SERVING \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e    NOT_SERVING \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  }\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  ServingStatus status \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eservice\u003c/span\u003e Health {\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003erpc\u003c/span\u003e Check(HealthCheckRequest) \u003cspan style=\"color:#66d9ef\"\u003ereturns\u003c/span\u003e (HealthCheckResponse);\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003erpc\u003c/span\u003e Watch(HealthCheckRequest) \u003cspan style=\"color:#66d9ef\"\u003ereturns\u003c/span\u003e (stream HealthCheckResponse);\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e客户端应该调用 Check 服务来判断服务是否正常运行，并且设置 deadline。客户端可以设置需要查询的服务名称，来返回对应的服务是否正常。\u003c/p\u003e\n\u003cp\u003e服务器应手动注册所有的服务并单个设置状态，包括空服务名称及其状态。对于收到的每一个请求，从注册表中查询服务的状态并返回。如果未找到，返回 NOT_FOUND 状态。服务器也可以根据实际的业务逻辑提供更为复杂的状态返回。\u003c/p\u003e","title":"GRPC 健康检查"},{"content":"介绍 电子邮件是一种用电子手段提供信息交换的通信方式，是互联网应用最广的服务。通过网络的电子邮件系统，用户可以以非常低廉的价格（不管发送到哪里，都只需负担网费）、非常快速的方式（几秒钟之内可以发送到世界上任何指定的目的地），与世界上任何一个角落的网络用户联系。\n电子邮件在网络中的传输需要遵从一定的协议的，常用的电子邮件协议包括 SMTP，POP3，IMAP。电子邮件的创建和发送只涉及到 SMTP 协议，本文主要就是介绍 go 使用 SMTP 协议发生邮件。\n使用 我们这里使用 https://github.com/jordan-wright/email 这个 pkg 来创建和发送邮件。pkg 的安装这里就不过多介绍了。\n我们知道邮箱使用 SMTP/POP3/IMAP 等协议从邮件服务器上拉取邮件。邮件并不是直接发送到邮箱的，而是邮箱请求拉取的。所以，我们需要配置 SMTP/POP3/IMAP 服务器。从头搭建固然可行，而且也有现成的开源库，但是比较麻烦。这里我使用 gmail，配置流程就不过多介绍了 (ps: Google 的安全性还是比较强的，设置了好久。\n代码：\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;net/smtp\u0026#34; \u0026#34;github.com/jordan-wright/email\u0026#34; ) func main() { e := email.NewEmail() e.From = \u0026#34;jm@gmail.com\u0026#34; e.To = []string{\u0026#34;1@qq.com\u0026#34;} e.Subject = \u0026#34;这是主题\u0026#34; e.Text = []byte(\u0026#34;测试邮件发送\u0026#34;) err := e.Send(\u0026#34;smtp.gmail.com:587\u0026#34;, smtp.PlainAuth(\u0026#34;\u0026#34;, \u0026#34;jm@gmail.com\u0026#34;, \u0026#34;xx\u0026#34;, \u0026#34;smtp.gmail.com\u0026#34;)) if err != nil { log.Fatal(err) } } 过一会就顺利收到邮件了，有时候邮件会被当作垃圾邮件收入垃圾箱里，收不到时可以去垃圾箱看看。\n参考 https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106 ","permalink":"https://jasminides.com/posts/go-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003e电子邮件是一种用电子手段提供信息交换的通信方式，是互联网应用最广的服务。通过网络的电子邮件系统，用户可以以非常低廉的价格（不管发送到哪里，都只需负担网费）、非常快速的方式（几秒钟之内可以发送到世界上任何指定的目的地），与世界上任何一个角落的网络用户联系。\u003c/p\u003e\n\u003cp\u003e电子邮件在网络中的传输需要遵从一定的协议的，常用的电子邮件协议包括 SMTP，POP3，IMAP。电子邮件的创建和发送只涉及到 SMTP 协议，本文主要就是介绍 go 使用 SMTP 协议发生邮件。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003cp\u003e我们这里使用 \u003ca href=\"https://github.com/jordan-wright/email\"\u003ehttps://github.com/jordan-wright/email\u003c/a\u003e 这个 pkg 来创建和发送邮件。pkg 的安装这里就不过多介绍了。\u003c/p\u003e\n\u003cp\u003e我们知道邮箱使用 SMTP/POP3/IMAP 等协议从邮件服务器上拉取邮件。邮件并不是直接发送到邮箱的，而是邮箱请求拉取的。所以，我们需要配置 SMTP/POP3/IMAP 服务器。从头搭建固然可行，而且也有现成的开源库，但是比较麻烦。这里我使用 gmail，配置流程就不过多介绍了 (ps: Google 的安全性还是比较强的，设置了好久。\u003c/p\u003e\n\u003cp\u003e代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/smtp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/jordan-wright/email\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eemail\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewEmail\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFrom\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;jm@gmail.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTo\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1@qq.com\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSubject\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;这是主题\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eText\u003c/span\u003e = []byte(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;测试邮件发送\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;smtp.gmail.com:587\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esmtp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePlainAuth\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;jm@gmail.com\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;smtp.gmail.com\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e过一会就顺利收到邮件了，有时候邮件会被当作垃圾邮件收入垃圾箱里，收不到时可以去垃圾箱看看。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106\"\u003ehttps://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Go 发送邮件"},{"content":"问题 最近在代码中遇到了这么一个问题，现在有一个循环，每一个循环中创建一个协程用来执行函数，我发现函数运行的结果却是大部分时候都是使用最后一个循环变量，不符合实际要求。\n大概的代码如下：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { for i := 0; i \u0026lt; 10; i++ { go func() { fmt.Println(i) }() } http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } 运行：\n10 10 10 10 10 10 10 10 10 10 多次运行，可以发现大部分情况都是将 i = 10 代入函数执行。\n原因 那这是为什么呢？这个就是函数闭包。协程运行的是一个闭包函数，其中使用了主线程的变量 i。看上去这和第一组几乎一样。但是在每个协程中，从进入匿名函数到调用 Println 将 i 的值复制入栈之间仍需要一小段时间运行，而这段时间内足以主线程完成全部 10 次循环。所以终于到将 i 的值复制入栈调用 Println 时，i 已经成为 10 且不再变化了。\n解决 那该怎么解决使代码如我们的需求运行呢？\n我们只需将变量 i 复制进栈中即可，改动后的代码：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { for i := 0; i \u0026lt; 10; i++ { go func(j int) { fmt.Println(j) }(i) } http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } 结果：\n0 4 1 2 3 6 5 7 8 9 ","permalink":"https://jasminides.com/posts/go-%E5%8D%8F%E7%A8%8B%E9%97%AD%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在代码中遇到了这么一个问题，现在有一个循环，每一个循环中创建一个协程用来执行函数，我发现函数运行的结果却是大部分时候都是使用最后一个循环变量，不符合实际要求。\u003c/p\u003e\n\u003cp\u003e大概的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListenAndServe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:8080\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e多次运行，可以发现大部分情况都是将 i = 10 代入函数执行。\u003c/p\u003e\n\u003ch2 id=\"原因\"\u003e原因\u003c/h2\u003e\n\u003cp\u003e那这是为什么呢？这个就是函数闭包。协程运行的是一个闭包函数，其中使用了主线程的变量 i。看上去这和第一组几乎一样。但是在每个协程中，从进入匿名函数到调用 Println 将 i 的值复制入栈之间仍需要一小段时间运行，而这段时间内足以主线程完成全部 10 次循环。所以终于到将 i 的值复制入栈调用 Println 时，i 已经成为 10 且不再变化了。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e那该怎么解决使代码如我们的需求运行呢？\u003c/p\u003e\n\u003cp\u003e我们只需将变量 i 复制进栈中即可，改动后的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e) }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListenAndServe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:8080\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e结果：\u003c/p\u003e","title":"Go 协程闭包的问题"},{"content":"起因 最近在处理一个需求，需要将 png 图像按比例调整图像尺寸，要求在保证图像质量的情况下尽量缩小文件大小。在本篇文章主要介绍我将 png 文件大小缩小使用的方法。\n方法 这个需求缩小图像的尺寸很好解决，但缩小后的图像大小不尽人意，缩小的图像文件大小没有变化过多，甚至更大。我通过查询，发现了一种方法，就是先将图片转换为 jpeg 格式，再进行压缩后转换为 png 即可。\nJpeg 的图片压缩是很好做的，因为 jpeg 这个协议本身就支持调整图片质量的。在 golang 中，我们只需要使用标准库的 image/jpeg，将图片从二进制数据解码后，降低质量再编码为二进制数据即可实现压缩。而且质量和压缩比例相对而言还不错。\nfunc compressImageResource(data []byte) []byte { imgSrc, _, err := image.Decode(bytes.NewReader(data)) if err != nil { return data } newImg := image.NewRGBA(imgSrc.Bounds()) draw.Draw(newImg, newImg.Bounds(), \u0026amp;image.Uniform{C: color.White}, image.Point{}, draw.Src) draw.Draw(newImg, newImg.Bounds(), imgSrc, imgSrc.Bounds().Min, draw.Over) buf := bytes.Buffer{} err = jpeg.Encode(\u0026amp;buf, newImg, \u0026amp;jpeg.Options{Quality: 40}) if err != nil { return data } if buf.Len() \u0026gt; len(data) { return data } return buf.Bytes() } 小结 本文主要介绍了将 png 图像大小缩小的一种简单方法，还有其他方法等待你们的发掘。\n","permalink":"https://jasminides.com/posts/go-%E5%8E%8B%E7%BC%A9-png-%E5%9B%BE%E5%83%8F%E5%A4%A7%E5%B0%8F/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近在处理一个需求，需要将 png 图像按比例调整图像尺寸，要求在保证图像质量的情况下尽量缩小文件大小。在本篇文章主要介绍我将 png 文件大小缩小使用的方法。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003c/h2\u003e\n\u003cp\u003e这个需求缩小图像的尺寸很好解决，但缩小后的图像大小不尽人意，缩小的图像文件大小没有变化过多，甚至更大。我通过查询，发现了一种方法，就是先将图片转换为 jpeg 格式，再进行压缩后转换为 png 即可。\u003c/p\u003e\n\u003cp\u003eJpeg 的图片压缩是很好做的，因为 jpeg 这个协议本身就支持调整图片质量的。在 golang 中，我们只需要使用标准库的 image/jpeg，将图片从二进制数据解码后，降低质量再编码为二进制数据即可实现压缩。而且质量和压缩比例相对而言还不错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompressImageResource\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimgSrc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eimage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDecode\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewReader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eimage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewRGBA\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eimgSrc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBounds\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edraw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDraw\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBounds\u003c/span\u003e(), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eimage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUniform\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ecolor\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e}, \u003cspan style=\"color:#a6e22e\"\u003eimage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePoint\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003edraw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSrc\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edraw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDraw\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBounds\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003eimgSrc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eimgSrc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBounds\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eMin\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edraw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOver\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBuffer\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ejpeg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEncode\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enewImg\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ejpeg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOptions\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eQuality\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e() \u0026gt; len(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBytes\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e本文主要介绍了将 png 图像大小缩小的一种简单方法，还有其他方法等待你们的发掘。\u003c/p\u003e","title":"Go 压缩 png 图像大小"},{"content":"问题 最近在某个场景中，需要使用 go 官方的 archive/zip 处理 zip 压缩包，在处理过程中，遇到了一个问题：go 解压后的文件存在文件名乱码的情况。\n解决 我们知道在 go 中，字符串是以 UTF-8 编码的，所以有可能出现乱码的情况。\n我们只要在处理压缩包中的文件时，通过判断 Flags 字段，如果 Flags 为 0 , 则使用本地编码，默认为 GBK。如果为 1 , 则使用 UTF-8 编码。\n我们只要在为 0 时对文件名进行处理就好。代码：\nfunc Unzip(zipFile string, destDir string) error { zipReader, err := zip.OpenReader(zipFile) if err != nil { return err } defer zipReader.Close() var decodeName string for _, f := range zipReader.File { if f.Flags == 0{ i:= bytes.NewReader([]byte(f.Name)) decoder := transform.NewReader(i, simplifiedchinese.GB18030.NewDecoder()) content,_:= ioutil.ReadAll(decoder) decodeName = string(content) }else{ decodeName = f.Name } fpath := filepath.Join(destDir, decodeName) if f.FileInfo().IsDir() { os.MkdirAll(fpath, os.ModePerm) } else { if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil { return err } inFile, err := f.Open() if err != nil { return err } defer inFile.Close() outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode()) if err != nil { return err } defer outFile.Close() _, err = io.Copy(outFile, inFile) if err != nil { return err } } } return nil } 参考 https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/ https://chai2010.cn/post/golang/go-zip-utf8/ https://codereview.appspot.com/54360043/ https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT ","permalink":"https://jasminides.com/posts/go-%E5%A4%84%E7%90%86-zip-%E8%A7%A3%E5%8E%8B%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在某个场景中，需要使用 go 官方的 archive/zip 处理 zip 压缩包，在处理过程中，遇到了一个问题：go 解压后的文件存在文件名乱码的情况。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e我们知道在 go 中，字符串是以 UTF-8 编码的，所以有可能出现乱码的情况。\u003c/p\u003e\n\u003cp\u003e我们只要在处理压缩包中的文件时，通过判断 Flags 字段，如果 Flags 为 0 , 则使用本地编码，默认为 GBK。如果为 1 , 则使用 UTF-8 编码。\u003c/p\u003e\n\u003cp\u003e我们只要在为 0 时对文件名进行处理就好。代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUnzip\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ezipFile\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edestDir\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ezipReader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ezip\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpenReader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ezipFile\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ezipReader\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edecodeName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ezipReader\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFile\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFlags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewReader\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003edecoder\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etransform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewReader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esimplifiedchinese\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGB18030\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewDecoder\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eioutil\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReadAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edecoder\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003edecodeName\u003c/span\u003e = string(\u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003edecodeName\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efpath\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efilepath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eJoin\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edestDir\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edecodeName\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFileInfo\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eIsDir\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMkdirAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efpath\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eModePerm\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMkdirAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilepath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDir\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efpath\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eModePerm\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003einFile\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpen\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einFile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eoutFile\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOpenFile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efpath\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eO_WRONLY\u003c/span\u003e|\u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eO_CREATE\u003c/span\u003e|\u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eO_TRUNC\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMode\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoutFile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCopy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eoutFile\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einFile\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/\"\u003ehttps://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://chai2010.cn/post/golang/go-zip-utf8/\"\u003ehttps://chai2010.cn/post/golang/go-zip-utf8/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codereview.appspot.com/54360043/\"\u003ehttps://codereview.appspot.com/54360043/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT\"\u003ehttps://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Go 处理 zip 解压乱码问题"},{"content":"缓存击穿 对于一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一 key 缓存，前者则是很多 key。\n缓存在某个时间点过期的时候，恰好在这个时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。\n我在 go-redis/cache 中发现了库使用了 singleflight , 经过查阅资料，了解了 这个库的主要作用就是将一组相同的请求合并成一个请求，实际上只会去请求一次，然后对所有的请求返回相同的结果。这样会大大降低数据库的压力。\nsingleflight 使用 函数签名 type Group struct { mu sync.Mutex // protects m m map[string]*call // lazily initialized } // Do 执行函数，对同一个 key 多次调用的时候，在第一次调用没有执行完的时候 // 只会执行一次 fn 其他的调用会阻塞住等待这次调用返回 // v, err 是传入的 fn 的返回值 // shared 表示是否真正执行了 fn 返回的结果，还是返回的共享的结果 func (g *Group) Do(key string, fn func() (interface{}, error)) (v interface{}, err error, shared bool) // DoChan 和 Do 类似，只是 DoChan 返回一个 channel，也就是同步与异步的区别 func (g *Group) DoChan(key string, fn func() (interface{}, error)) \u0026lt;-chan Result // Forget 用于通知 Group 删除某个 key 这样后面继续这个 key 的调用的时候就不会在阻塞等待了 func (g *Group) Forget(key string) 示例 接下来我们来讲解一个简单的例子，我们来看看 singleflight 的使用方式，先来看一个简单的例子：\n先使用一个普通的例子，这时一个获取 blog 文章详情的函数，我们在函数里面使用一个 count 模拟不同并发下的耗时的不同，并发越多请求耗时越多。\nfunc getBlogDetail(id int) (string, err error) { atomic.AddInt32(\u0026amp;count, 1) time.Sleep(time.Duration(count) * time.Millisecond) return fmt.Sprintf(\u0026#34;blog: %d\u0026#34;, id), nil } 我们使用 singleflight 的时候就只需要 new(singleflight.Group) 然后调用一下相对应的 Do 方法就可了，是不是很简单\nfunc singleflightGetArticle(sg *singleflight.Group, id int) (string, error) { v, err, _ := sg.Do(fmt.Sprintf(\u0026#34;%d\u0026#34;, id), func() (interface{}, error) { return getBlogDetail(id) }) return v.(string), err } 我们接下来来对比下 2 个函数的执行时间，先来看一个简单的例子：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/sync/singleflight\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; ) var count int32 func singleflightGetBlogArticle(sg *singleflight.Group, id int) (string, error) { v, err, _ := sg.Do(fmt.Sprintf(\u0026#34;%d\u0026#34;, id), func() (interface{}, error) { return getBlogDetail(id) }) return v.(string), err } func getBlogDetail(id int) (string, error) { atomic.AddInt32(\u0026amp;count, 1) time.Sleep(time.Duration(count) * time.Millisecond) return fmt.Sprintf(\u0026#34;blog: %d\u0026#34;, id), nil } func main() { time.AfterFunc(1*time.Second, func() { atomic.AddInt32(\u0026amp;count, -count) }) var ( wg sync.WaitGroup now = time.Now() n = 1000 sg = \u0026amp;singleflight.Group{} ) for i := 0; i \u0026lt; n; i++ { wg.Add(1) go func() { res, _ := singleflightGetBlogArticle(sg, 1) //res, _ := getBlogDetail(1) if res != \u0026#34;blog: 1\u0026#34; { panic(\u0026#34;err\u0026#34;) } wg.Done() }() } wg.Wait() fmt.Printf(\u0026#34;同时发起 %d 次请求，耗时: %s\u0026#34;, n, time.Since(now)) } 这是没有使用 singleflight 的情况下的耗时：\n同时发起 1000 次请求，耗时: 1.0221228s Process finished with the exit code 0 使用 singleflight 的情况下的耗时是：\n同时发起 1000 次请求，耗时: 21.9379ms Process finished with the exit code 0 可以看到使用了 singleflight 的耗时比未使用效果更好。\n其他 使用 singleflight 我们比较常见的是直接使用 Do 方法，但是这个极端情况下会导致整个程序 hang 住，如果我们的代码出点问题，有一个调用 hang 住了，那么会导致所有的请求都 hang 住\n参考 https://cs.opensource.google/go/x/sync/+/0de741cf:singleflight/singleflight.go;l=68;drc=0de741cfad7ff3874b219dfbc1b9195b58c7c490;bpv=0;bpt=1 https://github.com/go-redis/cache/blob/6382f515292d118aa7ceaf59599d665b3ebc8827/cache.go#L286 ","permalink":"https://jasminides.com/posts/singleflight-%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"缓存击穿\"\u003e缓存击穿\u003c/h2\u003e\n\u003cp\u003e对于一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一 key 缓存，前者则是很多 key。\u003c/p\u003e\n\u003cp\u003e缓存在某个时间点过期的时候，恰好在这个时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。\u003c/p\u003e\n\u003cp\u003e我在 go-redis/cache 中发现了库使用了 singleflight , 经过查阅资料，了解了 这个库的主要作用就是将一组相同的请求合并成一个请求，实际上只会去请求一次，然后对所有的请求返回相同的结果。这样会大大降低数据库的压力。\u003c/p\u003e\n\u003ch2 id=\"singleflight-使用\"\u003esingleflight 使用\u003c/h2\u003e\n\u003ch3 id=\"函数签名\"\u003e函数签名\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emu\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMutex\u003c/span\u003e       \u003cspan style=\"color:#75715e\"\u003e// protects m\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecall\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// lazily initialized\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Do 执行函数，对同一个 key 多次调用的时候，在第一次调用没有执行完的时候\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 只会执行一次 fn 其他的调用会阻塞住等待这次调用返回\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// v, err 是传入的 fn 的返回值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// shared 表示是否真正执行了 fn 返回的结果，还是返回的共享的结果\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)) (\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eshared\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DoChan 和 Do 类似，只是 DoChan 返回一个 channel，也就是同步与异步的区别\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eDoChan\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResult\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Forget 用于通知 Group 删除某个 key 这样后面继续这个 key 的调用的时候就不会在阻塞等待了\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eForget\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"示例\"\u003e示例\u003c/h3\u003e\n\u003cp\u003e接下来我们来讲解一个简单的例子，我们来看看 singleflight 的使用方式，先来看一个简单的例子：\u003c/p\u003e","title":"Singleflight 介绍"},{"content":"起因 最近有由于一个域名的 https 证书过期，导致某个网站出现大面积无法正常使用的故障。于是我打算使用 go 语言 来监控域名的 HTTPS 证书过期情况，来及时续期证书。\nHTTPS 证书 了解证书加密体系的应该知道，TLS 证书是链式信任的，所以中间任何一个证书过期、失效都会导致整个信任链断裂，不过单纯的 Let’s Encrypt ACME 证书检测可能只关注末端证书即可，除非哪天 Let’s Encrypt 倒下…\n解决 在 go 语言中，Go 在发送 HTTP 请求后，在响应体中会包含一个 TLS *tls.ConnectionState 结构体，该结构体中目前存放了服务端返回的整个证书链：\n// ConnectionState records basic TLS details about the connection. type ConnectionState struct { // Version is the TLS version used by the connection (e.g. VersionTLS12). Version uint16 // HandshakeComplete is true if the handshake has concluded. HandshakeComplete bool // DidResume is true if this connection was successfully resumed from a // previous session with a session ticket or similar mechanism. DidResume bool // CipherSuite is the cipher suite negotiated for the connection (e.g. // TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_AES_128_GCM_SHA256). CipherSuite uint16 // NegotiatedProtocol is the application protocol negotiated with ALPN. NegotiatedProtocol string // NegotiatedProtocolIsMutual used to indicate a mutual NPN negotiation. // // Deprecated: this value is always true. NegotiatedProtocolIsMutual bool // ServerName is the value of the Server Name Indication extension sent by // the client. It\u0026#39;s available both on the server and on the client side. ServerName string // PeerCertificates are the parsed certificates sent by the peer, in the // order in which they were sent. The first element is the leaf certificate // that the connection is verified against. // // On the client side, it can\u0026#39;t be empty. On the server side, it can be // empty if Config.ClientAuth is not RequireAnyClientCert or // RequireAndVerifyClientCert. PeerCertificates []*x509.Certificate // VerifiedChains is a list of one or more chains where the first element is // PeerCertificates[0] and the last element is from Config.RootCAs (on the // client side) or Config.ClientCAs (on the server side). // // On the client side, it\u0026#39;s set if Config.InsecureSkipVerify is false. On // the server side, it\u0026#39;s set if Config.ClientAuth is VerifyClientCertIfGiven // (and the peer provided a certificate) or RequireAndVerifyClientCert. VerifiedChains [][]*x509.Certificate // SignedCertificateTimestamps is a list of SCTs provided by the peer // through the TLS handshake for the leaf certificate, if any. SignedCertificateTimestamps [][]byte // OCSPResponse is a stapled Online Certificate Status Protocol (OCSP) // response provided by the peer for the leaf certificate, if any. OCSPResponse []byte // TLSUnique contains the \u0026#34;tls-unique\u0026#34; channel binding value (see RFC 5929, // Section 3). This value will be nil for TLS 1.3 connections and for all // resumed connections. // // Deprecated: there are conditions in which this value might not be unique // to a connection. See the Security Considerations sections of RFC 5705 and // RFC 7627, and https://mitls.org/pages/attacks/3SHAKE#channelbindings. TLSUnique []byte // ekm is a closure exposed via ExportKeyingMaterial. ekm func(label string, context []byte, length int) ([]byte, error) } 可以看到 PeerCertificates 包含了所有的证书，我们只只要遍历 PeerCertificates，根据 NotBefore, NotAfter 字段就能进行是否过期的判断\n// A Certificate represents an X.509 certificate. type Certificate struct { Raw []byte // Complete ASN.1 DER content (certificate, signature algorithm and signature). RawTBSCertificate []byte // Certificate part of raw ASN.1 DER content. RawSubjectPublicKeyInfo []byte // DER encoded SubjectPublicKeyInfo. RawSubject []byte // DER encoded Subject RawIssuer []byte // DER encoded Issuer Signature []byte SignatureAlgorithm SignatureAlgorithm PublicKeyAlgorithm PublicKeyAlgorithm PublicKey interface{} Version int SerialNumber *big.Int Issuer pkix.Name Subject pkix.Name NotBefore, NotAfter time.Time // Validity bounds. KeyUsage KeyUsage // Extensions contains raw X.509 extensions. When parsing certificates, // this can be used to extract non-critical extensions that are not // parsed by this package. When marshaling certificates, the Extensions // field is ignored, see ExtraExtensions. Extensions []pkix.Extension // ExtraExtensions contains extensions to be copied, raw, into any // marshaled certificates. Values override any extensions that would // otherwise be produced based on the other fields. The ExtraExtensions // field is not populated when parsing certificates, see Extensions. ExtraExtensions []pkix.Extension // UnhandledCriticalExtensions contains a list of extension IDs that // were not (fully) processed when parsing. Verify will fail if this // slice is non-empty, unless verification is delegated to an OS // library which understands all the critical extensions. // // Users can access these extensions using Extensions and can remove // elements from this slice if they believe that they have been // handled. UnhandledCriticalExtensions []asn1.ObjectIdentifier ExtKeyUsage []ExtKeyUsage // Sequence of extended key usages. UnknownExtKeyUsage []asn1.ObjectIdentifier // Encountered extended key usages unknown to this package. // BasicConstraintsValid indicates whether IsCA, MaxPathLen, // and MaxPathLenZero are valid. BasicConstraintsValid bool IsCA bool // MaxPathLen and MaxPathLenZero indicate the presence and // value of the BasicConstraints\u0026#39; \u0026#34;pathLenConstraint\u0026#34;. // // When parsing a certificate, a positive non-zero MaxPathLen // means that the field was specified, -1 means it was unset, // and MaxPathLenZero being true mean that the field was // explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false // should be treated equivalent to -1 (unset). // // When generating a certificate, an unset pathLenConstraint // can be requested with either MaxPathLen == -1 or using the // zero value for both MaxPathLen and MaxPathLenZero. MaxPathLen int // MaxPathLenZero indicates that BasicConstraintsValid==true // and MaxPathLen==0 should be interpreted as an actual // maximum path length of zero. Otherwise, that combination is // interpreted as MaxPathLen not being set. MaxPathLenZero bool SubjectKeyId []byte AuthorityKeyId []byte // RFC 5280, 4.2.2.1 (Authority Information Access) OCSPServer []string IssuingCertificateURL []string // Subject Alternate Name values. (Note that these values may not be valid // if invalid values were contained within a parsed certificate. For // example, an element of DNSNames may not be a valid DNS domain name.) DNSNames []string EmailAddresses []string IPAddresses []net.IP URIs []*url.URL // Name constraints PermittedDNSDomainsCritical bool // if true then the name constraints are marked critical. PermittedDNSDomains []string ExcludedDNSDomains []string PermittedIPRanges []*net.IPNet ExcludedIPRanges []*net.IPNet PermittedEmailAddresses []string ExcludedEmailAddresses []string PermittedURIDomains []string ExcludedURIDomains []string // CRL Distribution Points CRLDistributionPoints []string PolicyIdentifiers []asn1.ObjectIdentifier } 代码实现 根据前面的基础，我实现了每天定时遍历 url，判断证书是否过期，如果证书已经过期或者将要过期 (过期前 5 天)，将会通过 server 酱发生通知。\npackage main import ( \u0026#34;crypto/tls\u0026#34; \u0026#34;fmt\u0026#34; config \u0026#34;github.com/overstarrt/check_https/pkg/config\u0026#34; \u0026#34;github.com/overstarrt/check_https/pkg/send\u0026#34; \u0026#34;github.com/robfig/cron\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; ) var urls []string var SendKey string var sendMsg *send.Send func initSetting() { setting, err := config.NewSetting() if err != nil { panic(err) } err = setting.ReadSection(\u0026#34;urls\u0026#34;, \u0026amp;urls) err = setting.ReadSection(\u0026#34;send_key\u0026#34;, \u0026amp;SendKey) sendMsg = send.NewSend(SendKey) return } func main() { initSetting() c := cron.New() err := c.AddFunc(\u0026#34;45 0 * * * *\u0026#34;, func() { for _, url := range urls { err := checkSSL(url) if err != nil { log.Printf(\u0026#34;check %s https err : %v\u0026#34;, url, err) return } } }) if err != nil { log.Println(err) return } c.Start() t1 := time.NewTimer(time.Second * 10) for { select { case \u0026lt;-t1.C: t1.Reset(time.Second * 10) } } } func checkSSL(url string) error { client := \u0026amp;http.Client{ Transport: \u0026amp;http.Transport{ // 注意如果证书已过期，那么只有在关闭证书校验的情况下链接才能建立成功 TLSClientConfig: \u0026amp;tls.Config{InsecureSkipVerify: true}, }, Timeout: 10 * time.Second, } resp, err := client.Get(url) if err != nil { return err } defer func() { _ = resp.Body.Close() }() for _, cert := range resp.TLS.PeerCertificates { if !cert.NotAfter.After(time.Now()) { msg := fmt.Sprintf(\u0026#34;Website [%s] certificate has expired: %s\u0026#34;, url, cert.NotAfter.Local().Format(\u0026#34;2006-01-02 15:04:05\u0026#34;)) err := sendMsg.SendMsg(\u0026#34;has expired\u0026#34;, msg) if err != nil { log.Println(err) return err } log.Println(msg) return nil } if cert.NotAfter.Sub(time.Now()) \u0026lt; 5*24*time.Hour { msg := fmt.Sprintf(\u0026#34;Website [%s] certificate will expire, remaining time: %fh\u0026#34;, url, cert.NotAfter.Sub(time.Now()).Hours()) err := sendMsg.SendMsg(\u0026#34;will expire\u0026#34;, msg) if err != nil { log.Println(err) return err } log.Println(msg) return nil } } log.Printf(\u0026#34;the %s https no expired\\n\u0026#34;, url) return nil } 小结 本文讲述如何通过 go 对域名的证书进行过期校验，并实现了定时校验并发生通知。\n参考 https://github.com/overstarry/check_https ","permalink":"https://jasminides.com/posts/go-%E5%AE%9A%E6%97%B6%E7%9B%91%E6%8E%A7-https-%E8%AF%81%E4%B9%A6/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近有由于一个域名的 https 证书过期，导致某个网站出现大面积无法正常使用的故障。于是我打算使用 go 语言 来监控域名的 HTTPS 证书过期情况，来及时续期证书。\u003c/p\u003e\n\u003ch2 id=\"https-证书\"\u003eHTTPS 证书\u003c/h2\u003e\n\u003cp\u003e了解证书加密体系的应该知道，TLS 证书是链式信任的，所以中间任何一个证书过期、失效都会导致整个信任链断裂，不过单纯的 Let’s Encrypt ACME 证书检测可能只关注末端证书即可，除非哪天 Let’s Encrypt 倒下…\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e在 go 语言中，Go 在发送 HTTP 请求后，在响应体中会包含一个 TLS *tls.ConnectionState 结构体，该结构体中目前存放了服务端返回的整个证书链：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ConnectionState records basic TLS details about the connection.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eConnectionState\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Version is the TLS version used by the connection (e.g. VersionTLS12).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eVersion\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint16\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// HandshakeComplete is true if the handshake has concluded.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eHandshakeComplete\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// DidResume is true if this connection was successfully resumed from a\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// previous session with a session ticket or similar mechanism.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eDidResume\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// CipherSuite is the cipher suite negotiated for the connection (e.g.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_AES_128_GCM_SHA256).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eCipherSuite\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint16\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// NegotiatedProtocol is the application protocol negotiated with ALPN.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eNegotiatedProtocol\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// NegotiatedProtocolIsMutual used to indicate a mutual NPN negotiation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t// Deprecated: this value is always true.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eNegotiatedProtocolIsMutual\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// ServerName is the value of the Server Name Indication extension sent by\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// the client. It\u0026#39;s available both on the server and on the client side.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eServerName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// PeerCertificates are the parsed certificates sent by the peer, in the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// order in which they were sent. The first element is the leaf certificate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// that the connection is verified against.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t// On the client side, it can\u0026#39;t be empty. On the server side, it can be\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// empty if Config.ClientAuth is not RequireAnyClientCert or\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// RequireAndVerifyClientCert.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ePeerCertificates\u003c/span\u003e []\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex509\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCertificate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// VerifiedChains is a list of one or more chains where the first element is\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// PeerCertificates[0] and the last element is from Config.RootCAs (on the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// client side) or Config.ClientCAs (on the server side).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t// On the client side, it\u0026#39;s set if Config.InsecureSkipVerify is false. On\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// the server side, it\u0026#39;s set if Config.ClientAuth is VerifyClientCertIfGiven\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// (and the peer provided a certificate) or RequireAndVerifyClientCert.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eVerifiedChains\u003c/span\u003e [][]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex509\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCertificate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// SignedCertificateTimestamps is a list of SCTs provided by the peer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// through the TLS handshake for the leaf certificate, if any.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eSignedCertificateTimestamps\u003c/span\u003e [][]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// OCSPResponse is a stapled Online Certificate Status Protocol (OCSP)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// response provided by the peer for the leaf certificate, if any.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eOCSPResponse\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// TLSUnique contains the \u0026#34;tls-unique\u0026#34; channel binding value (see RFC 5929,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Section 3). This value will be nil for TLS 1.3 connections and for all\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// resumed connections.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t// Deprecated: there are conditions in which this value might not be unique\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// to a connection. See the Security Considerations sections of RFC 5705 and\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// RFC 7627, and https://mitls.org/pages/attacks/3SHAKE#channelbindings.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eTLSUnique\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// ekm is a closure exposed via ExportKeyingMaterial.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eekm\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elabel\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到 PeerCertificates  包含了所有的证书，我们只只要遍历 PeerCertificates，根据 \tNotBefore, NotAfter 字段就能进行是否过期的判断\u003c/p\u003e","title":"Go 定时监控 Https 证书"},{"content":"在 go 语言中我们可以使用 sync.Once 对象来实现函数方法只执行一次的功能。\n简单代码示例 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var ( o sync.Once wg sync.WaitGroup ) for i := 0; i \u0026lt; 10; i++ { wg.Add(1) go func(i int) { defer wg.Done() o.Do(func() { fmt.Printf(\u0026#34;hello %d\\n\u0026#34;, i) }) }(i) } wg.Wait() } 输出：\nhello 9 不使用 Sync.Once 的结果如下：\nhello 9 hello 4 hello 0 hello 1 hello 2 hello 3 hello 6 hello 5 hello 7 hello 8 可以看到，在使用 sync.Once 的情况下，只执行一次函数。\n解析 通过查看源码，可以看到 Sync.Once 的源码十分简单。只有一个结构体和 2 个方法。\ntype Once struct { done uint32 m Mutex } done 成员用来判断函数是否执行过。\nfunc (o *Once) Do(f func()) { // Note: Here is an incorrect implementation of Do: // //\tif atomic.CompareAndSwapUint32(\u0026amp;o.done, 0, 1) { //\tf() //\t} // // Do guarantees that when it returns, f has finished. // This implementation would not implement that guarantee: // given two simultaneous calls, the winner of the cas would // call f, and the second would return immediately, without // waiting for the first\u0026#39;s call to f to complete. // This is why the slow path falls back to a mutex, and why // the atomic.StoreUint32 must be delayed until after f returns. if atomic.LoadUint32(\u0026amp;o.done) == 0 { // Outlined slow-path to allow inlining of the fast-path. o.doSlow(f) } } Do 方法的实现是这样的，检查 done 成员，如果为 0，则执行 f 函数。\n接下来看看 doSlow 方法，它是一个锁的实现，它的实现如下：\nfunc (o *Once) doSlow(f func()) { o.m.Lock() defer o.m.Unlock() if o.done == 0 { defer atomic.StoreUint32(\u0026amp;o.done, 1) f() } } doSlow 会执行函数 f，并且在执行完 f 后将 done 成员设置为 1。在 doSlow 当中使用了互斥锁来保证只会执行一次\n小结 Once 保证了传入的函数只会执行一次，这常用在这些场景下：单例模式，配置文件加载，初始化。\nOnce 是不能复用的，只要执行过一个函数，其他函数就不能再次执行。\n参考 https://cs.opensource.google/go/go/+/refs/tags/go1.18.3:src/sync/once.go;l=14 ","permalink":"https://jasminides.com/posts/go-%E5%B9%B6%E5%8F%91-sync.once-%E8%A7%A3%E6%9E%90/","summary":"\u003cp\u003e在 go 语言中我们可以使用 sync.Once 对象来实现函数方法只执行一次的功能。\u003c/p\u003e\n\u003ch2 id=\"简单代码示例\"\u003e简单代码示例\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOnce\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello %d\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 9\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不使用 Sync.Once 的结果如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehello 8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到，在使用 sync.Once 的情况下，只执行一次函数。\u003c/p\u003e","title":"Go 并发 Sync.Once 解析"},{"content":"前言 最近遇到一个需求，需要截取视频的某一帧图片作为视频封面。我搜寻了相关资料，在 go 语言端常见的有两种做法，1）使用 opencv 的 go 绑定库，2）使用 ffmpeg 的 go 绑定库。\n这里我打算使用第二种方法，使用 ffmpeg 的 go 绑定库。\nffmpeg 介绍 FFmpeg 是一个开源免费跨平台的视频和音频流方案，属于自由软件，采用 LGPL 或 GPL 许可证（依据你选择的组件）。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库 libavcodec，为了保证高可移植性和编解码质量，libavcodec 里很多 codec 都是从头开发的。\nFFmpeg 在 Linux 平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括 Windows、Mac OS X 等。\nFFmpeg 项目由以下几部分组成:\nFFMpeg 视频文件转换命令行工具，也支持经过实时电视卡抓取和编码成视频文件。\nFFServer 基于 HTTP(RTSP 正在开发中) 用于实时广播的多媒体服务器，也支持时间平移.\nFFplay 用 SDL 和 FFmpeg 库开发的一个简单的媒体播放器.\nlibavcodec 一个包含了所有 FFmpeg 音视频编解码器的库。为了保证最优性能和高可复用性，大多数编解码器从头开发的.\nlibavformat 一个包含了所有的普通音视格式的解析器和产生器的库\n解决 1 安装 ffmpeg\n浏览器访问 https://ffbinaries.com/downloads 根据你的系统安装 ffmpeg\n2 安装 ffmpeg 的 go 绑定库\n这里我使用了 github.com/u2takey/ffmpeg-go 这个项目，它是一个绑定库，可以在 go 语言端使用 ffmpeg 命令行工具。\n3 编写代码\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/disintegration/imaging\u0026#34; ffmpeg \u0026#34;github.com/u2takey/ffmpeg-go\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) func GetSnapshot(videoPath, snapshotPath string, frameNum int) (snapshotName string, err error) { buf := bytes.NewBuffer(nil) err = ffmpeg.Input(videoPath). Filter(\u0026#34;select\u0026#34;, ffmpeg.Args{fmt.Sprintf(\u0026#34;gte(n,%d)\u0026#34;, frameNum)}). Output(\u0026#34;pipe:\u0026#34;, ffmpeg.KwArgs{\u0026#34;vframes\u0026#34;: 1, \u0026#34;format\u0026#34;: \u0026#34;image2\u0026#34;, \u0026#34;vcodec\u0026#34;: \u0026#34;mjpeg\u0026#34;}). WithOutput(buf, os.Stdout). Run() if err != nil { log.Fatal(\u0026#34;生成缩略图失败：\u0026#34;, err) return \u0026#34;\u0026#34;, err } img, err := imaging.Decode(buf) if err != nil { log.Fatal(\u0026#34;生成缩略图失败：\u0026#34;, err) return \u0026#34;\u0026#34;, err } err = imaging.Save(img, snapshotPath+\u0026#34;.png\u0026#34;) if err != nil { log.Fatal(\u0026#34;生成缩略图失败：\u0026#34;, err) return \u0026#34;\u0026#34;, err } names := strings.Split(snapshotPath, \u0026#34;\\\\\u0026#34;) snapshotName = names[len(names)-1] + \u0026#34;.png\u0026#34; return } func main() { _, err := GetSnapshot(\u0026#34;./test.mp4\u0026#34;, \u0026#34;test\u0026#34;, 1) if err != nil { return } } 函数里 ffmpeg 相关的代码主要是提取视频的某一帧以 mjpeg 编码为图片，然后保存到本地。\n小结 本文主要是讲述使用 ffmpeg 处理视频生成某一帧的图片。\n参考 https://ffmpeg.org/ffmpeg-filters.html ","permalink":"https://jasminides.com/posts/go-%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E6%9F%90%E4%B8%80%E5%B8%A7%E5%9B%BE%E7%89%87/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近遇到一个需求，需要截取视频的某一帧图片作为视频封面。我搜寻了相关资料，在 go 语言端常见的有两种做法，1）使用 opencv 的 go 绑定库，2）使用 ffmpeg 的 go 绑定库。\u003c/p\u003e\n\u003cp\u003e这里我打算使用第二种方法，使用 ffmpeg 的 go 绑定库。\u003c/p\u003e\n\u003ch3 id=\"ffmpeg-介绍\"\u003effmpeg 介绍\u003c/h3\u003e\n\u003cp\u003eFFmpeg 是一个开源免费跨平台的视频和音频流方案，属于自由软件，采用 LGPL 或 GPL 许可证（依据你选择的组件）。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库 libavcodec，为了保证高可移植性和编解码质量，libavcodec 里很多 codec 都是从头开发的。\u003c/p\u003e\n\u003cp\u003eFFmpeg 在 Linux 平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括 Windows、Mac OS X 等。\u003c/p\u003e\n\u003cp\u003eFFmpeg 项目由以下几部分组成:\u003c/p\u003e\n\u003cp\u003eFFMpeg 视频文件转换命令行工具，也支持经过实时电视卡抓取和编码成视频文件。\u003c/p\u003e\n\u003cp\u003eFFServer 基于 HTTP(RTSP 正在开发中) 用于实时广播的多媒体服务器，也支持时间平移.\u003c/p\u003e\n\u003cp\u003eFFplay 用 SDL 和 FFmpeg 库开发的一个简单的媒体播放器.\u003c/p\u003e\n\u003cp\u003elibavcodec  一个包含了所有 FFmpeg 音视频编解码器的库。为了保证最优性能和高可复用性，大多数编解码器从头开发的.\u003c/p\u003e\n\u003cp\u003elibavformat  一个包含了所有的普通音视格式的解析器和产生器的库\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e1 安装 ffmpeg\u003c/p\u003e\n\u003cp\u003e浏览器访问 \u003ca href=\"https://ffbinaries.com/downloads\"\u003ehttps://ffbinaries.com/downloads\u003c/a\u003e 根据你的系统安装 ffmpeg\u003c/p\u003e\n\u003cp\u003e2 安装 ffmpeg 的 go 绑定库\u003c/p\u003e","title":"Go 截取视频某一帧图片"},{"content":"我们知道在 go 语言中很容易开启携程进行并发任务，但是如何处理并发过程中的错误是非常棘手的，接下来我就来介绍 errgroup 的用法。\nerrgroup errgroup 包里主要是一个结构体和相应的方法，它可以让你在并发任务中处理错误。\ntype Group struct { // context 的 cancel 方法 cancel func() // 复用 WaitGroup wg sync.WaitGroup sem chan token // 用来保证只会接受一次错误 errOnce sync.Once // 保存第一个返回的错误 err error } func WithContext(ctx context.Context) (*Group, context.Context) func (g *Group) done() func (g *Group) Wait() error func (g *Group) Go(f func() error) func (g *Group) TryGo(f func() error) bool func (g *Group) SetLimit(n int) 通过 WithContext 可以创建一个可以取消的 Group，当然除此之外也可以零值的 Group 也可以直接使用，但是出错之后就不会取消其他的 goroutine 了。Go 方法 传入一个函数参数，会启动一个 goroutine 处理。\nWait 类似 WaitGroup 的 Wait 方法，等待所有的 goroutine 结束后退出，返回的错误是一个出错的 err。\nTryGo 是和 SetLimit 配套的，只有当 group 中的 goroutines 数量小于配置的数量时，才会在 goroutine 中调用函数。TryGo 用来判断 goroutine 是否启动。\n例子 接下来看一个官方使用 errgroup 的例子。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;golang.org/x/sync/errgroup\u0026#34; ) func main() { g := new(errgroup.Group) var urls = []string{ \u0026#34;http://www.golang.org/\u0026#34;, \u0026#34;http://www.somestupidname.com/\u0026#34;, \u0026#34;htt://www.yixieqitawangzhi.com\u0026#34;, } for _, url := range urls { // Launch a goroutine to fetch the URL. url := url // https://golang.org/doc/faq#closures_and_goroutines g.Go(func() error { // Fetch the URL. resp, err := http.Get(url) if err == nil { log.Printf(\u0026#34;%s: %s\u0026#34;, url, resp.Status) resp.Body.Close() } return err }) } // Wait for all HTTP fetches to complete. if err := g.Wait(); err != nil { fmt.Println(err) return } fmt.Println(\u0026#34;Successfully fetched all URLs.\u0026#34;) } 这个例子很简单，就是当我们并发处理某个任务时，errgroup 会保存发生的第一个 error，当所有的 goroutine 都结束后，会返回这个 error。\n参考 https://cs.opensource.google/go/x/sync/+/master:errgroup/errgroup.go ","permalink":"https://jasminides.com/posts/go-errgroup/","summary":"\u003cp\u003e我们知道在 go 语言中很容易开启携程进行并发任务，但是如何处理并发过程中的错误是非常棘手的，接下来我就来介绍 \u003ccode\u003eerrgroup\u003c/code\u003e 的用法。\u003c/p\u003e\n\u003ch2 id=\"errgroup\"\u003eerrgroup\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eerrgroup\u003c/code\u003e 包里主要是一个结构体和相应的方法，它可以让你在并发任务中处理错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// context 的 cancel 方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 复用 WaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esem\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoken\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 用来保证只会接受一次错误\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerrOnce\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOnce\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 保存第一个返回的错误\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWithContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eTryGo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eGroup\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSetLimit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过 WithContext 可以创建一个可以取消的 Group，当然除此之外也可以零值的 Group 也可以直接使用，但是出错之后就不会取消其他的 goroutine 了。Go 方法 传入一个函数参数，会启动一个 goroutine 处理。\u003c/p\u003e\n\u003cp\u003eWait  类似 WaitGroup 的 Wait 方法，等待所有的 goroutine 结束后退出，返回的错误是一个出错的 err。\u003c/p\u003e\n\u003cp\u003eTryGo 是和 SetLimit 配套的，只有当 group 中的 goroutines 数量小于配置的数量时，才会在 goroutine 中调用函数。TryGo 用来判断 goroutine 是否启动。\u003c/p\u003e","title":"Go errgroup"},{"content":"起因 最近一个部署了 go 应用的服务器出现了 OOM 的现象，内存占用过高。\n原因 通过 Pyroscope 分析得出是因为 Minio 的 go sdk 中的 PutObject 函数占用了大量的内存。Pyroscope 是什么，前面的文章已经介绍过了，这里就不过多介绍了。\n接下来我们通过查看相关的源码来查看是什么原因。\n// PutObject creates an object in a bucket. // // You must have WRITE permissions on a bucket to create an object. // // - For size smaller than 16MiB PutObject automatically does a // single atomic PUT operation. // // - For size larger than 16MiB PutObject automatically does a // multipart upload operation. // // - For size input as -1 PutObject does a multipart Put operation // until input stream reaches EOF. Maximum object size that can // be uploaded through this operation will be 5TiB. // // WARNING: Passing down \u0026#39;-1\u0026#39; will use memory and these cannot // be reused for best outcomes for PutObject(), pass the size always. // // NOTE: Upon errors during upload multipart operation is entirely aborted. func (c *Client) PutObject(ctx context.Context, bucketName, objectName string, reader io.Reader, objectSize int64, opts PutObjectOptions, ) (info UploadInfo, err error) { if objectSize \u0026lt; 0 \u0026amp;\u0026amp; opts.DisableMultipart { return UploadInfo{}, errors.New(\u0026#34;object size must be provided with disable multipart upload\u0026#34;) } err = opts.validate() if err != nil { return UploadInfo{}, err } return c.putObjectCommon(ctx, bucketName, objectName, reader, objectSize, opts) } 从方法的注释可以看出，当传递的大小为 -1 时，会进行多次 put 操作，直到输入流结束。多次 put 操作的最大大小为 5TiB，并且不能重用内存，导致占用大量内存。\n接下来继续深入，我们看看这个函数的源码。\nfunc OptimalPartInfo(objectSize int64, configuredPartSize uint64) (totalPartsCount int, partSize int64, lastPartSize int64, err error) { // object size is \u0026#39;-1\u0026#39; set it to 5TiB. var unknownSize bool if objectSize == -1 { unknownSize = true objectSize = maxMultipartPutObjectSize } // object size is larger than supported maximum. if objectSize \u0026gt; maxMultipartPutObjectSize { err = errEntityTooLarge(objectSize, maxMultipartPutObjectSize, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;) return } var partSizeFlt float64 if configuredPartSize \u0026gt; 0 { if int64(configuredPartSize) \u0026gt; objectSize { err = errEntityTooLarge(int64(configuredPartSize), objectSize, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;) return } if !unknownSize { if objectSize \u0026gt; (int64(configuredPartSize) * maxPartsCount) { err = errInvalidArgument(\u0026#34;Part size * max_parts(10000) is lesser than input objectSize.\u0026#34;) return } } if configuredPartSize \u0026lt; absMinPartSize { err = errInvalidArgument(\u0026#34;Input part size is smaller than allowed minimum of 5MiB.\u0026#34;) return } if configuredPartSize \u0026gt; maxPartSize { err = errInvalidArgument(\u0026#34;Input part size is bigger than allowed maximum of 5GiB.\u0026#34;) return } partSizeFlt = float64(configuredPartSize) if unknownSize { // If input has unknown size and part size is configured // keep it to maximum allowed as per 10000 parts. objectSize = int64(configuredPartSize) * maxPartsCount } } else { configuredPartSize = minPartSize // Use floats for part size for all calculations to avoid // overflows during float64 to int64 conversions. partSizeFlt = float64(objectSize / maxPartsCount) partSizeFlt = math.Ceil(partSizeFlt/float64(configuredPartSize)) * float64(configuredPartSize) } // Total parts count. totalPartsCount = int(math.Ceil(float64(objectSize) / partSizeFlt)) // Part size. partSize = int64(partSizeFlt) // Last part size. lastPartSize = objectSize - int64(totalPartsCount-1)*partSize return totalPartsCount, partSize, lastPartSize, nil } 从函数中可以看出，这个函数的作用是计算出最佳的分片大小，并且计算出总的分片数量。当大小为 -1 时，会使用最大的 5TiB。可以看出当没有指定对象大小时，每次会使用较大的内存。\n小结 在我们使用 MinIO sdk 时，在使用 PutObject 方法时，最好指定要上传的对象的大小，避免造成内存资源的浪费。\n","permalink":"https://jasminides.com/posts/%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E5%8D%87%E9%AB%98%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e最近一个部署了 go 应用的服务器出现了 OOM 的现象，内存占用过高。\u003c/p\u003e\n\u003ch2 id=\"原因\"\u003e原因\u003c/h2\u003e\n\u003cp\u003e通过 Pyroscope 分析得出是因为 Minio 的 go sdk 中的 PutObject 函数占用了大量的内存。Pyroscope 是什么，前面的文章已经介绍过了，这里就不过多介绍了。\u003c/p\u003e\n\u003cp\u003e接下来我们通过查看相关的源码来查看是什么原因。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// PutObject creates an object in a bucket.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// You must have WRITE permissions on a bucket to create an object.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  - For size smaller than 16MiB PutObject automatically does a\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    single atomic PUT operation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  - For size larger than 16MiB PutObject automatically does a\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    multipart upload operation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  - For size input as -1 PutObject does a multipart Put operation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    until input stream reaches EOF. Maximum object size that can\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    be uploaded through this operation will be 5TiB.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    WARNING: Passing down \u0026#39;-1\u0026#39; will use memory and these cannot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//    be reused for best outcomes for PutObject(), pass the size always.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// NOTE: Upon errors during upload multipart operation is entirely aborted.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ePutObject\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebucketName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eobjectName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereader\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eobjectSize\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eopts\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePutObjectOptions\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e) (\u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUploadInfo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eobjectSize\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopts\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDisableMultipart\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUploadInfo\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;object size must be provided with disable multipart upload\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eopts\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalidate\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUploadInfo\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eputObjectCommon\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebucketName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eobjectName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eobjectSize\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eopts\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从方法的注释可以看出，当传递的大小为 -1 时，会进行多次 put 操作，直到输入流结束。多次 put 操作的最大大小为 5TiB，并且不能重用内存，导致占用大量内存。\u003c/p\u003e","title":"应用内存升高原因排查"},{"content":"介绍 OpenWrite 是一款便捷的多平台博客发布工具，可以在 OpenWrite 编写 markdown 文档，然后发布到其他博客平台，目前已经支持 CSDN、SegmentFault、掘金、博客园、简书等知名平台。\n使用 注册 进入 http://admin.openwrite.cn/, 注册并登陆账号。\n安装浏览器插件 第一步需要安装浏览器插件，根据这个链接教程安装，只有安装了插件，才能配置分发的平台。根据对插件的源码的分析，插件是通过 cookie、storage 等浏览器数据进行认证登陆的。此插件还包括模拟写作和 mackdown 编辑器。\n认证配置渠道 安装完插件后，点击渠道管理，可以看到可配置的平台，支持多个平台。相应的平台如果没有登陆则显示未登陆，这时需要你登陆相应的平台。登陆平台后，点击认证，即可配置渠道。\n这里以掘金为例，认证成功后，可以进行相应的配置，配置文章分类和标题。\n发布文章 点击文章管理界面，添加文章，添加文章后，可以选择配置的平台，并发布到相应的平台。\n普通用户一个月只有 10 次机会，一个平台占用一次机会。\n","permalink":"https://jasminides.com/posts/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%B7%A5%E5%85%B7-openwrite-%E4%BD%BF%E7%94%A8/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eOpenWrite 是一款便捷的多平台博客发布工具，可以在 OpenWrite 编写 markdown 文档，然后发布到其他博客平台，目前已经支持 CSDN、SegmentFault、掘金、博客园、简书等知名平台。\u003c/p\u003e\n\u003ch2 id=\"使用\"\u003e使用\u003c/h2\u003e\n\u003ch3 id=\"注册\"\u003e注册\u003c/h3\u003e\n\u003cp\u003e进入 \u003ca href=\"http://admin.openwrite.cn/\"\u003ehttp://admin.openwrite.cn/\u003c/a\u003e, 注册并登陆账号。\u003c/p\u003e\n\u003ch3 id=\"安装浏览器插件\"\u003e安装浏览器插件\u003c/h3\u003e\n\u003cp\u003e第一步需要安装浏览器插件，根据这个\u003ca href=\"https://openwrite.cn/guide/postpublish/chrome-plugin.html\"\u003e链接\u003c/a\u003e教程安装，只有安装了插件，才能配置分发的平台。根据对插件的源码的分析，插件是通过 cookie、storage 等浏览器数据进行认证登陆的。此插件还包括模拟写作和 mackdown 编辑器。\u003c/p\u003e\n\u003ch3 id=\"认证配置渠道\"\u003e认证配置渠道\u003c/h3\u003e\n\u003cp\u003e安装完插件后，点击渠道管理，可以看到可配置的平台，支持多个平台。相应的平台如果没有登陆则显示未登陆，这时需要你登陆相应的平台。登陆平台后，点击认证，即可配置渠道。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/openwrite/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e这里以掘金为例，认证成功后，可以进行相应的配置，配置文章分类和标题。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/openwrite/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"发布文章\"\u003e发布文章\u003c/h3\u003e\n\u003cp\u003e点击文章管理界面，添加文章，添加文章后，可以选择配置的平台，并发布到相应的平台。\u003c/p\u003e\n\u003cp\u003e普通用户一个月只有 10 次机会，一个平台占用一次机会。\u003c/p\u003e","title":"多平台博客发布工具 openwrite 使用"},{"content":"上文讲了 Buf lint 命令的基础方法，本文将介绍 Buf lint 命令的一些常用配置。\n如果你的项目中没有 buf.yaml 配置文件，Buf lint 会提供一个默认的配置文件，默认内容如下：\nversion: v1 lint: use: - DEFAULT except: - FILE_LOWER_SNAKE_CASE ignore: - bat - ban/ban.proto ignore_only: ENUM_PASCAL_CASE: - foo/foo.proto - bar BASIC: - foo enum_zero_value_suffix: _UNSPECIFIED rpc_allow_same_request_response: false rpc_allow_google_protobuf_empty_requests: false rpc_allow_google_protobuf_empty_responses: false service_suffix: Service allow_comment_ignores: true 配置选项 接下来开始介绍 Buf lint 命令的配置选项。\nuse use 选项配置 lint 的类别，不同类别有相应的规则，有多种类别：DEFAULT、FILE_LOWER_SNAKE_CASE、BASIC 等。默认是 DEFAULT 类别。\nexcept except 选项配置 lint 不使用的类别。\n下面的配置，显示使用 DEFAULT 类别，但是不使用 ENUM_NO_ALLOW_ALIAS ,BASIC 类别中的规则。\nversion: v1 lint: use: - DEFAULT except: - ENUM_NO_ALLOW_ALIAS - BASIC ignore ignore 选项指定忽略的文件，可以是文件名，也可以是目录，注意路径是要相对于 buf.yaml 文件的。\nignore_only ignore_only 与 ignore 选项类似，但是只有指定的类别才忽略。\nversion: v1 lint: ignore_only: ENUM_PASCAL_CASE: - foo/foo.proto - bar BASIC: - foo allow_comment_ignores allow_comment_ignores 的作用是在 proto 文件中通过注释忽略 lint.\nservice_suffix 默认情况下 lint 都会检测 service 是否以 Service 结尾，如果不想要这个规则，可以配置 service_suffix 选项以显示规定后缀。\n","permalink":"https://jasminides.com/posts/buf-%E5%88%9D%E5%85%A5%E9%97%A8-2/","summary":"\u003cp\u003e上文讲了 Buf lint 命令的基础方法，本文将介绍 Buf lint 命令的一些常用配置。\u003c/p\u003e\n\u003cp\u003e如果你的项目中没有 buf.yaml 配置文件，Buf lint 会提供一个默认的配置文件，默认内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003elint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eDEFAULT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eexcept\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eFILE_LOWER_SNAKE_CASE\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eignore\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003ebat\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eban/ban.proto\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eignore_only\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eENUM_PASCAL_CASE\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003efoo/foo.proto\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003ebar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eBASIC\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eenum_zero_value_suffix\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e_UNSPECIFIED\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003erpc_allow_same_request_response\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003erpc_allow_google_protobuf_empty_requests\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003erpc_allow_google_protobuf_empty_responses\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eservice_suffix\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eService\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eallow_comment_ignores\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"配置选项\"\u003e配置选项\u003c/h2\u003e\n\u003cp\u003e接下来开始介绍 Buf lint 命令的配置选项。\u003c/p\u003e\n\u003ch3 id=\"use\"\u003euse\u003c/h3\u003e\n\u003cp\u003euse 选项配置 lint 的类别，不同类别有相应的规则，有多种类别：DEFAULT、FILE_LOWER_SNAKE_CASE、BASIC 等。默认是 DEFAULT 类别。\u003c/p\u003e\n\u003ch3 id=\"except\"\u003eexcept\u003c/h3\u003e\n\u003cp\u003eexcept 选项配置 lint 不使用的类别。\u003c/p\u003e\n\u003cp\u003e下面的配置，显示使用 DEFAULT 类别，但是不使用 ENUM_NO_ALLOW_ALIAS ,BASIC 类别中的规则。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003elint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eDEFAULT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eexcept\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eENUM_NO_ALLOW_ALIAS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eBASIC\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ignore\"\u003eignore\u003c/h3\u003e\n\u003cp\u003eignore 选项指定忽略的文件，可以是文件名，也可以是目录，注意路径是要相对于 buf.yaml 文件的。\u003c/p\u003e","title":"Buf 初入门 2"},{"content":"Buf 的目标是将 API 开发转向模式驱动的范式，从而为未来铺平道路，使 API 以服务所有者和客户可以依赖的方式定义。\n与简单地暴露 REST/JSON 服务相比，使用 IDL 来定义 API 有很多好处，今天，Protobuf 是业界最稳定、最广泛采用的 IDL。但就目前的情况来看，使用 Protobuf 比使用 JSON 作为数据传输格式要困难得多。\nBuf 正在建立工具，使 Protobuf 对服务所有者和客户来说是可靠和友好的，同时保持它在技术上的明显优势。您的组织不需要重新发明轮子来高效地创建、维护和使用 Protobuf API。我们将为您处理您的 Protobuf 管理策略，因此您可以专注于重要的事情。\n本篇文章是讲述 buf 使用的第一篇文章，主要讲解使用 buf 定义 proto 文件的 lint 规则。统一的 lint 规则，可以让个人或团队定义的 API 保持一致。\nlint 1 创建 buf.yaml 文件 使用 buf mod init 命令创建 buf.yaml 文件。\nversion: v1 breaking: use: - FILE lint: use: - DEFAULT 使用默认 lint 规则。\n2 运行 lint 命令\n使用 buf lint 命令运行 lint。\nbuf lint 命令将进行一下操作：\nbuf.yaml 根据您的配置发现所有 Protobuf 文件。 将它们复制到内存中。 编译它们 根据配置的 lint 规则运行编译结果。 3 输出结果\n这是我的一个实例文件输出的结果：\napi\\helloworld\\v1\\greeter.proto:5:8:google/api/annotations.proto: does not exist third_party\\google\\api\\annotations.proto:19:8:google/api/http.proto: does not exist third_party\\google\\protobuf\\descriptor.proto:57:1:duplicate symbol google.protobuf.FileDescriptorSet: already defined as message in \u0026#34;google/protobuf/des criptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:58:3:duplicate symbol google.protobuf.FileDescriptorSet.file: already defined as field in \u0026#34;google/protobuf/ descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:62:1:duplicate symbol google.protobuf.FileDescriptorProto: already defined as message in \u0026#34;google/protobuf/d escriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:63:3:duplicate symbol google.protobuf.FileDescriptorProto.name: already defined as field in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:64:3:duplicate symbol google.protobuf.FileDescriptorProto.package: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:67:3:duplicate symbol google.protobuf.FileDescriptorProto.dependency: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:69:3:duplicate symbol google.protobuf.FileDescriptorProto.public_dependency: already defined as field in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:72:3:duplicate symbol google.protobuf.FileDescriptorProto.weak_dependency: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:75:3:duplicate symbol google.protobuf.FileDescriptorProto.message_type: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:76:3:duplicate symbol google.protobuf.FileDescriptorProto.enum_type: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:77:3:duplicate symbol google.protobuf.FileDescriptorProto.service: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:78:3:duplicate symbol google.protobuf.FileDescriptorProto.extension: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:80:3:duplicate symbol google.protobuf.FileDescriptorProto.options: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:86:3:duplicate symbol google.protobuf.FileDescriptorProto.source_code_info: already defined as field in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:90:3:duplicate symbol google.protobuf.FileDescriptorProto.syntax: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:94:1:duplicate symbol google.protobuf.DescriptorProto: already defined as message in \u0026#34;google/protobuf/descr iptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:95:3:duplicate symbol google.protobuf.DescriptorProto.name: already defined as field in \u0026#34;google/protobuf/de scriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:97:3:duplicate symbol google.protobuf.DescriptorProto.field: already defined as field in \u0026#34;google/protobuf/d escriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:98:3:duplicate symbol google.protobuf.DescriptorProto.extension: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:100:3:duplicate symbol google.protobuf.DescriptorProto.nested_type: already defined as field in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:101:3:duplicate symbol google.protobuf.DescriptorProto.enum_type: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:103:3:duplicate symbol google.protobuf.DescriptorProto.ExtensionRange: already defined as message in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:104:5:duplicate symbol google.protobuf.DescriptorProto.ExtensionRange.start: already defined as field in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:105:5:duplicate symbol google.protobuf.DescriptorProto.ExtensionRange.end: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:107:5:duplicate symbol google.protobuf.DescriptorProto.ExtensionRange.options: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:109:3:duplicate symbol google.protobuf.DescriptorProto.extension_range: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:111:3:duplicate symbol google.protobuf.DescriptorProto.oneof_decl: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:113:3:duplicate symbol google.protobuf.DescriptorProto.options: already defined as field in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:118:3:duplicate symbol google.protobuf.DescriptorProto.ReservedRange: already defined as message in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:119:5:duplicate symbol google.protobuf.DescriptorProto.ReservedRange.start: already defined as field in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:120:5:duplicate symbol google.protobuf.DescriptorProto.ReservedRange.end: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:122:3:duplicate symbol google.protobuf.DescriptorProto.reserved_range: already defined as field in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:125:3:duplicate symbol google.protobuf.DescriptorProto.reserved_name: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:128:1:duplicate symbol google.protobuf.ExtensionRangeOptions: already defined as message in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:130:3:duplicate symbol google.protobuf.ExtensionRangeOptions.uninterpreted_option: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:138:1:duplicate symbol google.protobuf.FieldDescriptorProto: already defined as message in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:139:3:duplicate symbol google.protobuf.FieldDescriptorProto.Type: already defined as enum in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:142:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_DOUBLE: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:143:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_FLOAT: already defined as enum value in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:146:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_INT64: already defined as enum value in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:147:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_UINT64: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:150:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_INT32: already defined as enum value in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:151:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_FIXED64: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:152:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_FIXED32: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:153:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_BOOL: already defined as enum value in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:154:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_STRING: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:159:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_GROUP: already defined as enum value in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:160:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_MESSAGE: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:163:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_BYTES: already defined as enum value in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:164:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_UINT32: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:165:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_ENUM: already defined as enum value in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:166:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_SFIXED32: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:167:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_SFIXED64: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:168:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_SINT32: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:169:5:duplicate symbol google.protobuf.FieldDescriptorProto.TYPE_SINT64: already defined as enum value in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:172:3:duplicate symbol google.protobuf.FieldDescriptorProto.Label: already defined as enum in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:174:5:duplicate symbol google.protobuf.FieldDescriptorProto.LABEL_OPTIONAL: already defined as enum value i n \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:175:5:duplicate symbol google.protobuf.FieldDescriptorProto.LABEL_REQUIRED: already defined as enum value i n \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:176:5:duplicate symbol google.protobuf.FieldDescriptorProto.LABEL_REPEATED: already defined as enum value i n \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:179:3:duplicate symbol google.protobuf.FieldDescriptorProto.name: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:180:3:duplicate symbol google.protobuf.FieldDescriptorProto.number: already defined as field in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:181:3:duplicate symbol google.protobuf.FieldDescriptorProto.label: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:185:3:duplicate symbol google.protobuf.FieldDescriptorProto.type: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:192:3:duplicate symbol google.protobuf.FieldDescriptorProto.type_name: already defined as field in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:196:3:duplicate symbol google.protobuf.FieldDescriptorProto.extendee: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:203:3:duplicate symbol google.protobuf.FieldDescriptorProto.default_value: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:207:3:duplicate symbol google.protobuf.FieldDescriptorProto.oneof_index: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:213:3:duplicate symbol google.protobuf.FieldDescriptorProto.json_name: already defined as field in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:215:3:duplicate symbol google.protobuf.FieldDescriptorProto.options: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:238:3:duplicate symbol google.protobuf.FieldDescriptorProto.proto3_optional: already defined as field in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:242:1:duplicate symbol google.protobuf.OneofDescriptorProto: already defined as message in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:243:3:duplicate symbol google.protobuf.OneofDescriptorProto.name: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:244:3:duplicate symbol google.protobuf.OneofDescriptorProto.options: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:248:1:duplicate symbol google.protobuf.EnumDescriptorProto: already defined as message in \u0026#34;google/protobuf/ descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:249:3:duplicate symbol google.protobuf.EnumDescriptorProto.name: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:251:3:duplicate symbol google.protobuf.EnumDescriptorProto.value: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:253:3:duplicate symbol google.protobuf.EnumDescriptorProto.options: already defined as field in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:261:3:duplicate symbol google.protobuf.EnumDescriptorProto.EnumReservedRange: already defined as message in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:262:5:duplicate symbol google.protobuf.EnumDescriptorProto.EnumReservedRange.start: already defined as fiel d in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:263:5:duplicate symbol google.protobuf.EnumDescriptorProto.EnumReservedRange.end: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:269:3:duplicate symbol google.protobuf.EnumDescriptorProto.reserved_range: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:273:3:duplicate symbol google.protobuf.EnumDescriptorProto.reserved_name: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:277:1:duplicate symbol google.protobuf.EnumValueDescriptorProto: already defined as message in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:278:3:duplicate symbol google.protobuf.EnumValueDescriptorProto.name: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:279:3:duplicate symbol google.protobuf.EnumValueDescriptorProto.number: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:281:3:duplicate symbol google.protobuf.EnumValueDescriptorProto.options: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:285:1:duplicate symbol google.protobuf.ServiceDescriptorProto: already defined as message in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:286:3:duplicate symbol google.protobuf.ServiceDescriptorProto.name: already defined as field in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:287:3:duplicate symbol google.protobuf.ServiceDescriptorProto.method: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:289:3:duplicate symbol google.protobuf.ServiceDescriptorProto.options: already defined as field in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:293:1:duplicate symbol google.protobuf.MethodDescriptorProto: already defined as message in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:294:3:duplicate symbol google.protobuf.MethodDescriptorProto.name: already defined as field in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:298:3:duplicate symbol google.protobuf.MethodDescriptorProto.input_type: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:299:3:duplicate symbol google.protobuf.MethodDescriptorProto.output_type: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:301:3:duplicate symbol google.protobuf.MethodDescriptorProto.options: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:304:3:duplicate symbol google.protobuf.MethodDescriptorProto.client_streaming: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:306:3:duplicate symbol google.protobuf.MethodDescriptorProto.server_streaming: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:342:1:duplicate symbol google.protobuf.FileOptions: already defined as message in \u0026#34;google/protobuf/descript or.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:348:3:duplicate symbol google.protobuf.FileOptions.java_package: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:356:3:duplicate symbol google.protobuf.FileOptions.java_outer_classname: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:364:3:duplicate symbol google.protobuf.FileOptions.java_multiple_files: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:367:3:duplicate symbol google.protobuf.FileOptions.java_generate_equals_and_hash: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:375:3:duplicate symbol google.protobuf.FileOptions.java_string_check_utf8: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:379:3:duplicate symbol google.protobuf.FileOptions.OptimizeMode: already defined as enum in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:380:5:duplicate symbol google.protobuf.FileOptions.SPEED: already defined as enum value in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:382:5:duplicate symbol google.protobuf.FileOptions.CODE_SIZE: already defined as enum value in \u0026#34;google/prot obuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:383:5:duplicate symbol google.protobuf.FileOptions.LITE_RUNTIME: already defined as enum value in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:385:3:duplicate symbol google.protobuf.FileOptions.optimize_for: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:392:3:duplicate symbol google.protobuf.FileOptions.go_package: already defined as field in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:407:3:duplicate symbol google.protobuf.FileOptions.cc_generic_services: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:408:3:duplicate symbol google.protobuf.FileOptions.java_generic_services: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:409:3:duplicate symbol google.protobuf.FileOptions.py_generic_services: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:410:3:duplicate symbol google.protobuf.FileOptions.php_generic_services: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:416:3:duplicate symbol google.protobuf.FileOptions.deprecated: already defined as field in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:420:3:duplicate symbol google.protobuf.FileOptions.cc_enable_arenas: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:425:3:duplicate symbol google.protobuf.FileOptions.objc_class_prefix: already defined as field in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:428:3:duplicate symbol google.protobuf.FileOptions.csharp_namespace: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:434:3:duplicate symbol google.protobuf.FileOptions.swift_prefix: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:438:3:duplicate symbol google.protobuf.FileOptions.php_class_prefix: already defined as field in \u0026#34;google/pr otobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:443:3:duplicate symbol google.protobuf.FileOptions.php_namespace: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:448:3:duplicate symbol google.protobuf.FileOptions.php_metadata_namespace: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:453:3:duplicate symbol google.protobuf.FileOptions.ruby_package: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:458:3:duplicate symbol google.protobuf.FileOptions.uninterpreted_option: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:467:1:duplicate symbol google.protobuf.MessageOptions: already defined as message in \u0026#34;google/protobuf/descr iptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:486:3:duplicate symbol google.protobuf.MessageOptions.message_set_wire_format: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:491:3:duplicate symbol google.protobuf.MessageOptions.no_standard_descriptor_accessor: already defined as f ield in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:497:3:duplicate symbol google.protobuf.MessageOptions.deprecated: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:522:3:duplicate symbol google.protobuf.MessageOptions.map_entry: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:529:3:duplicate symbol google.protobuf.MessageOptions.uninterpreted_option: already defined as field in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:535:1:duplicate symbol google.protobuf.FieldOptions: already defined as message in \u0026#34;google/protobuf/descrip tor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:540:3:duplicate symbol google.protobuf.FieldOptions.ctype: already defined as field in \u0026#34;google/protobuf/des criptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:541:3:duplicate symbol google.protobuf.FieldOptions.CType: already defined as enum in \u0026#34;google/protobuf/desc riptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:543:5:duplicate symbol google.protobuf.FieldOptions.STRING: already defined as enum value in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:545:5:duplicate symbol google.protobuf.FieldOptions.CORD: already defined as enum value in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:547:5:duplicate symbol google.protobuf.FieldOptions.STRING_PIECE: already defined as enum value in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:554:3:duplicate symbol google.protobuf.FieldOptions.packed: already defined as field in \u0026#34;google/protobuf/de scriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:567:3:duplicate symbol google.protobuf.FieldOptions.jstype: already defined as field in \u0026#34;google/protobuf/de scriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:568:3:duplicate symbol google.protobuf.FieldOptions.JSType: already defined as enum in \u0026#34;google/protobuf/des criptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:570:5:duplicate symbol google.protobuf.FieldOptions.JS_NORMAL: already defined as enum value in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:573:5:duplicate symbol google.protobuf.FieldOptions.JS_STRING: already defined as enum value in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:576:5:duplicate symbol google.protobuf.FieldOptions.JS_NUMBER: already defined as enum value in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:607:3:duplicate symbol google.protobuf.FieldOptions.lazy: already defined as field in \u0026#34;google/protobuf/desc riptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:613:3:duplicate symbol google.protobuf.FieldOptions.deprecated: already defined as field in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:616:3:duplicate symbol google.protobuf.FieldOptions.weak: already defined as field in \u0026#34;google/protobuf/desc riptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:620:3:duplicate symbol google.protobuf.FieldOptions.uninterpreted_option: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:628:1:duplicate symbol google.protobuf.OneofOptions: already defined as message in \u0026#34;google/protobuf/descrip tor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:630:3:duplicate symbol google.protobuf.OneofOptions.uninterpreted_option: already defined as field in \u0026#34;goog le/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:636:1:duplicate symbol google.protobuf.EnumOptions: already defined as message in \u0026#34;google/protobuf/descript or.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:640:3:duplicate symbol google.protobuf.EnumOptions.allow_alias: already defined as field in \u0026#34;google/protobu f/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:646:3:duplicate symbol google.protobuf.EnumOptions.deprecated: already defined as field in \u0026#34;google/protobuf /descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:651:3:duplicate symbol google.protobuf.EnumOptions.uninterpreted_option: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:657:1:duplicate symbol google.protobuf.EnumValueOptions: already defined as message in \u0026#34;google/protobuf/des criptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:662:3:duplicate symbol google.protobuf.EnumValueOptions.deprecated: already defined as field in \u0026#34;google/pro tobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:665:3:duplicate symbol google.protobuf.EnumValueOptions.uninterpreted_option: already defined as field in \u0026#34; google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:671:1:duplicate symbol google.protobuf.ServiceOptions: already defined as message in \u0026#34;google/protobuf/descr iptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:682:3:duplicate symbol google.protobuf.ServiceOptions.deprecated: already defined as field in \u0026#34;google/proto buf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:685:3:duplicate symbol google.protobuf.ServiceOptions.uninterpreted_option: already defined as field in \u0026#34;go ogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:691:1:duplicate symbol google.protobuf.MethodOptions: already defined as message in \u0026#34;google/protobuf/descri ptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:702:3:duplicate symbol google.protobuf.MethodOptions.deprecated: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:707:3:duplicate symbol google.protobuf.MethodOptions.IdempotencyLevel: already defined as enum in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:708:5:duplicate symbol google.protobuf.MethodOptions.IDEMPOTENCY_UNKNOWN: already defined as enum value in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:709:5:duplicate symbol google.protobuf.MethodOptions.NO_SIDE_EFFECTS: already defined as enum value in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:710:5:duplicate symbol google.protobuf.MethodOptions.IDEMPOTENT: already defined as enum value in \u0026#34;google/p rotobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:712:3:duplicate symbol google.protobuf.MethodOptions.idempotency_level: already defined as field in \u0026#34;google /protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:716:3:duplicate symbol google.protobuf.MethodOptions.uninterpreted_option: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:729:1:duplicate symbol google.protobuf.UninterpretedOption: already defined as message in \u0026#34;google/protobuf/ descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:735:3:duplicate symbol google.protobuf.UninterpretedOption.NamePart: already defined as message in \u0026#34;google/ protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:736:5:duplicate symbol google.protobuf.UninterpretedOption.NamePart.name_part: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:737:5:duplicate symbol google.protobuf.UninterpretedOption.NamePart.is_extension: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:739:3:duplicate symbol google.protobuf.UninterpretedOption.name: already defined as field in \u0026#34;google/protob uf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:743:3:duplicate symbol google.protobuf.UninterpretedOption.identifier_value: already defined as field in \u0026#34;g oogle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:744:3:duplicate symbol google.protobuf.UninterpretedOption.positive_int_value: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:745:3:duplicate symbol google.protobuf.UninterpretedOption.negative_int_value: already defined as field in \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:746:3:duplicate symbol google.protobuf.UninterpretedOption.double_value: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:747:3:duplicate symbol google.protobuf.UninterpretedOption.string_value: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; n \u0026#34;google/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:904:5:duplicate symbol google.protobuf.GeneratedCodeInfo.Annotation.begin: already defined as field in \u0026#34;goo gle/protobuf/descriptor.proto\u0026#34; third_party\\google\\protobuf\\descriptor.proto:909:5:duplicate symbol google.protobuf.GeneratedCodeInfo.Annotation.end: already defined as field in \u0026#34;googl e/protobuf/descriptor.proto\u0026#34; 提示的错误会以如下形式展示： {文件} ：{行} ：{列} ：{错误消息}\nDocker 映像 Buf 提供了一个 Docker 映像，bufbuild/buf 它使您能够将 buf 其用作 Docker 工作流程的一部分\ndocker run \\ --volume \u0026#34;$(pwd):/workspace\u0026#34; \\ --workdir /workspace \\ bufbuild/buf lint 小结 本篇是 buf 介绍的第一篇，简单介绍了 buf lint 的使用，后面会介绍如何自定义规则和 buf 的其他用法。\n","permalink":"https://jasminides.com/posts/buf-%E5%88%9D%E5%85%A5%E9%97%A8-1/","summary":"\u003cp\u003eBuf 的目标是将 API 开发转向模式驱动的范式，从而为未来铺平道路，使 API 以服务所有者和客户可以依赖的方式定义。\u003c/p\u003e\n\u003cp\u003e与简单地暴露 REST/JSON 服务相比，使用 IDL 来定义 API 有很多好处，今天，Protobuf 是业界最稳定、最广泛采用的 IDL。但就目前的情况来看，使用 Protobuf 比使用 JSON 作为数据传输格式要困难得多。\u003c/p\u003e\n\u003cp\u003eBuf 正在建立工具，使 Protobuf 对服务所有者和客户来说是可靠和友好的，同时保持它在技术上的明显优势。您的组织不需要重新发明轮子来高效地创建、维护和使用 Protobuf API。我们将为您处理您的 Protobuf 管理策略，因此您可以专注于重要的事情。\u003c/p\u003e\n\u003cp\u003e本篇文章是讲述 buf 使用的第一篇文章，主要讲解使用 buf 定义 proto 文件的 lint 规则。统一的 lint 规则，可以让个人或团队定义的 API 保持一致。\u003c/p\u003e\n\u003ch2 id=\"lint\"\u003elint\u003c/h2\u003e\n\u003cp\u003e1 创建 buf.yaml 文件\n使用 \u003ccode\u003ebuf mod init\u003c/code\u003e 命令创建 buf.yaml 文件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ebreaking\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eFILE\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003elint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003eDEFAULT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用默认 lint 规则。\u003c/p\u003e\n\u003cp\u003e2 运行 lint 命令\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003ebuf lint\u003c/code\u003e 命令运行 lint。\u003c/p\u003e","title":"Buf 初入门 1"},{"content":"今天来讲一讲如何统计 go 代码的测试覆盖率，主要是 cover 命令。\ncover 基本用法 1 先简单写个函数和相应的测试，代码如下：\nfunc Max(a, b int) int { if a \u0026gt; b { return a } return b } 这个函数就是简单的比较大小，如果 a \u0026gt; b，返回 a，否则返回 b。\n测试代码如下\npackage main import \u0026#34;testing\u0026#34; func TestMax(t *testing.T) { type args struct { a int b int } tests := []struct { name string args args want int }{ { name: \u0026#34;a is larger than b\u0026#34;, args: args{ a: 2, b: 1, }, want: 2, }, { name: \u0026#34;b is larger than a\u0026#34;, args: args{ a: 1, b: 2, }, want: 2, }, } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { if got := Max(tt.args.a, tt.args.b); got != tt.want { t.Errorf(\u0026#34;Max() = %v, want %v\u0026#34;, got, tt.want) } }) } } 2 go test -cover 能够统计出代码测试的覆盖率，这是一种比统计函数是否被调用更强悍的手法。我们执行这个命令。输出如下：\nPASS coverage: 100.0% of statements ok blog-test 0.265s 可以看到我们的测试覆盖率为 100%。\n我们还可以对测试覆盖率进行可视化展示。通过以下命令：\ngo test -coverprofile=coverage.out go tool cover -html=coverage.out 可以识别和统计出未被测试覆盖的代码。\n小结 本文主要讲解 go 如何统计代码测试覆盖率。除了通过命令行的方式，各个 IDE 都有相应的工具统计代码测试覆盖率。\n在 GitHub 上，有的开源项目使用了 Codecov 等工具结合 CI 来统计代码覆盖率。\n","permalink":"https://jasminides.com/posts/go-%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/","summary":"\u003cp\u003e今天来讲一讲如何统计 go 代码的测试覆盖率，主要是 cover 命令。\u003c/p\u003e\n\u003ch2 id=\"cover-基本用法\"\u003ecover 基本用法\u003c/h2\u003e\n\u003cp\u003e1 先简单写个函数和相应的测试，代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMax\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个函数就是简单的比较大小，如果 a \u0026gt; b，返回 a，否则返回 b。\u003c/p\u003e\n\u003cp\u003e测试代码如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestMax\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etests\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ewant\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a is larger than b\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ewant\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b is larger than a\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ewant\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etests\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMax\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003egot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewant\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrorf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Max() = %v, want %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egot\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ett\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewant\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2\ngo test -cover 能够统计出代码测试的覆盖率，这是一种比统计函数是否被调用更强悍的手法。我们执行这个命令。输出如下：\u003c/p\u003e","title":"Go 统计代码测试覆盖率"},{"content":"Issue Recently, a Linux server has been experiencing high CPU usage, causing the server to become unresponsive and other processes to fail to execute smoothly. By using the top command to check resource usage, it can be seen that the kswapd0 process is consuming a large amount of CPU resources.\nCause and solution Based on my research, the kswapd0 process is responsible for managing virtual memory.\nTypically, a Linux system comprises RAM, swap, and EXT4 components. The EXT4 partition is used to store regular files and can be created on either an HDD or an SSD, though it is relatively slower compared to RAM. RAM, commonly referred to as memory, is used for high-speed program execution. The swap partition, on the other hand, is used as additional virtual memory and is normally allocated on physical disks, especially on machines with limited physical RAM.\nThe swap partition acts as virtual RAM, generally located on HDD/SSD. When physical memory is limited, the system might frequently face memory shortages, causing it to use the swap partition to temporarily store data from the physical memory. When available physical memory is low, the kswapd0 process moves less frequently used programs to the swap partition, which can result in these programs becoming unresponsive. For instance, if a machine has 4 GB of RAM and needs to run a program requiring 5 GB of memory, at least 1 GB will be placed in the swap partition. The process of moving memory handled by kswapd0 can lead to significant CPU usage. To address this issue, there are several solutions:\n1 modify /etc/sysctl.conf file\necho vm.swappiness=0 | sudo tee -a /etc/sysctl.conf\nHere, 0 represents the percentage of remaining physical memory. The value ranges from 0 to 100, and setting it to 0 means that kswapd0 will only execute when there is no physical memory available.\n2 Close some unused programs.\n3 Add more memory.\n4 Increase the swap partition.\nSummary This article primarily discusses the issue I encountered with kswapd0 using excessive CPU resources and how to resolve this problem.\nReferences https://www.cnblogs.com/wqbin/p/12095703.html ","permalink":"https://jasminides.com/posts/kswapd0-is-consuming-a-lot-of-cpu./","summary":"\u003ch2 id=\"issue\"\u003eIssue\u003c/h2\u003e\n\u003cp\u003eRecently, a Linux server has been experiencing high CPU usage, causing the server to become unresponsive and other processes to fail to execute smoothly. By using the top command to check resource usage, it can be seen that the kswapd0 process is consuming a large amount of CPU resources.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/kswapd0/img_2.png\" alt=\"top 命令结果\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"cause-and-solution\"\u003eCause and solution\u003c/h2\u003e\n\u003cp\u003eBased on my research, the kswapd0 process is responsible for managing virtual memory.\u003c/p\u003e\n\u003cp\u003eTypically, a Linux system comprises RAM, swap, and EXT4 components. The EXT4 partition is used to store regular files and can be created on either an HDD or an SSD, though it is relatively slower compared to RAM. RAM, commonly referred to as memory, is used for high-speed program execution. The swap partition, on the other hand, is used as additional virtual memory and is normally allocated on physical disks, especially on machines with limited physical RAM.\u003c/p\u003e","title":"Kswapd0 is consuming a lot of CPU."},{"content":"问题 最近一台 Linux 服务器经常出现 cpu 过高，导致服务器卡顿，其他进程不能顺利进行。通过 top 命令查看资源的占用情况，可以看到 Kswapd0 进程 消耗了大量的 cpu 资源。\n原因及解决 通过搜索得知，Kswapd0 进程是用来管理虚拟内存的。\n一般的 Linux 都会有 RAM，swap, 和 EXT4 这几个部分，EXT4 分区就是用来存放一般的文件，可以在机械硬盘或者 SSD 上划分出 ext4 分区来保存文件，相对 RAM（内存）来说要稍微慢一些，RAM 就是日常所说的内存，用来做程序运行时的高速缓存，而 SWAP 是交换分区，一般在物理内存比较小的机器上会划分一块物理磁盘来作为 swap 分区。\nswap 分区是一款虚拟的 RAM，一般在 HDD/SSD 上，当物理内存比较小的时侯，可能经常缺内存，那么系统就会使用 swap 分区，将物理内存中的内容搬迁到 swap 分区中暂存。当可用物理内存比较小的时候，kswapd0 进程就会将相对比较不常用的程序移动到 swap 分区中，这个时候就可能造成这些程序比较卡顿。例如一台机器的内存是 4G，而要运行一个需要 5G 内存的程序，那么至少有 1G 的内存会放到 swap 分区中。kswapd0 移动内存的过程就会造成 CPU 的大量使用。要解决这个问题有这样几个方式。\n1 修改 /etc/sysctl.conf 文件\necho vm.swappiness=0 | sudo tee -a /etc/sysctl.conf\n这里 0 表示物理内存还剩余的百分比，这个值的取值范围是 0-100，配置 0 也就意味着只有当没有物理内存可用时再执行 kswapd0.\n2 关闭一些不使用的程序\n3 增加内存\n4 增加 swap 分区\n小结 本文主要是介绍我遇到的 kswapd0 使用 cpu 资源过高的问题，以及如何解决这个问题。\n参考 https://www.cnblogs.com/wqbin/p/12095703.html ","permalink":"https://jasminides.com/posts/kswapd0-%E6%B6%88%E8%80%97%E5%A4%A7%E9%87%8F-cpu/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近一台 Linux 服务器经常出现 cpu 过高，导致服务器卡顿，其他进程不能顺利进行。通过 top 命令查看资源的占用情况，可以看到 Kswapd0 进程 消耗了大量的 cpu 资源。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/kswapd0/img_2.png\" alt=\"top 命令结果\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"原因及解决\"\u003e原因及解决\u003c/h2\u003e\n\u003cp\u003e通过搜索得知，Kswapd0 进程是用来管理虚拟内存的。\u003c/p\u003e\n\u003cp\u003e一般的 Linux 都会有 RAM，swap, 和 EXT4 这几个部分，EXT4 分区就是用来存放一般的文件，可以在机械硬盘或者 SSD 上划分出 ext4 分区来保存文件，相对 RAM（内存）来说要稍微慢一些，RAM 就是日常所说的内存，用来做程序运行时的高速缓存，而 SWAP 是交换分区，一般在物理内存比较小的机器上会划分一块物理磁盘来作为 swap 分区。\u003c/p\u003e\n\u003cp\u003eswap 分区是一款虚拟的 RAM，一般在 HDD/SSD 上，当物理内存比较小的时侯，可能经常缺内存，那么系统就会使用 swap 分区，将物理内存中的内容搬迁到 swap 分区中暂存。当可用物理内存比较小的时候，kswapd0 进程就会将相对比较不常用的程序移动到 swap 分区中，这个时候就可能造成这些程序比较卡顿。例如一台机器的内存是 4G，而要运行一个需要 5G 内存的程序，那么至少有 1G 的内存会放到 swap 分区中。kswapd0 移动内存的过程就会造成 CPU 的大量使用。要解决这个问题有这样几个方式。\u003c/p\u003e\n\u003cp\u003e1 修改 /etc/sysctl.conf 文件\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eecho vm.swappiness=0 | sudo tee -a /etc/sysctl.conf\u003c/code\u003e\u003c/p\u003e","title":"Kswapd0 消耗大量 cpu"},{"content":"问题 在我日常使用 PostgreSQL 数据库过程中，会遇到一个问题：我在重新创建一个数据库表时，往往会导入已有的数据，这样会导致新增表数据时，由于 id 采用了自增，会从 1 开始生成，然后由于已有数据的缘故，所以会导致 id 重复报错。\n解决 查看了 stackoverflow 的一些回答，发现了一个解决方案：采用 ALTER SEQUENCE 语句进行修改。\nALTER SEQUENCE ALTER SEQUENCE — 更改序列生成器的定义\n语法：\nALTER SEQUENCE [ IF EXISTS ] name [ AS data_type ] [ INCREMENT [ BY ] increment ] [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ] [ START [ WITH ] start ] [ RESTART [ [ WITH ] restart ] ] [ CACHE cache ] [ [ NO ] CYCLE ] [ OWNED BY { table_name.column_name | NONE } ] ALTER SEQUENCE [ IF EXISTS ] name OWNER TO { new_owner | CURRENT_ROLE | CURRENT_USER | SESSION_USER } ALTER SEQUENCE [ IF EXISTS ] name RENAME TO new_name ALTER SEQUENCE [ IF EXISTS ] name SET SCHEMA new_schema 参数：\nname 要变更的序列名称。 IF EXISTS 如果序列不存在，不抛出错误。(这种情况会发出通知) data_type 可选的子句 AS data_type 改变序列的数据类型。有效的类型是 smallint、integer 和 bigint。 改变数据类型会自动改变序列的最小值和最大值，前提是以前的最小值和最大值是旧数据类型的最小值或最大值（换句话说，如果序列是用 NO MINVALUE 或 NO MAXVALUE 创建的，隐含地或明确地）。否则，最小值和最大值将被保留，除非作为同一命令的一部分给出新的值。如果最小值和最大值不适合新的数据类型，将产生一个错误。 increment 子句 INCREMENT BY increment 是可选的。一个正值将形成升序，一个负值将形成降序。如果没有指定，将保持旧的增量值。 minvalue NO MINVALUE 可选的子句 MINVALUE minvalue 决定了一个序列可以产生的最小值。如果没有指定 MINVALUE，将分别使用默认的 1 和升序和降序的数据类型的最小值。如果两个选项都没有指定，将保持当前的最小值。 maxvalue NO MAXVALUE 可选的子句 MAXVALUE maxvalue 决定了序列的最大值。如果没有指定 MAXVALUE，将分别使用数据类型的最大值和升序和降序的 -1 的默认值。如果两个选项都没有指定，将保持当前的最大值。 start 可选的子句 START WITH start 改变序列的记录起始值。这对当前的序列值没有影响；它只是设置了未来 ALTER SEQUENCE RESTART 命令将使用的值。 restart 可选子句 RESTART [ WITH restart ] 改变序列的当前值。这与调用 is_called = false 的 setval 函数类似：指定的值将由下次调用 nextval 返回。写入没有重启值的 RESTART 等同于提供由 CREATE SEQUENCE 记录的或由 ALTER SEQUENCE START WITH 最后设置的起始值。 与 setval 调用相反，序列上的 RESTART 操作是事务性的，并阻止并发的事务从同一序列中获取数字。如果这不是想要的操作模式，应该使用 setval。 cache 条款 CACHE 缓存使序列号被预先分配并存储在内存中，以加快访问速度。最小值为 1（一次只能生成一个值，即没有缓存）。如果没有指定，将保持旧的缓存值。 CYCLE 可选的 CYCLE 关键词可以用来使序列在升序或降序分别达到最大值或最小值时进行环绕。如果达到极限，下一个生成的数字将分别是最小值或最大值。 NO CYCLE 如果指定了可选的 NO CYCLE 关键字，在序列达到最大值后对 nextval 的任何调用将返回一个错误。如果没有指定 CYCLE 或 NO CYCLE，将保持旧的循环行为。 OWNED BY table_name.column_name OWNED BY NONE OWNED BY 选项使序列与一个特定的表列相关联，这样，如果该列（或其整个表）被丢弃，序列也将被自动丢弃。如果指定了这个选项，这个关联将取代以前为序列指定的任何关联。指定的表必须有相同的所有者，并且与序列在同一模式下。指定 OWNED BY NONE 会删除任何现有的关联，使序列成为 \u0026#34;独立的\u0026#34;。 new_owner 序列的新所有者的用户名。 new_name 序列的新名称。 new_schema 序列的新 schema。 例子 ALTER SEQUENCE pages_id_seq RESTART with 14688;\npages 新的序列自增 id 将从 14688 开始\n参考 https://stackoverflow.com/questions/62010838/reset-postgres-auto-increment-value-to-0 https://www.postgresql.org/docs/current/functions-sequence.html https://www.postgresql.org/docs/14/sql-altersequence.html ","permalink":"https://jasminides.com/posts/postgresql-%E4%BF%AE%E6%94%B9%E5%BA%8F%E5%88%97%E4%BA%A7%E7%94%9F%E5%99%A8/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e在我日常使用 PostgreSQL 数据库过程中，会遇到一个问题：我在重新创建一个数据库表时，往往会导入已有的数据，这样会导致新增表数据时，由于 id 采用了自增，会从 1 开始生成，然后由于已有数据的缘故，所以会导致 id 重复报错。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e查看了 stackoverflow 的一些回答，发现了一个解决方案：采用 \u003ccode\u003eALTER SEQUENCE\u003c/code\u003e 语句进行修改。\u003c/p\u003e\n\u003ch3 id=\"alter-sequence\"\u003eALTER SEQUENCE\u003c/h3\u003e\n\u003cp\u003eALTER SEQUENCE — 更改序列生成器的定义\u003c/p\u003e\n\u003cp\u003e语法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eALTER\u003c/span\u003e SEQUENCE [ \u003cspan style=\"color:#66d9ef\"\u003eIF\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eEXISTS\u003c/span\u003e ] name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eAS\u003c/span\u003e data_type ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eINCREMENT\u003c/span\u003e [ \u003cspan style=\"color:#66d9ef\"\u003eBY\u003c/span\u003e ] \u003cspan style=\"color:#66d9ef\"\u003eincrement\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eMINVALUE\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eminvalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNO\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eMINVALUE\u003c/span\u003e ] [ \u003cspan style=\"color:#66d9ef\"\u003eMAXVALUE\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emaxvalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNO\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eMAXVALUE\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eSTART\u003c/span\u003e [ \u003cspan style=\"color:#66d9ef\"\u003eWITH\u003c/span\u003e ] \u003cspan style=\"color:#66d9ef\"\u003estart\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eRESTART\u003c/span\u003e [ [ \u003cspan style=\"color:#66d9ef\"\u003eWITH\u003c/span\u003e ] \u003cspan style=\"color:#66d9ef\"\u003erestart\u003c/span\u003e ] ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ \u003cspan style=\"color:#66d9ef\"\u003eCACHE\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecache\u003c/span\u003e ] [ [ \u003cspan style=\"color:#66d9ef\"\u003eNO\u003c/span\u003e ] \u003cspan style=\"color:#66d9ef\"\u003eCYCLE\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [ OWNED \u003cspan style=\"color:#66d9ef\"\u003eBY\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e{\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003ecolumn_name\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNONE\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eALTER\u003c/span\u003e SEQUENCE [ \u003cspan style=\"color:#66d9ef\"\u003eIF\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eEXISTS\u003c/span\u003e ] name \u003cspan style=\"color:#66d9ef\"\u003eOWNER\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTO\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e{\u003c/span\u003e new_owner \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCURRENT_ROLE\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCURRENT_USER\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eSESSION_USER\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eALTER\u003c/span\u003e SEQUENCE [ \u003cspan style=\"color:#66d9ef\"\u003eIF\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eEXISTS\u003c/span\u003e ] name \u003cspan style=\"color:#66d9ef\"\u003eRENAME\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTO\u003c/span\u003e new_name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eALTER\u003c/span\u003e SEQUENCE [ \u003cspan style=\"color:#66d9ef\"\u003eIF\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eEXISTS\u003c/span\u003e ] name \u003cspan style=\"color:#66d9ef\"\u003eSET\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eSCHEMA\u003c/span\u003e new_schema\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参数：\u003c/p\u003e","title":"Postgresql 修改序列产生器"},{"content":"起因 在我们使用 kratos 开发 web 应用时，由于 kratos 默认设计导致我们在自定义错误时，访问 api 时，相应的状态码是以自定义的 error code 作为 http status code 表现的。\n如果我们想将 业务状态码和 HTTP 状态码分离，即所有的 http status code 都为 200，实际的业务状态码以在 response 中响应的 code 为主。\n我们该如何实现呢？有 2 种方法，一种是自定义中间件将错误进行特别处理，另一种是自定义 Encoder。本篇文章主要就是介绍 Encoder 方法。\n自定义 Encoder 根据我们的需要，我们需要自定义 2 个 Encoder, ErrorEncoder 和 ResponseEncoder 函数。需要的参数类型分别如下：\n// ResponseEncoder with response encoder. func ResponseEncoder(en EncodeResponseFunc) ServerOption { return func(o *Server) { o.enc = en } } // ErrorEncoder with error encoder. func ErrorEncoder(en EncodeErrorFunc) ServerOption { return func(o *Server) { o.ene = en } } // EncodeResponseFunc is encode response func. type EncodeResponseFunc func(http.ResponseWriter, *http.Request, interface{}) error // EncodeErrorFunc is encode error func. type EncodeErrorFunc func(http.ResponseWriter, *http.Request, error) 1 自定义 Response 结构 定义一个 Response 的结构体\ntype Response struct { Code int `json:\u0026#34;code\u0026#34; form:\u0026#34;code\u0026#34; protobuf:\u0026#34;varint,1,opt,name=code\u0026#34;` Message string `json:\u0026#34;message\u0026#34; form:\u0026#34;message\u0026#34; protobuf:\u0026#34;bytes,2,opt,name=message\u0026#34;` Ts string `json:\u0026#34;ts\u0026#34; form:\u0026#34;ts\u0026#34; protobuf:\u0026#34;bytes,3,opt,name=ts\u0026#34;` Reason string `json:\u0026#34;reason\u0026#34; form:\u0026#34;reason\u0026#34; protobuf:\u0026#34;bytes,4,opt,name=reason\u0026#34;` Data interface{} `json:\u0026#34;data\u0026#34; form:\u0026#34;data\u0026#34; protobuf:\u0026#34;bytes,5,opt,name=data\u0026#34;` } 2 定义 2 个 Encoder 函数，分别对应 Response 和 Error 的编码\nfunc ErrorEncoder(w stdhttp.ResponseWriter, r *stdhttp.Request, err error) { se := errors.FromError(err) reply := NewResponse() reply.Code = int(se.Code) reply.Data = nil reply.Message = se.Message reply.Reason = se.Reason reply.Ts = time.Now().Format(\u0026#34;2006-01-02 15:04:05.00000\u0026#34;) codec, _ := http.CodecForRequest(r, \u0026#34;Accept\u0026#34;) body, err := codec.Marshal(reply) if err != nil { w.WriteHeader(stdhttp.StatusInternalServerError) return } w.Header().Set(\u0026#34;Content-Type\u0026#34;, contentType(codec.Name())) w.WriteHeader(stdhttp.StatusOK) w.Write(body) } func ResponseEncoder(w stdhttp.ResponseWriter, r *stdhttp.Request, v interface{}) error { reply := NewResponse() reply.Code = 200 reply.Data = v reply.Message = \u0026#34;success\u0026#34; reply.Reason = \u0026#34;success\u0026#34; reply.Ts = time.Now().Format(\u0026#34;2006-01-02 15:04:05.00000\u0026#34;) codec, _ := http.CodecForRequest(r, \u0026#34;Accept\u0026#34;) data, err := codec.Marshal(reply) if err != nil { return err } w.Header().Set(\u0026#34;Content-Type\u0026#34;, contentType(codec.Name())) w.WriteHeader(stdhttp.StatusOK) w.Write(data) return nil } 3 在 http server 添加相应的 Encoder\nopts = append(opts, http.ErrorEncoder(Encoder.ErrorEncoder)) opts = append(opts, http.ResponseEncoder(Encoder.ResponseEncoder)) 4 运行代码，访问相应接口进行测试：\n参考 https://go-kratos.dev/docs/component/errors https://go-kratos.dev/docs/component/transport/http ","permalink":"https://jasminides.com/posts/kratos-%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%86%E7%A6%BB/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e在我们使用 kratos 开发 web 应用时，由于 kratos 默认设计导致我们在自定义错误时，访问 api 时，相应的状态码是以自定义的 error code 作为 http status code 表现的。\u003c/p\u003e\n\u003cp\u003e如果我们想将 业务状态码和 HTTP 状态码分离，即所有的 http status code 都为 200，实际的业务状态码以在 response 中响应的 code 为主。\u003c/p\u003e\n\u003cp\u003e我们该如何实现呢？有 2 种方法，一种是自定义中间件将错误进行特别处理，另一种是自定义 Encoder。本篇文章主要就是介绍 Encoder 方法。\u003c/p\u003e\n\u003ch2 id=\"自定义-encoder\"\u003e自定义 Encoder\u003c/h2\u003e\n\u003cp\u003e根据我们的需要，我们需要自定义 2 个 Encoder, \u003ccode\u003eErrorEncoder\u003c/code\u003e 和 \u003ccode\u003eResponseEncoder\u003c/code\u003e 函数。需要的参数类型分别如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ResponseEncoder with response encoder.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponseEncoder\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEncodeResponseFunc\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eServerOption\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eenc\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ErrorEncoder with error encoder.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eErrorEncoder\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEncodeErrorFunc\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eServerOption\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eene\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// EncodeResponseFunc is encode response func.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEncodeResponseFunc\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// EncodeErrorFunc is encode error func.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEncodeErrorFunc\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e1 自定义 Response 结构\n定义一个 Response 的结构体\u003c/p\u003e","title":"Kratos 业务状态码和 HTTP 状态码分离"},{"content":"本文介绍 apisix 和 authing 对接进行 api 登陆验证的方式。\napisix 介绍 Apache APISIX 是一个动态、实时、高性能的 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。Apache APISIX 不仅支持插件动态变更和热插拔，而且拥有众多实用的插件。Apache APISIX 的 OpenID Connect 插件支持 OpenID Connect 协议，用户可以使用该插件让 Apache APISIX 对接 Authing 服务，作为集中式认证网关部署于企业中。\nauthing 介绍 Authing 是国内首款以开发者为中心的全场景身份云产品，集成了所有主流身份认证协议，为企业和开发者提供完善安全的用户认证和访问管理服务。其主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等；此外还有基于函数计算可以无限制拓展 Authing 能力的 Pipeline。支持云交付和私有化部署方式，帮助企业和开发者提升生产效率。\napisix 和 authing 对接 1 登录 Authing 账号，选择自建用户应用，输入应用名称和认证地址\n2 设置登陆回调 URL 和登出回调 URL 为你的 apisix 访问地址 http://127.0.0.1:9080/\n3 在用户管理界面创建一个新用户，账号密码都是 user1/user1\n4 在应用的配置里记录下应用的 App ID、App Secret、服务发现地址 这些信息会在 apisix 配置插件时使用。\n5 安装 apisix, 具体的安装步骤就不用我们讲了，可以参考官方文档。\n6 配置相应的 url，设置上游为 httpbin.org，为了展示方便，这里采用 dashboard 的方式配置路由。在插件配置里启用 openid-connect 插件，插件的配置如下：\n{ \u0026#34;client_id\u0026#34;:\u0026#34;{YOUR_CLIENT_ID}\u0026#34;, \u0026#34;client_secret\u0026#34;:\u0026#34;{YOUR_CLIENT_SECRET}\u0026#34;, \u0026#34;discovery\u0026#34;:\u0026#34;https://{YOUR_DISCOVERY}\u0026#34;, \u0026#34;scope\u0026#34;:\u0026#34;openid profile\u0026#34;, \u0026#34;bearer_only\u0026#34;:false, \u0026#34;realm\u0026#34;:\u0026#34;apisix\u0026#34;, \u0026#34;introspection_endpoint_auth_method\u0026#34;:\u0026#34;client_secret_post\u0026#34;, \u0026#34;redirect_uri\u0026#34;:\u0026#34;http://127.0.0.1:9080/\u0026#34; } 7 配置好路由，访问 \u0026ldquo;http://127.0.0.1:9080/get\u0026rdquo;, 由于 启用了 OpenID Connect 插件，所以会被重定向到 authing 登陆界面 (如图)，输入正确的用户密码就能获得正确的数据。\n8 在 authing 的审计日志 - 用户行为日志 可以看到相应的登陆日志。\n小结 本文简单的介绍了 apisix 对接 authing 进行 api 验证。\n","permalink":"https://jasminides.com/posts/apisix-%E4%BD%BF%E7%94%A8-authing-%E8%BF%9B%E8%A1%8C%E8%AE%A4%E8%AF%81%E7%99%BB%E9%99%86/","summary":"\u003cp\u003e本文介绍 apisix 和 authing 对接进行 api 登陆验证的方式。\u003c/p\u003e\n\u003ch2 id=\"apisix-介绍\"\u003eapisix 介绍\u003c/h2\u003e\n\u003cp\u003eApache APISIX 是一个动态、实时、高性能的 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。Apache APISIX 不仅支持插件动态变更和热插拔，而且拥有众多实用的插件。Apache APISIX 的 OpenID Connect 插件支持 OpenID Connect 协议，用户可以使用该插件让 Apache APISIX 对接 Authing 服务，作为集中式认证网关部署于企业中。\u003c/p\u003e\n\u003ch2 id=\"authing-介绍\"\u003eauthing 介绍\u003c/h2\u003e\n\u003cp\u003eAuthing 是国内首款以开发者为中心的全场景身份云产品，集成了所有主流身份认证协议，为企业和开发者提供完善安全的用户认证和访问管理服务。其主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等；此外还有基于函数计算可以无限制拓展 Authing 能力的 Pipeline。支持云交付和私有化部署方式，帮助企业和开发者提升生产效率。\u003c/p\u003e\n\u003ch2 id=\"apisix-和-authing-对接\"\u003eapisix 和 authing 对接\u003c/h2\u003e\n\u003cp\u003e1 登录 Authing 账号，选择自建用户应用，输入应用名称和认证地址\u003c/p\u003e\n\u003cp\u003e2 设置登陆回调 URL 和登出回调 URL 为你的 apisix 访问地址 http://127.0.0.1:9080/\u003c/p\u003e\n\u003cp\u003e3 在用户管理界面创建一个新用户，账号密码都是 user1/user1\u003c/p\u003e\n\u003cp\u003e4 在应用的配置里记录下应用的 App ID、App Secret、服务发现地址 这些信息会在 apisix 配置插件时使用。\u003c/p\u003e\n\u003cp\u003e5 安装 apisix, 具体的安装步骤就不用我们讲了，可以参考官方文档。\u003c/p\u003e","title":"Apisix 使用 authing 进行认证登陆"},{"content":"本篇文章主要介绍了 OAuth2.0 和 使用 Google 的 OAuth2.0 登录方式。\nOAuth2.0 介绍 OAuth 2.0 是 OAuth 协议的下一版本，但不向下兼容 OAuth 1.0。OAuth 2.0 关注客户端开发者的简易性，同时为 Web 应用、桌面应用、手机和智能设备提供专门的认证流程。\nFacebook 的新的 Graph API 只支持 OAuth 2.0，Google 在 2011 年 3 月也宣布 Google API 对 OAuth 2.0 的支持，Windows Live 也支持 OAuth 2.0。\n在认证和授权的过程中涉及的三方包括： 1、服务提供方，用户使用服务提供方来存储受保护的资源，如照片，视频，联系人列表。 2、用户，存放在服务提供方的受保护的资源的拥有者。 3、客户端，要访问服务提供方资源的第三方应用，通常是网站，如提供照片打印服务的网站。在认证过程之前，客户端要向服务提供者申请客户端标识。\n使用 OAuth 进行认证和授权的过程如下所示：\n（A）用户打开客户端以后，客户端要求用户给予授权。 （B）用户同意给予客户端授权。 （C）客户端使用上一步获得的授权，向认证服务器申请令牌。 （D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。 （E）客户端使用令牌，向资源服务器申请获取资源。 （F）资源服务器确认令牌无误，同意向客户端开放资源\nGoogle 的 OAuth2.0 登录方式 1 进入 Google Cloud Platform 创建一个项目\n2 进入 API 与服务界面，选择凭据管理，点击创建凭据，选择 OAuth 2.0 客户端 ID\n3 应用类型为 web 应用，已获授权的 JavaScript 来源为 http://localhost:3000, 已获授权的重定向 URI 为 http://localhost:3000/GoogleCallback\n4 记录下你的客户端 id 和客户端密钥，这些信息可以在 Google Cloud Platform 中找到\n5 完整代码如下：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;golang.org/x/oauth2\u0026#34; ) const htmlIndex = `\u0026lt;html\u0026gt;\u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;/GoogleLogin\u0026#34;\u0026gt;Log in with Google\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; ` var endpotin = oauth2.Endpoint{ AuthURL: \u0026#34;https://accounts.google.com/o/oauth2/auth\u0026#34;, TokenURL: \u0026#34;https://oauth2.googleapis.com/token\u0026#34;, } var googleOauthConfig = \u0026amp;oauth2.Config{ ClientID: \u0026#34;287161932061-gr3l32h40p1uc82m3pd81n4ubju2qqia.apps.googleusercontent.com\u0026#34;, ClientSecret: \u0026#34;GGOCSPX-H3g4W5sCWOl8V7KMXNRkywrXkJ1Y\u0026#34;, RedirectURL: \u0026#34;http://localhost:3000/GoogleCallback\u0026#34;, Scopes: []string{\u0026#34;https://www.googleapis.com/auth/userinfo.profile\u0026#34;, \u0026#34;https://www.googleapis.com/auth/userinfo.email\u0026#34;, \u0026#34;https://www.googleapis.com/auth/analytics\u0026#34;}, Endpoint: endpotin, } const oauthStateString = \u0026#34;random\u0026#34; func main() { http.HandleFunc(\u0026#34;/\u0026#34;, handleMain) http.HandleFunc(\u0026#34;/GoogleLogin\u0026#34;, handleGoogleLogin) http.HandleFunc(\u0026#34;/GoogleCallback\u0026#34;, handleGoogleCallback) log.Println(http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil)) } func handleMain(w http.ResponseWriter, r *http.Request) { io.WriteString(w, htmlIndex) } func handleGoogleLogin(w http.ResponseWriter, r *http.Request) { url := googleOauthConfig.AuthCodeURL(oauthStateString) log.Println(url) http.Redirect(w, r, url, http.StatusTemporaryRedirect) } func handleGoogleCallback(w http.ResponseWriter, r *http.Request) { state := r.FormValue(\u0026#34;state\u0026#34;) if state != oauthStateString { log.Printf(\u0026#34;invalid oauth state, expected \u0026#39;%s\u0026#39;, got \u0026#39;%s\u0026#39;\u0026#34;, oauthStateString, state) http.Redirect(w, r, \u0026#34;/\u0026#34;, http.StatusTemporaryRedirect) return } code := r.FormValue(\u0026#34;code\u0026#34;) log.Println(code) token, err := googleOauthConfig.Exchange(context.Background(), code) if err != nil { log.Printf(\u0026#34;Code exchange failed with %v\u0026#34;, err) http.Redirect(w, r, \u0026#34;/\u0026#34;, http.StatusTemporaryRedirect) return } log.Println(token) response, err := http.Get(\u0026#34;https://www.googleapis.com/oauth2/v2/userinfo?access_token=\u0026#34; + token.AccessToken) defer response.Body.Close() contents, err := ioutil.ReadAll(response.Body) fmt.Fprintf(w, \u0026#34;Content: %s\\n\u0026#34;, contents) } 6 运行代码，访问 localhost:3000，点击 Log in with Google，就会进入 Google 授权登陆界面。同意授权后，就会显示你的信息。\n小结 本篇文章主要简单使用 OAuth2.0 进行 Google 账户登陆。\n参考 https://developers.google.com/identity/protocols/oauth2 ","permalink":"https://jasminides.com/posts/google_oauth2-%E5%AE%9E%E8%B7%B5/","summary":"\u003cp\u003e本篇文章主要介绍了 OAuth2.0 和 使用 Google 的 OAuth2.0 登录方式。\u003c/p\u003e\n\u003ch2 id=\"oauth20-介绍\"\u003eOAuth2.0 介绍\u003c/h2\u003e\n\u003cp\u003eOAuth 2.0 是 OAuth 协议的下一版本，但不向下兼容 OAuth 1.0。OAuth 2.0 关注客户端开发者的简易性，同时为 Web 应用、桌面应用、手机和智能设备提供专门的认证流程。\u003c/p\u003e\n\u003cp\u003eFacebook 的新的 Graph API 只支持 OAuth 2.0，Google 在 2011 年 3 月也宣布 Google API 对 OAuth 2.0 的支持，Windows Live 也支持 OAuth 2.0。\u003c/p\u003e\n\u003cp\u003e在认证和授权的过程中涉及的三方包括：\n1、服务提供方，用户使用服务提供方来存储受保护的资源，如照片，视频，联系人列表。\n2、用户，存放在服务提供方的受保护的资源的拥有者。\n3、客户端，要访问服务提供方资源的第三方应用，通常是网站，如提供照片打印服务的网站。在认证过程之前，客户端要向服务提供者申请客户端标识。\u003c/p\u003e\n\u003cp\u003e使用 OAuth 进行认证和授权的过程如下所示：\u003c/p\u003e\n\u003cp\u003e（A）用户打开客户端以后，客户端要求用户给予授权。\n（B）用户同意给予客户端授权。\n（C）客户端使用上一步获得的授权，向认证服务器申请令牌。\n（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。\n（E）客户端使用令牌，向资源服务器申请获取资源。\n（F）资源服务器确认令牌无误，同意向客户端开放资源\u003c/p\u003e\n\u003ch2 id=\"google-的-oauth20-登录方式\"\u003eGoogle 的 OAuth2.0 登录方式\u003c/h2\u003e\n\u003cp\u003e1 进入 Google Cloud Platform 创建一个项目\u003c/p\u003e\n\u003cp\u003e2 进入 API 与服务界面，选择凭据管理，点击创建凭据，选择 OAuth 2.0 客户端 ID\u003c/p\u003e","title":"Google_OAuth2 实践"},{"content":"本篇文章主要讲解在 go 语言中进行模糊测试的基础知识。通过模糊测试，随机数据会针对您的测试运行，以尝试找出漏洞或导致崩溃的输入。可以通过模糊测试发现的一些漏洞示例包括 SQL 注入、buffer overflow、拒绝服务和 cross-site scripting 攻击。\n想要在 go 中使用模糊测试，需要安装 go1.18beta1 以上版本，具体的安装就不过多叙述了。\n1 创建项目文件夹\n我们创建一个名叫 fuzz-demo 的文件夹，并在其中创建一个名叫 main.go 的文件。\n2 输入代码\n在 main.go 中输入如下代码：\npackage main import \u0026#34;fmt\u0026#34; func Reverse(s string) string { b := []byte(s) for i, j := 0, len(b)-1; i \u0026lt; len(b)/2; i, j = i+1, j-1 { b[i], b[j] = b[j], b[i] } return string(b) } func main() { input := \u0026#34;quick quick brown fox jumped over the lazy dog\u0026#34; rev := Reverse(input) doubleRev := Reverse(rev) fmt.Printf(\u0026#34;原来: %q\\n\u0026#34;, input) fmt.Printf(\u0026#34;反转: %q\\n\u0026#34;, rev) fmt.Printf(\u0026#34;再反转: %q\\n\u0026#34;, doubleRev) } Reverse 函数的作用就是对字符串进行反转。\n3 运行代码，可以看到如下输出： 4 编写单元测试，我们为 Reverse 函数编写了一个单元测试。如下：\npackage main import \u0026#34;testing\u0026#34; func TestReverse(t *testing.T) { type args struct { s string } tests := []struct { name string args args want string }{ {\u0026#34;test1\u0026#34;, args{\u0026#34;Hello, world\u0026#34;}, \u0026#34;dlrow ,olleH\u0026#34;}, {\u0026#34;test2\u0026#34;, args{\u0026#34; \u0026#34;}, \u0026#34; \u0026#34;}, {\u0026#34;test3\u0026#34;, args{\u0026#34;!12345\u0026#34;}, \u0026#34;54321!\u0026#34;}, } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { if got := Reverse(tt.args.s); got != tt.want { t.Errorf(\u0026#34;Reverse() = %v, want %v\u0026#34;, got, tt.want) } }) } } 5 将单元测试修改为模糊测试\n单元测试有局限性，即每个输入都必须由开发人员添加到测试中。模糊测试的一个好处是它可以为您的代码提供输入，并且可以识别您提出的测试用例没有达到的边缘用例。\n模糊测试代码如下：\nfunc FuzzReverse(f *testing.F) { testcases := []string{\u0026#34;Hello, world\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;!12345\u0026#34;} for _, tc := range testcases { f.Add(tc) } f.Fuzz(func (t *testing.T, orig string) { rev := Reverse(orig) doubleRev := Reverse(rev) if orig != doubleRev { t.Errorf(\u0026#34;Before: %q, after: %q\u0026#34;, orig, doubleRev) } if utf8.ValidString(orig) \u0026amp;\u0026amp; !utf8.ValidString(rev) { t.Errorf(\u0026#34;Reverse produced invalid UTF-8 string %q\u0026#34;, rev) } }) } 模糊测试 也有一些限制。在您的单元测试中，您可以预测 Reverse 函数的预期输出，并验证实际输出是否满足这些预期。\n例如，在测试用例 Reverse(\u0026ldquo;Hello, world\u0026rdquo;) 中，单元测试将返回指定为\u0026quot;dlrow ,olleH\u0026quot;.\n模糊测试时，您无法预测预期输出，因为您无法控制输入。\n但是，Reverse 您可以在模糊测试中验证函数的一些属性。在这个模糊测试中检查的两个属性是：\n1 将字符串反转两次保留原始值 2 反转的字符串将其状态保留为有效的 UTF-8。 注意单元测试和模糊测试之间的语法差异：\n该函数以 FuzzXxx 而不是 TestXxx 开头，取testing.F 而不是testing.T 在你期望看到 t.Run 执行的地方，你看到的是 f.Fuzz，它接受一个参数为* testing 的 fuzz 目标函数。T 和需要模糊化的类型。单元测试的输入使用 f.Add 作为种子语料库输入提供。\n6 运行测试\n使用命令 go test 进行测试以保证种子正确，如果您在该文件中有其他测试，您也可以运行 go test -run=FuzzReverse，并且您只想运行模糊测试。\n运行 go test -fuzz=Fuzz 进行模糊测试，测试失败，具体失败信息如下：\nFailing input written to testdata\\fuzz\\FuzzReverse\\09f84a1d1fc1c0a975a2de415e883bfc189bb7d17eaad24d85b68a17fd81c8f9 To re-run: go test -run=FuzzReverse/09f84a1d1fc1c0a975a2de415e883bfc189bb7d17eaad24d85b68a17fd81c8f9 FAIL exit status 1 FAIL github.com/overstarry/funzz-demo 0.950s 模糊测试时发生故障，导致问题的输入被写入将在下次运行的种子语料库文件中 go test，即使没有-fuzz 标志也是如此。要查看导致失败的输入，请在编辑器中打开 testdata/fuzz/FuzzReverse 目录的语料库文件。\ngo test fuzz v1 string(\u0026#34;扖\u0026#34;) 语料库文件的第一行表示编码版本。以下每一行代表构成语料库条目的每种类型的值。由于 fuzz target 只需要 1 个输入，因此版本之后只有 1 个值。\n不使用 -fuzz 运行测试，这次测试将会自动使用模糊测试失败的语料。\n7 修改函数的错误\n接下来对代码进行修复以通过测试，修复后的代码如下：\nfunc Reverse(s string) (string, error) { if !utf8.ValidString(s) { return s, errors.New(\u0026#34;input is not valid UTF-8\u0026#34;) } r := []rune(s) for i, j := 0, len(r)-1; i \u0026lt; len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r), nil } 新的模糊测试代码如下：\npackage main import ( \u0026#34;testing\u0026#34; \u0026#34;unicode/utf8\u0026#34; ) func FuzzReverse(f *testing.F) { testcases := []string {\u0026#34;Hello, world\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;!12345\u0026#34;} for _, tc := range testcases { f.Add(tc) } f.Fuzz(func(t *testing.T, orig string) { rev, err1 := Reverse(orig) if err1 != nil { return } doubleRev, err2 := Reverse(rev) if err2 != nil { return } if orig != doubleRev { t.Errorf(\u0026#34;Before: %q, after: %q\u0026#34;, orig, doubleRev) } if utf8.ValidString(orig) \u0026amp;\u0026amp; !utf8.ValidString(rev) { t.Errorf(\u0026#34;Reverse produced invalid UTF-8 string %q\u0026#34;, rev) } }) } 再次运行模糊测试，可以看到所有的测试都通过了。\n小结 本篇文章主要介绍在 go 中如何进行模糊测试。完整代码：https://github.com/overstarry/fuzz-demo\n参考 https://zh.wikipedia.org/zh-hans/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95 https://go.dev/doc/fuzz/#requirements ","permalink":"https://jasminides.com/posts/go-%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/","summary":"\u003cp\u003e本篇文章主要讲解在 go 语言中进行模糊测试的基础知识。通过模糊测试，随机数据会针对您的测试运行，以尝试找出漏洞或导致崩溃的输入。可以通过模糊测试发现的一些漏洞示例包括 SQL 注入、buffer overflow、拒绝服务和\ncross-site scripting 攻击。\u003c/p\u003e\n\u003cp\u003e想要在 go 中使用模糊测试，需要安装 go1.18beta1 以上版本，具体的安装就不过多叙述了。\u003c/p\u003e\n\u003ch2\u003e\u003c/h2\u003e\n\u003cp\u003e1 创建项目文件夹\u003c/p\u003e\n\u003cp\u003e我们创建一个名叫 \u003ccode\u003efuzz-demo\u003c/code\u003e 的文件夹，并在其中创建一个名叫 \u003ccode\u003emain.go\u003c/code\u003e 的文件。\u003c/p\u003e\n\u003cp\u003e2 输入代码\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003emain.go\u003c/code\u003e 中输入如下代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []byte(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e string(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003einput\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;quick quick brown fox jumped over the lazy dog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003einput\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edoubleRev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;原来: %q\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einput\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;反转: %q\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;再反转: %q\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edoubleRev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eReverse 函数的作用就是对字符串进行反转。\u003c/p\u003e","title":"Go 模糊测试"},{"content":"什么是 Pyroscope? Pyroscope 是一个开源的持续分析系统，使用 Go 语言实现。服务端使用 web 页面查看，提供丰富的分析的功能，客户端提供 Go、Java、Python、Ruby、PHP、.NET 等多种语言的支持，并且支持 PUSH、PULL 两种采集方式。\nPyroscope 是一个开源的持续性能剖析平台。它能够帮你：\n找出源代码中的性能问题和瓶颈 解决 CPU 利用率高的问题 理解应用程序的调用树（call tree） 追踪随一段时间内变化的情况 特性：\n可以存储来自多个应用程序的多年剖析数据 你可以一次查看多年的数据或单独查看特定的事件 较低的 CPU 开销 数据压缩效率高，磁盘空间要求低 快捷的 UI 界面 部署架构图：\nPyroscope server 安装 Pyroscope server 端可以通过 docker 安装：\ndocker run -it -p 4040:4040 pyroscope/pyroscope:latest server\n也可以在各中操作系统中直接安装。\n比如 Mac:\nbrew install pyroscope-io/brew/pyroscope brew services start pyroscope-server 各 Liunx 发行版也方便安装\n比如 ubuntu:\nwget https://dl.pyroscope.io/release/pyroscope_0.10.2_amd64.deb sudo apt-get install ./pyroscope_0.10.2_amd64.deb 安装完成后，就可以通过 web 界面访问了：http://localhost:4040, 你可以通过配置文件更改监听端口以及其它一些配置项。\nPyroscope 客户端实践 Pyroscope 提供了多种客户端，比如 Go、Java、Python、Ruby、PHP、.NET 等多种语言的支持，并且支持 PUSH、PULL 两种采集方式。这里介绍 GO 语言的客户端实例，采用 PUSH 的方式。\nGO 客户端的 PUSH 方式通过使用标准 runtime/pprof 包来收集分析数据。\n1 安装 go 客户端\ngo get github.com/pyroscope-io/client/pyroscope 2 在你的项目的 main.go 文件中，添加如下代码：\npyroscope.Start(pyroscope.Config{ ApplicationName: \u0026#34;simple.golang.app\u0026#34;, ServerAddress: \u0026#34;http://pyroscope-server:4040\u0026#34;, Logger: pyroscope.StandardLogger, ProfileTypes: []pyroscope.ProfileType{ pyroscope.ProfileCPU, pyroscope.ProfileAllocObjects, pyroscope.ProfileAllocSpace, pyroscope.ProfileInuseObjects, pyroscope.ProfileInuseSpace, }, }) 3 完整代码\npackage main import ( \u0026#34;github.com/pyroscope-io/client/pyroscope\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { pyroscope.Start(pyroscope.Config{ ApplicationName: \u0026#34;simple.golang.app\u0026#34;, ServerAddress: \u0026#34;http://xx.xx.xx.xx:4040\u0026#34;, Logger: pyroscope.StandardLogger, ProfileTypes: []pyroscope.ProfileType{ pyroscope.ProfileCPU, pyroscope.ProfileAllocObjects, pyroscope.ProfileAllocSpace, pyroscope.ProfileInuseObjects, pyroscope.ProfileInuseSpace, }, }) http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;Hello, world!\u0026#34;)) }) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } 4 浏览器打开相应的 dashboard 界面，就可以看到相应的监控数据了 参考 https://github.com/pyroscope-io/pyroscope ","permalink":"https://jasminides.com/posts/pyroscope-%E6%8C%81%E7%BB%AD%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/","summary":"\u003ch2 id=\"什么是-pyroscope\"\u003e什么是 Pyroscope?\u003c/h2\u003e\n\u003cp\u003ePyroscope 是一个开源的持续分析系统，使用 Go 语言实现。服务端使用 web 页面查看，提供丰富的分析的功能，客户端提供 Go、Java、Python、Ruby、PHP、.NET 等多种语言的支持，并且支持 PUSH、PULL 两种采集方式。\u003c/p\u003e\n\u003cp\u003ePyroscope 是一个开源的持续性能剖析平台。它能够帮你：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找出源代码中的性能问题和瓶颈\u003c/li\u003e\n\u003cli\u003e解决 CPU 利用率高的问题\u003c/li\u003e\n\u003cli\u003e理解应用程序的调用树（call tree）\u003c/li\u003e\n\u003cli\u003e追踪随一段时间内变化的情况\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可以存储来自多个应用程序的多年剖析数据\u003c/li\u003e\n\u003cli\u003e你可以一次查看多年的数据或单独查看特定的事件\u003c/li\u003e\n\u003cli\u003e较低的 CPU 开销\u003c/li\u003e\n\u003cli\u003e数据压缩效率高，磁盘空间要求低\u003c/li\u003e\n\u003cli\u003e快捷的 UI 界面\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e部署架构图：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/pyroscope/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"pyroscope-server-安装\"\u003ePyroscope server 安装\u003c/h2\u003e\n\u003cp\u003ePyroscope server 端可以通过 docker 安装：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e docker run -it -p 4040:4040 pyroscope/pyroscope:latest server\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e也可以在各中操作系统中直接安装。\u003c/p\u003e\n\u003cp\u003e比如 Mac:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install pyroscope-io/brew/pyroscope\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew services start pyroscope-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e各 Liunx 发行版也方便安装\u003c/p\u003e\n\u003cp\u003e比如 ubuntu:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://dl.pyroscope.io/release/pyroscope_0.10.2_amd64.deb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get install ./pyroscope_0.10.2_amd64.deb\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装完成后，就可以通过 web 界面访问了：http://localhost:4040, 你可以通过配置文件更改监听端口以及其它一些配置项。\u003c/p\u003e","title":"Pyroscope 持续分析平台"},{"content":"起因 在一次使用虚拟机的时候，发现 Linux 系统进入了 Initramfs，无法正常进入系统，推测可能是系统异常关机导致磁盘文件损坏导致的。\n解决 网上搜寻了一些解决方法，普遍的推荐方法是使用 Linux 命令 fsck 命令来修复磁盘文件。\n费了好大劲进入另一个系统使用 fsck.ext4 -f /dev/sda1 来检查修复磁盘文件 (我所使用的 linux 系统磁盘是 ext4 格式的)。\n接下来我来介绍下 fsck 的使用。\nfsck fsck（file system consistency check）是 Unix 和类 Unix 系统上用于检查文件系统完整性的工具。\n语法：fsck [选项] [文件系统]\n常见参数：\n-f 强制检查文件系统，不管是否有损坏 -p 自动修复文件系统错误 -q 做一个快速检查，以确定文件系统是否被干净地卸载。 -y 关闭互动模式，询问全部选择 y 参考 https://web.archive.org/web/20150529001726/http://www.manpagez.com/man/8/fsck/ https://zh.wikipedia.org/zh-hans/Fsck https://zh.wikipedia.org/wiki/Unix%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8 ","permalink":"https://jasminides.com/posts/fsck/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e在一次使用虚拟机的时候，发现 Linux 系统进入了 Initramfs，无法正常进入系统，推测可能是系统异常关机导致磁盘文件损坏导致的。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e网上搜寻了一些解决方法，普遍的推荐方法是使用 Linux 命令 fsck 命令来修复磁盘文件。\u003c/p\u003e\n\u003cp\u003e费了好大劲进入另一个系统使用 fsck.ext4 -f /dev/sda1 来检查修复磁盘文件 (我所使用的 linux 系统磁盘是 ext4 格式的)。\u003c/p\u003e\n\u003cp\u003e接下来我来介绍下 fsck 的使用。\u003c/p\u003e\n\u003ch3 id=\"fsck\"\u003efsck\u003c/h3\u003e\n\u003cp\u003efsck（file system consistency check）是 Unix 和类 Unix 系统上用于检查文件系统完整性的工具。\u003c/p\u003e\n\u003cp\u003e语法：fsck [选项]  [文件系统]\u003c/p\u003e\n\u003cp\u003e常见参数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e -f          强制检查文件系统，不管是否有损坏\n\n -p          自动修复文件系统错误\n\n -q          做一个快速检查，以确定文件系统是否被干净地卸载。\n\n -y          关闭互动模式，询问全部选择 y\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20150529001726/http://www.manpagez.com/man/8/fsck/\"\u003ehttps://web.archive.org/web/20150529001726/http://www.manpagez.com/man/8/fsck/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zh.wikipedia.org/zh-hans/Fsck\"\u003ehttps://zh.wikipedia.org/zh-hans/Fsck\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zh.wikipedia.org/wiki/Unix%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8\"\u003ehttps://zh.wikipedia.org/wiki/Unix%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Fsck"},{"content":"从本篇开始，我将介绍加强 gRPC 的安全性的一系列措施。本篇介绍使用 TLS 加密 gRPC 通信的第一篇文章：gRPC 单向安全连接。\nTLS 协议介绍 传输层安全性协议（英语：Transport Layer Security，缩写作 TLS），及其前身安全套接层（Secure Sockets Layer，缩写作 SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。网景公司（Netscape）在 1994 年推出首版网页浏览器，网景导航者时，推出 HTTPS 协议，以 SSL 进行加密，这是 SSL 的起源。IETF 将 SSL 进行标准化，1999 年公布第一版 TLS 标准文件。随后又公布 RFC 5246（2008 年 8 月）与 RFC 6176（2011 年 3 月）。在浏览器、邮箱、即时通信、VoIP、网络传真等应用程序中，广泛支持这个协议。主要的网站，如 Google、Facebook 等也以这个协议来创建安全连线，发送数据。目前已成为互联网上保密通信的工业标准。\nSSL 包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用 X.509 认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。\n单向安全连接 通过安全的连接进行传输数据非常重要，那么如何在 gRPC 中使用 TLS 保护 gRPC 通信呢？TLS 认证机制集成在了 gRPC 库中，这使得 gRPC 可以很方便使用 TLS 进行安全连接。 客户端和服务端之间的安全传输可以采用单向或双向的方式来实现。本文主要介绍 单向安全连接。\n在单向安全连接中，只有客户端会校验服务端，以确保它所接收的数据来自预期的服务器，在建立连接时，服务端会与客户端共享其公开证书，客户端会校验收到的证书。这是通过证书授权中心完成的。证书校验完成后，客户端会使用密钥加密数据。\n要启用 TLS，需要证书和密钥 (xx.key,xx.pem/xx.crt),前者是用于签名和扔着公钥，后者用于分发自签名 X.509 公钥。证书和密钥的生成这里就不过多介绍了，需要的可以自行了解。\n在 gRPC 服务端启用单向安全连接 在 gRPC 服务端启用单向安全连接的主要流程如下：\n1 读取和解析公钥 - 私钥，创建启用 TLS 的证书 2 添加证书作为 TLS 服务凭证，为所有连接启用 TLS. 3 通过 TLS 凭证创建新的 gRPC 连接 接下来的流程跟普通的流程差不多，就不多介绍了，直接上代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;crypto/tls\u0026#34; \u0026#34;errors\u0026#34; wrapper \u0026#34;github.com/golang/protobuf/ptypes/wrappers\u0026#34; \u0026#34;github.com/google/uuid\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;google.golang.org/grpc/credentials\u0026#34; pb \u0026#34;grpc-demo/proto\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; ) const ( port = \u0026#34;:50051\u0026#34; crtFile = \u0026#34;./server.crt\u0026#34; keyFile = \u0026#34;./server.key\u0026#34; ) type server struct { pb.UnimplementedProductInfoServer productMap map[string]*pb.Product } func (s *server) AddProduct(ctx context.Context, in *pb.Product) (*wrapper.StringValue, error) { out, err := uuid.NewUUID() if err != nil { log.Fatal(err) } in.Id = out.String() if s.productMap == nil { s.productMap = make(map[string]*pb.Product) } s.productMap[in.Id] = in return \u0026amp;wrapper.StringValue{Value: in.Id}, nil } func (s *server) GetProduct(ctx context.Context, in *wrapper.StringValue) (*pb.Product, error) { value, exists := s.productMap[in.Value] if exists { return value, nil } return nil, errors.New(\u0026#34;Product does not exist for the ID\u0026#34; + in.Value) } func main() { cert, err := tls.LoadX509KeyPair(crtFile, keyFile) if err != nil { log.Fatalf(\u0026#34;failed to load key pair: %s\u0026#34;, err) } opts := []grpc.ServerOption{ grpc.Creds(credentials.NewServerTLSFromCert(\u0026amp;cert)), } s := grpc.NewServer(opts...) pb.RegisterProductInfoServer(s, \u0026amp;server{}) lis, err := net.Listen(\u0026#34;tcp\u0026#34;, port) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } 在客户端启用单向安全连接 为了与服务器连接，客户都需要服务端的自认证公钥。具体流程如下：\n1 读取解析公开证书并启用 TLS 证书 2 以 DialOption 的形式添加传输凭证 3 通过 dial option 建立连接\n具体代码如下：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;google.golang.org/grpc/credentials\u0026#34; pb \u0026#34;grpc-demo/proto\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; wrapper \u0026#34;github.com/golang/protobuf/ptypes/wrappers\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; ) const ( address = \u0026#34;localhost:50051\u0026#34; hostname = \u0026#34;localhost\u0026#34; crtFile = \u0026#34;./server.crt\u0026#34; ) func main() { creds, err := credentials.NewClientTLSFromFile(crtFile, hostname) if err != nil { log.Fatalf(\u0026#34;failed to load credentials: %v\u0026#34;, err) } opts := []grpc.DialOption{ // transport credentials. grpc.WithTransportCredentials(creds), } conn, err := grpc.Dial(address, opts...) if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer conn.Close() c := pb.NewProductInfoClient(conn) name := \u0026#34;Sumsung S10\u0026#34; description := \u0026#34;Samsung Galaxy S10 is the latest smart phone, launched in February 2019\u0026#34; price := float32(700.0) ctx, cancel := context.WithTimeout(context.Background(), time.Second) defer cancel() r, err := c.AddProduct(ctx, \u0026amp;pb.Product{Name: name, Description: description, Price: price}) if err != nil { log.Fatalf(\u0026#34;Could not add product: %v\u0026#34;, err) } log.Printf(\u0026#34;Product ID: %s added successfully\u0026#34;, r.Value) product, err := c.GetProduct(ctx, \u0026amp;wrapper.StringValue{Value: r.Value}) if err != nil { log.Fatalf(\u0026#34;Could not get product: %v\u0026#34;, err) } log.Printf(\u0026#34;Product: \u0026#34;, product.String()) } 与原有未使用 TLS 相比，只需修改一些代码即可。\n小结 本篇文章介绍了在 gRPC 中启用 TLS 的第一篇文章 - 单向安全连接。主要介绍了如何在原有代码上进行修改和一些流程。\n","permalink":"https://jasminides.com/posts/grpc-%E5%8D%95%E5%90%91%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5/","summary":"\u003cp\u003e从本篇开始，我将介绍加强 gRPC 的安全性的一系列措施。本篇介绍使用 TLS 加密 gRPC 通信的第一篇文章：gRPC 单向安全连接。\u003c/p\u003e\n\u003ch2 id=\"tls-协议介绍\"\u003eTLS 协议介绍\u003c/h2\u003e\n\u003cp\u003e传输层安全性协议（英语：Transport Layer Security，缩写作 TLS），及其前身安全套接层（Secure Sockets\nLayer，缩写作 SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。网景公司（Netscape）在 1994 年推出首版网页浏览器，网景导航者时，推出 HTTPS 协议，以 SSL 进行加密，这是 SSL 的起源。IETF 将 SSL 进行标准化，1999 年公布第一版 TLS 标准文件。随后又公布 RFC\n5246（2008 年 8 月）与 RFC\n6176（2011 年 3 月）。在浏览器、邮箱、即时通信、VoIP、网络传真等应用程序中，广泛支持这个协议。主要的网站，如 Google、Facebook 等也以这个协议来创建安全连线，发送数据。目前已成为互联网上保密通信的工业标准。\u003c/p\u003e\n\u003cp\u003eSSL 包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用 X.509 认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session\nkey）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。\u003c/p\u003e\n\u003ch2 id=\"单向安全连接\"\u003e单向安全连接\u003c/h2\u003e\n\u003cp\u003e通过安全的连接进行传输数据非常重要，那么如何在 gRPC 中使用 TLS 保护 gRPC 通信呢？TLS 认证机制集成在了 gRPC 库中，这使得 gRPC 可以很方便使用 TLS 进行安全连接。\n客户端和服务端之间的安全传输可以采用单向或双向的方式来实现。本文主要介绍 \u003ccode\u003e单向安全连接\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在单向安全连接中，只有客户端会校验服务端，以确保它所接收的数据来自预期的服务器，在建立连接时，服务端会与客户端共享其公开证书，客户端会校验收到的证书。这是通过证书授权中心完成的。证书校验完成后，客户端会使用密钥加密数据。\u003c/p\u003e\n\u003cp\u003e要启用 TLS，需要证书和密钥 (xx.key,xx.pem/xx.crt),前者是用于签名和扔着公钥，后者用于分发自签名 X.509 公钥。证书和密钥的生成这里就不过多介绍了，需要的可以自行了解。\u003c/p\u003e","title":"GRPC 单向安全连接"},{"content":"本篇文章讲述了如何将 loki 和 tempo 结合进行分布式追踪。日志和 trace 结合使用的方案有很多，由于 loki 官方自带了 trace 结合的配置，不用进行过多的二次开发，所以这里采用 loki 和 tempo 结合的方案。\nloki 和 tempo 是什么就不过多介绍，安装流程也省略。这里主要讲如何配置。\n配置 这里我们采用普遍的方案，使用 grafana 来展示日志和 trace。\n配置 loki 在 grafana , 打开数据源配置界面，新建 loki 数据源，并且配置好地址，如下图所示点击 Save \u0026amp; Test, 如果配置正确，则会出现 Data source connected and labels found. 标志。\n配置 tempo 同配置 loki 一致，新建 grafana 数据源，选择 tempo，配置好相应的 url 数据，点击测试，出现 Data source connected and labels found. 标志，就表示配置成功。\n在 tempo 配置页面的底部可以看到一个配置栏目 Trace to logs，可以选择相应的日志数据源，这里我们选择 loki.\n使用 配置完成后，我们在 Explore 界面选择 loki，搜寻相应的日志，如下图所示，可以看到相应的日志。\n我们选择一条日志，查看结构化日志的字段，可以看到 trace_id，但无法展示相应的 链路追踪。\n解决 这是为什么呢，查看了相应的文档，发现 loki 默认的 trace id 字段名称为 TraceID . 其它字段不会进行相应的解析。\n我们有 2 种方法：\n1 修改应用程序的 log 的 trace id 字段名称，比如修改为 TraceID, 但这样如果应用较多的话，修改比较麻烦和消耗时间\n2 添加 loki 数据源的 Derived fields 配置，根据旧的 trace_id 字段派生出新的 TraceID 字段。\n这里我们采用了第二种方法，具体配置如下：\n配置完成后，我们重新打开日志查询界面，可以看到已经有了相应的按钮。\n点击按钮，旁边会出现相应的链路。\n小结 https://grafana.com/oss/tempo/ https://opensource.com/article/21/2/tempo-distributed-tracing https://grafana.com/blog/2020/03/31/how-to-successfully-correlate-metrics-logs-and-traces-in-grafana/ ","permalink":"https://jasminides.com/posts/log_and_trace/","summary":"\u003cp\u003e本篇文章讲述了如何将 loki 和 tempo 结合进行分布式追踪。日志和 trace 结合使用的方案有很多，由于 loki 官方自带了 trace 结合的配置，不用进行过多的二次开发，所以这里采用 loki 和\ntempo 结合的方案。\u003c/p\u003e\n\u003cp\u003eloki 和 tempo 是什么就不过多介绍，安装流程也省略。这里主要讲如何配置。\u003c/p\u003e\n\u003ch2 id=\"配置\"\u003e配置\u003c/h2\u003e\n\u003cp\u003e这里我们采用普遍的方案，使用 grafana 来展示日志和 trace。\u003c/p\u003e\n\u003ch3 id=\"配置-loki\"\u003e配置 loki\u003c/h3\u003e\n\u003cp\u003e在 grafana , 打开数据源配置界面，新建 loki 数据源，并且配置好地址，如下图所示点击 Save \u0026amp; Test, 如果配置正确，则会出现 Data source connected and labels found. 标志。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/trace_log/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"配置-tempo\"\u003e配置 tempo\u003c/h3\u003e\n\u003cp\u003e同配置 loki 一致，新建 grafana 数据源，选择 tempo，配置好相应的 url 数据，点击测试，出现 Data source connected and labels found. 标志，就表示配置成功。\u003c/p\u003e\n\u003cp\u003e在 tempo 配置页面的底部可以看到一个配置栏目 Trace to logs，可以选择相应的日志数据源，这里我们选择 loki.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/trace_log/img_1.png\" alt=\"img_1.png\"  /\u003e\n\u003c/p\u003e","title":"Log_and_trace"},{"content":"起因 在我们日常使用 k8s 中，可能会遇到这样的情况：在删除 namespace 时，往往会遇到资源没有被删除的情况，资源处于 terminating 的状态，这时我们该如何解决了，寻找到的解决方法往往是如下：\n1 运行以下命令查看处于 terminating 状态的资源 (这里以 namespace 为例):\nkubectl get namespaces\n2 选择一个 Terminating namespace，并查看 namespace 中的 finalizer。运行以下命令：\nkubectl get namespace \u0026lt;terminating-namespace\u0026gt; -o yaml\n得到类似这样的信息：\napiVersion: v1 kind: Namespace metadata: creationTimestamp: \u0026#34;2021-01-20T15:18:06Z\u0026#34; deletionTimestamp: \u0026#34;2021-01-21T02:50:02Z\u0026#34; name: \u0026lt;terminating-namespace\u0026gt; resourceVersion: \u0026#34;3249493\u0026#34; selfLink: /api/v1/namespaces/knative-eventing uid: f300ea38-c8c2-4653-b432-b66103e412db spec: finalizers: - kubernetes status: phase: Terminating 3 导出 json 格式到 tmp.json:\nkubectl get namespace \u0026lt;terminating-namespace\u0026gt; -o json \u0026gt; tmp.json\n4 编辑 tmp.json 删除 finalizers 字段的值\n5 开启 proxy: kubectl proxy\n6 打开新终端，输入以下命令：\ncurl -k -H \u0026quot;Content-Type: application/json\u0026quot; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/\u0026lt;terminating-namespace\u0026gt;/finalize\n7 检查该 namespace 是否被删除：\nkubectl get namespace \u0026lt;terminating-namespace\u0026gt;\n可以看到 namespace 已经被删除了\nFinalizers 是什么 从上面可以得知删除 finalizers 字段就能顺利删除 terminating 状态下的资源，这是为什么呢？接下来由我来简单介绍一下。\nFinalizer 是带有命名空间的键，告诉 Kubernetes 等到特定的条件被满足后，再完全删除被标记为删除的资源。Finalizer 提醒控制器清理被删除的对象拥有的资源。\n当你告诉 Kubernetes 删除一个指定了 Finalizer 的对象时，Kubernetes API 会将该对象标记为删除，使其进入只读状态。此时控制平面或其他组件会采取 Finalizer 所定义的行动，而目标对象仍然处于终止中（Terminating）的状态。这些行动完成后，控制器会删除目标对象相关的 Finalizer。当 metadata.finalizers 字段为空时，Kubernetes 认为删除已完成。\n你可以使用 Finalizer 控制资源的垃圾收集。例如，你可以定义一个 Finalizer，在删除目标资源前清理相关资源或基础设施。\nFinalizers 通常不指定要执行的代码。相反，它们通常是特定资源上的键的列表，类似于注解。Kubernetes 自动指定了一些 Finalizers，但你也可以指定你自己的。\nFinalizers 是如何工作的 在你使用资源清单创建资源时，可以在 metadata.finalizers 指定 Finalizers。当年删除资源时，k8s 相应的控制器会 修改对象，将你开始执行删除的时间添加到 metadata.deletionTimestamp 字段，将该对象标记为只读，直到其 metadata.finalizers 字段为空。 然后，控制器试图满足资源的 Finalizers 的条件。每当一个 Finalizer 的条件被满足时，控制器就会从资源的 finalizers 字段中删除该键。当该字段为空时，垃圾收集继续进行。你也可以使用 Finalizers 来阻止删除未被管理的资源。\n参考 https://medium.com/%E8%BC%95%E9%AC%86%E5%B0%8F%E5%93%81-pks%E8%88%87k8s%E7%9A%84%E9%BB%9E%E6%BB%B4/%E7%A7%BB%E9%99%A4%E8%A9%B2%E6%AD%BB%E7%9A%84terminating-namespace-c6594ebe351 https://cloud.tencent.com/developer/article/1802531 https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/finalizers/ ","permalink":"https://jasminides.com/posts/k8s_finalizers/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e在我们日常使用 k8s 中，可能会遇到这样的情况：在删除 namespace 时，往往会遇到资源没有被删除的情况，资源处于 terminating 的状态，这时我们该如何解决了，寻找到的解决方法往往是如下：\u003c/p\u003e\n\u003cp\u003e1 运行以下命令查看处于 terminating 状态的资源 (这里以 namespace 为例):\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e kubectl get namespaces\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e2 选择一个 Terminating namespace，并查看 namespace 中的 finalizer。运行以下命令：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e kubectl get namespace \u0026lt;terminating-namespace\u0026gt; -o yaml\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e得到类似这样的信息：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapiVersion: v1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekind: Namespace\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emetadata:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  creationTimestamp: \u0026#34;2021-01-20T15:18:06Z\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  deletionTimestamp: \u0026#34;2021-01-21T02:50:02Z\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  name: \u0026lt;terminating-namespace\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  resourceVersion: \u0026#34;3249493\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  selfLink: /api/v1/namespaces/knative-eventing\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  uid: f300ea38-c8c2-4653-b432-b66103e412db\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003espec:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  finalizers:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - kubernetes\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estatus:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  phase: Terminating\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e3 导出 json 格式到 tmp.json:\u003c/p\u003e","title":"K8s_Finalizers"},{"content":"从本篇文章开始，将由我来开始介绍访问控制框架的基础知识，本篇文章是 casbin 系列文章的第一篇，主要介绍一些 casbin 的概念和基础知识。\n概述 casbin 是一个开源的访问控制框架，它的目标是让开发人员可以更加简单的控制访问控制，支持多种访问控制模型，支持多种编程语言 (各种编程语言支持的程度可以查看官网的文档)。\ncasbin 可以\n支持自定义请求的格式，默认的请求格式为{subject, object, action}。 具有访问控制模型 model 和策略 policy 两个核心概念。 支持 RBAC 中的多层角色继承，不止主体可以有角色，资源也可以具有角色。 支持内置的超级用户 例如：root 或 administrator。超级用户可以执行任何操作而无需显式的权限声明。 支持多种内置的操作符，如 keyMatch，方便对路径式的资源进行管理，如 /foo/bar 可以映射到 /foo* Casbin 不支持的是：\n身份认证 authentication（即验证用户的用户名和密码），Casbin 只负责访问控制。应该有其他专门的组件负责身份认证，然后由 Casbin 进行访问控制，二者是相互配合的关系。\n管理用户列表或角色列表。Casbin 认为由项目自身来管理用户、角色列表更为合适，用户通常有他们的密码，但是 Casbin 的设计思想并不是把它作为一个存储密码的容器。而是存储 RBAC 方案中用户和角色之间的映射关系。\n工作原理 在 Casbin 中，访问控制模型被抽象为基于 PERM (Policy, Effect, Request, Matcher) 的一个文件。因此，切换或升级项目的授权机制与修改配置一样简单。您可以通过组合可用的模型来定制您自己的访问控制模型。例如，您可以在一个 model 中结合 RBAC 角色和 ABAC 属性，并共享一组 policy 规则。\nadapters 在 Casbin 中，策略存储作为 adapter(Casbin 的中间件) 实现。Casbin 用户可以使用 adapter 从存储中加载策略规则 (aka LoadPolicy()) 或者将策略规则保存到其中 (aka SavePolicy())。为了保持代码轻量级，我们没有把 adapter 代码放在主库中。\ncasbin 目前支持的官方的和第三方适配器有许多，这里只截取 go 相关的一部分适配器：\n可以看到支持的生态十分丰富。\n简单使用 接下来就由我来简单演示下 casbin 的使用\nmodel.conf 我们先创建 model.conf 文件，这个文件是访问模型，这里我采用了最简单的 ACL 访问控制模型，具体如下\n[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub \u0026amp;\u0026amp; r.obj == p.obj \u0026amp;\u0026amp; r.act == p.act policy.csv 我们采用 File Adapter 适配器来讲解，我们创建 policy.csv 文件来存储了特定的用户权限配置。具体如下：\np, alice, data1, read p, bob, data2, read 这里可以简单解释为 alice 拥有对 data1 的读权限，bob 拥有对 data2 的读权限。\nmain.go 我们来简单测试下，在我们的 main.go 文件中输入相应代码：\npackage main import ( \u0026#34;github.com/casbin/casbin/v2\u0026#34; \u0026#34;log\u0026#34; ) func main() { e, err := casbin.NewEnforcer(\u0026#34;./model.conf\u0026#34;, \u0026#34;./policy.csv\u0026#34;) if err != nil { panic(err) } sub := \u0026#34;alice\u0026#34; // 想要访问资源的用户。 obj := \u0026#34;data1\u0026#34; // 将被访问的资源。 act := \u0026#34;read\u0026#34; // 用户对资源执行的操作。 ok, err := e.Enforce(sub, obj, act) if err != nil { panic(err) } if ok == true { log.Println(\u0026#34;alice can read data1\u0026#34;) // 允许 alice 读取 data1 } else { log.Println(\u0026#34;alice can not read data1\u0026#34;) // 拒绝请求，抛出异常 } } 编译执行，输出：\n2022/01/12 17:22:52 alice can read data1 可以看到输出了正确的结果，我来修改下代码：\npackage main import ( \u0026#34;github.com/casbin/casbin/v2\u0026#34; \u0026#34;log\u0026#34; ) func main() { e, err := casbin.NewEnforcer(\u0026#34;./model.conf\u0026#34;, \u0026#34;./policy.csv\u0026#34;) if err != nil { panic(err) } sub := \u0026#34;alice\u0026#34; // 想要访问资源的用户。 obj := \u0026#34;data2\u0026#34; // 将被访问的资源。 act := \u0026#34;read\u0026#34; // 用户对资源执行的操作。 ok, err := e.Enforce(sub, obj, act) if err != nil { panic(err) } if ok == true { log.Println(\u0026#34;alice can read data2\u0026#34;) // 允许 alice 读取 data1 } else { log.Println(\u0026#34;alice can not read data2\u0026#34;) // 拒绝请求，抛出异常 } } 编译运行输出：2022/01/12 17:24:08 alice can not read data2 输出了 alice 不能读取 data2 资源\nEnt adapter 我们将 File Adapter 适配器改为 Ent adapter 看看效果，具体代码如下：\npackage main import ( \u0026#34;github.com/casbin/casbin/v2\u0026#34; entadapter \u0026#34;github.com/casbin/ent-adapter\u0026#34; \u0026#34;log\u0026#34; ) func main() { a, err := entadapter.NewAdapter(\u0026#34;postgres\u0026#34;, \u0026#34;host=127.0.0.1 user=postgres password=123456 dbname=casbin port=5432 sslmode=disable TimeZone=UTC\u0026#34;) if err != nil { panic(err) } e, err := casbin.NewEnforcer(\u0026#34;./model.conf\u0026#34;, a) if err != nil { panic(err) } sub := \u0026#34;alice\u0026#34; // 想要访问资源的用户。 obj := \u0026#34;data2\u0026#34; // 将被访问的资源。 act := \u0026#34;read\u0026#34; // 用户对资源执行的操作。 ok, err := e.Enforce(sub, obj, act) if err != nil { panic(err) } if ok == true { log.Println(\u0026#34;alice can read data2\u0026#34;) // 允许 alice 读取 data1 } else { log.Println(\u0026#34;alice can not read data2\u0026#34;) // 拒绝请求，抛出异常 } } 编译执行，查看数据库，可以看到产生了一个 casbin_rules 表，具体表结构如下：\n从这里可以看出 适配器的作用就是将 用户权限配置存储在不同的地方。\n小结 到这里，casbin 的第一篇文章就介绍到这里，主要介绍了 casbin 的概念和适配器，简单的演示了使用方法。\n本文的代码在这里可以看到：https://github.com/overstarry/casbin-demo\n参考 https://casbin.org/zh-CN/ https://github.com/overstarry/casbin-demo https://github.com/casbin/ent-adapter ","permalink":"https://jasminides.com/posts/casbin-%E5%AD%A6%E4%B9%A0-1/","summary":"\u003cp\u003e从本篇文章开始，将由我来开始介绍访问控制框架的基础知识，本篇文章是 casbin 系列文章的第一篇，主要介绍一些 casbin 的概念和基础知识。\u003c/p\u003e\n\u003ch2 id=\"概述\"\u003e概述\u003c/h2\u003e\n\u003cp\u003ecasbin 是一个开源的访问控制框架，它的目标是让开发人员可以更加简单的控制访问控制，支持多种访问控制模型，支持多种编程语言 (各种编程语言支持的程度可以查看官网的文档)。\u003c/p\u003e\n\u003cp\u003ecasbin 可以\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e支持自定义请求的格式，默认的请求格式为{subject, object, action}。\u003c/li\u003e\n\u003cli\u003e具有访问控制模型 model 和策略 policy 两个核心概念。\u003c/li\u003e\n\u003cli\u003e支持 RBAC 中的多层角色继承，不止主体可以有角色，资源也可以具有角色。\u003c/li\u003e\n\u003cli\u003e支持内置的超级用户 例如：root 或 administrator。超级用户可以执行任何操作而无需显式的权限声明。\u003c/li\u003e\n\u003cli\u003e支持多种内置的操作符，如 keyMatch，方便对路径式的资源进行管理，如 /foo/bar 可以映射到 /foo*\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCasbin 不支持的是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e身份认证 authentication（即验证用户的用户名和密码），Casbin 只负责访问控制。应该有其他专门的组件负责身份认证，然后由 Casbin 进行访问控制，二者是相互配合的关系。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e管理用户列表或角色列表。Casbin 认为由项目自身来管理用户、角色列表更为合适，用户通常有他们的密码，但是 Casbin 的设计思想并不是把它作为一个存储密码的容器。而是存储 RBAC 方案中用户和角色之间的映射关系。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"工作原理\"\u003e工作原理\u003c/h2\u003e\n\u003cp\u003e在 Casbin 中，访问控制模型被抽象为基于 PERM (Policy, Effect, Request, Matcher) 的一个文件。因此，切换或升级项目的授权机制与修改配置一样简单。您可以通过组合可用的模型来定制您自己的访问控制模型。例如，您可以在一个 model 中结合 RBAC 角色和 ABAC 属性，并共享一组 policy 规则。\u003c/p\u003e\n\u003ch2 id=\"adapters\"\u003eadapters\u003c/h2\u003e\n\u003cp\u003e在 Casbin 中，策略存储作为 adapter(Casbin 的中间件) 实现。Casbin 用户可以使用 adapter 从存储中加载策略规则 (aka LoadPolicy()) 或者将策略规则保存到其中 (aka SavePolicy())。为了保持代码轻量级，我们没有把 adapter 代码放在主库中。\u003c/p\u003e","title":"Casbin 学习 1"},{"content":"今天我来讲一讲在 golang 中如何在项目中引用私有仓库吧，在我们的实际生产开发中，往往需要在项目中引用内部代码管理平台上的仓库代码，接下来我来介绍如何在 golang 中使用私有仓库模块。\n设置 1 我们的私有代码往往存储在内部的代码管理平台 (如 gitlab, gittee 等) 上，假设我们的地址是 git.xx.vip. 接下来开始设置一些配置项。\n2 设置 GOPRIVATE 变量。\n我们先设置 GOPRIVATE 环境变量，GOPRIVATE 会将 GOPRIVATE 变量值所匹配的路径前缀视为私有模块，就不会使用代理和进行校验。设置了 GOPRIVATE 变量后，GONOPROXY 和 GONOSUMDB 环境变量 也会接收同样的值。\n3 设置 GOINSECURE 变量\n我们的 gitlab 等代码管理平台往往没有使用 https 协议，所以我们需要设置 GOINSECURE 变量，GOINSECURE 变量中的值以逗号分隔，其中的每一个值在 go get 时 不会进行 https 协议的校验，只会采用 http 协议。\n4 go get\n设置完以上步骤后，可以执行 go get 看看效果，具体命令： go get -v git.xx.vip/swords/xkratos\n可以看到相应的库已经顺利拉取成功，并且输出了相应的版本信息\n参考 https://go.dev/ref/mod https://go.zhangdeman.cn/archives/62430e03.html https://forum.golangbridge.org/t/using-go-get-to-retrieve-modules-packages-from-a-private-server/17896/6 https://github.com/GoogleCloudPlatform/govanityurls ","permalink":"https://jasminides.com/posts/go-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%A8%A1%E5%9D%97/","summary":"\u003cp\u003e今天我来讲一讲在 golang 中如何在项目中引用私有仓库吧，在我们的实际生产开发中，往往需要在项目中引用内部代码管理平台上的仓库代码，接下来我来介绍如何在 golang 中使用私有仓库模块。\u003c/p\u003e\n\u003ch2 id=\"设置\"\u003e设置\u003c/h2\u003e\n\u003cp\u003e1 我们的私有代码往往存储在内部的代码管理平台 (如 gitlab, gittee 等) 上，假设我们的地址是 git.xx.vip. 接下来开始设置一些配置项。\u003c/p\u003e\n\u003cp\u003e2 设置 GOPRIVATE 变量。\u003c/p\u003e\n\u003cp\u003e我们先设置 GOPRIVATE 环境变量，GOPRIVATE 会将 GOPRIVATE 变量值所匹配的路径前缀视为私有模块，就不会使用代理和进行校验。设置了 GOPRIVATE 变量后，GONOPROXY 和 GONOSUMDB 环境变量\n也会接收同样的值。\u003c/p\u003e\n\u003cp\u003e3 设置 GOINSECURE 变量\u003c/p\u003e\n\u003cp\u003e我们的 gitlab 等代码管理平台往往没有使用 https 协议，所以我们需要设置 GOINSECURE 变量，GOINSECURE 变量中的值以逗号分隔，其中的每一个值在 go get 时 不会进行 https 协议的校验，只会采用\nhttp 协议。\u003c/p\u003e\n\u003cp\u003e4 go get\u003c/p\u003e\n\u003cp\u003e设置完以上步骤后，可以执行 go get 看看效果，具体命令：\n\u003ccode\u003ego get -v  git.xx.vip/swords/xkratos\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e可以看到相应的库已经顺利拉取成功，并且输出了相应的版本信息\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://go.dev/ref/mod\"\u003ehttps://go.dev/ref/mod\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://go.zhangdeman.cn/archives/62430e03.html\"\u003ehttps://go.zhangdeman.cn/archives/62430e03.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://forum.golangbridge.org/t/using-go-get-to-retrieve-modules-packages-from-a-private-server/17896/6\"\u003ehttps://forum.golangbridge.org/t/using-go-get-to-retrieve-modules-packages-from-a-private-server/17896/6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/GoogleCloudPlatform/govanityurls\"\u003ehttps://github.com/GoogleCloudPlatform/govanityurls\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Go 如何使用私有仓库模块"},{"content":"今天来讲一讲 gRPC 的多路复用，gRPC 的多路复用是指 一个 gRPC 服务器端可以运行多个 gRPC 服务，也允许多个客户端存根使用同一个 gRPC 客户端连接。\n我们继续沿用前面的代码来讲解如何使用多路复用。\n多个 gRPC 服务共享同一个服务器端 假如在订单服务中，为了管理的需求，需要在同一个服务端运行另一个 RPC 服务，这样客户端就能重用同一个连接，这样就可以按需调用相应的服务。通过相应的服务器端注册函数，可以使多个服务注册在同一个服务器端。\n具体代码如下：\nfunc main() { initSampleData() lis, err := net.Listen(\u0026#34;tcp\u0026#34;, port) if err != nil { log.Fatalf(\u0026#34;failed to isten: %v\u0026#34;, err) } s := grpc.NewServer(grpc.UnaryInterceptor(orderUnaryServerInterceptor)) ordermgt_pb.RegisterOrderManagementServer(s, \u0026amp;orderMgtServer{}) user_pb.RegisterUserManagementServer(s, \u0026amp;userMgtServer{}) if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } 这样就是多个 gRPC 服务共享同一个服务端连接，这样就可以按需调用相应的服务。同理，通过客户端，可以在两个 gRPC 客户端存根间共享相同的 gRPC 客户端连接。\n两个 gRPC 客户端存根共享同一个客户端连接 如代码所示，两个 gRPC 服务在同一个 gRPC 服务器端运行，所以可以创建一个 gRPC 连接，并在两个服务创建 gRPC 客户端实例时使用这个连接。\nfunc main() { conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock()) if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer conn.Close() client := pb.NewOrderManagementClient(conn) ctx, cancel := context.WithTimeout(context.Background(), time.Second*5) defer cancel() heclien := hwpb.NewGreetingClient(conn) } 小结 在我们的日常使用中，通常不会出现两个服务间共享同一个服务器端连接的情况。\n在微服务架构中，gRPC 多路复用的一个强大的用途是在同一个服务端进程中托管同一个服务的多个版本。这样保证 API 发送 break_channge 时依然能够兼容旧的客户端，\n","permalink":"https://jasminides.com/posts/grpc-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/","summary":"\u003cp\u003e今天来讲一讲 gRPC 的多路复用，gRPC 的多路复用是指 一个 gRPC 服务器端可以运行多个 gRPC 服务，也允许多个客户端存根使用同一个 gRPC 客户端连接。\u003c/p\u003e\n\u003cp\u003e我们继续沿用前面的代码来讲解如何使用多路复用。\u003c/p\u003e\n\u003ch2 id=\"多个-grpc-服务共享同一个服务器端\"\u003e多个 gRPC 服务共享同一个服务器端\u003c/h2\u003e\n\u003cp\u003e假如在订单服务中，为了管理的需求，需要在同一个服务端运行另一个 RPC 服务，这样客户端就能重用同一个连接，这样就可以按需调用相应的服务。通过相应的服务器端注册函数，可以使多个服务注册在同一个服务器端。\u003c/p\u003e\n\u003cp\u003e具体代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einitSampleData\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to isten: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eorderUnaryServerInterceptor\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eordermgt_pb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterOrderManagementServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eorderMgtServer\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003euser_pb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterUserManagementServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003euserMgtServer\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to serve: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样就是多个 gRPC 服务共享同一个服务端连接，这样就可以按需调用相应的服务。同理，通过客户端，可以在两个 gRPC 客户端存根间共享相同的 gRPC 客户端连接。\u003c/p\u003e\n\u003ch2 id=\"两个-grpc-客户端存根共享同一个客户端连接\"\u003e两个 gRPC 客户端存根共享同一个客户端连接\u003c/h2\u003e\n\u003cp\u003e如代码所示，两个 gRPC 服务在同一个 gRPC 服务器端运行，所以可以创建一个 gRPC 连接，并在两个服务创建 gRPC 客户端实例时使用这个连接。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDial\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithInsecure\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithBlock\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;did not connect: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewOrderManagementClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econn\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithTimeout\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eheclien\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehwpb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewGreetingClient\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econn\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e在我们的日常使用中，通常不会出现两个服务间共享同一个服务器端连接的情况。\u003c/p\u003e","title":"GRPC 多路复用"},{"content":"使用分布式链路追踪查看 sql 的执行情况 今天我们来讲一讲如何在 go 语言中使用 OpenTelemetry 链路追踪追踪 sql 的执行情况 (执行时间、语句等)。\n初始化 我们这里需要有一个采用了数据库的项目，为了使用方便，我们这里采用了 ent 来进行数据库的操作。\n初始化数据库实体 为了演示方便，我们这里简单定义一个 user 实体，user 有 2 个成员字段 id 和 name。\n$ ent init User package schema import ( \u0026#34;entgo.io/ent\u0026#34; \u0026#34;entgo.io/ent/schema/field\u0026#34; ) // User holds the schema definition for the User entity. type User struct { ent.Schema } // Fields of the User. func (User) Fields() []ent.Field { return []ent.Field{ field.Int(\u0026#34;id\u0026#34;), field.String(\u0026#34;name\u0026#34;), } } // Edges of the User. func (User) Edges() []ent.Edge { return nil } 执行 go run -mod=mod entgo.io/ent/cmd/ent generate ./schema,就会生成一系列的文件。\n初始化数据库连接 接下来我们初始化 mysql 的连接并简单的写了个创建 user 对象的函数。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; \u0026#34;github.com/overstarry/ent-trace/ent\u0026#34; ) func main() { client, err := ent.Open(\u0026#34;mysql\u0026#34;, \u0026#34;root:a12345@tcp(127.0.0.1:3306)/trace?parseTime=True\u0026#34;) if err != nil { log.Fatal(err) } defer client.Close() // Run the auto migration tool. if err := client.Schema.Create(context.Background()); err != nil { log.Fatalf(\u0026#34;failed creating schema resources: %v\u0026#34;, err) } createUser(context.Background(), client) } func createUser(ctx context.Context, client *ent.Client) { u, err := client.User.Create(). SetName(\u0026#34;Overstarry\u0026#34;). SetID(1).Save(ctx) if err != nil { log.Fatal(err) } log.Printf(\u0026#34;Created: %v\u0026#34;, u) } 初始化 OpenTelemetry 这里我们采用的 OpenTelemetry 后端 为 jaeger。初始化的代码如下：\npackage main import ( \u0026#34;context\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; \u0026#34;github.com/overstarry/ent-trace/ent\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/jaeger\u0026#34; \u0026#34;go.opentelemetry.io/otel/propagation\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; tracesdk \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.4.0\u0026#34; \u0026#34;log\u0026#34; ) func tracerProvider(url string) (*tracesdk.TracerProvider, error) { // Create the Jaeger exporter exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url))) if err != nil { return nil, err } tp := tracesdk.NewTracerProvider( tracesdk.WithSampler(tracesdk.AlwaysSample()), tracesdk.WithBatcher(exp), tracesdk.WithResource(resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceNameKey.String(\u0026#34;opentelemetry-ent-trace\u0026#34;), // 服务名 semconv.ServiceVersionKey.String(\u0026#34;0.0.1\u0026#34;), attribute.String(\u0026#34;environment\u0026#34;, \u0026#34;test\u0026#34;), )), ) otel.SetTracerProvider(tp) otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{})) return tp, nil } func main() { tp, err := tracerProvider(\u0026#34;http://localhost:14268/api/traces\u0026#34;) if err != nil { log.Fatal(err) } client, err := ent.Open(\u0026#34;mysql\u0026#34;, \u0026#34;root:a12345@tcp(127.0.0.1:3306)/trace?parseTime=True\u0026#34;) if err != nil { log.Fatal(err) } defer client.Close() // Run the auto migration tool. if err := client.Schema.Create(context.Background()); err != nil { log.Fatalf(\u0026#34;failed creating schema resources: %v\u0026#34;, err) } createUser(context.Background(), client) } func createUser(ctx context.Context, client *ent.Client) { u, err := client.User.Create(). SetName(\u0026#34;Overstarry\u0026#34;). SetID(1).Save(ctx) if err != nil { log.Fatal(err) } log.Printf(\u0026#34;Created: %v\u0026#34;, u) } 截至这里我们就完成了数据库的初始化和 trace 的初始化，接下来我们将数据库接入 trace。\n数据库接入 tracing 接下来我们将为数据库接入 tracing，由于 opentelemetry 数据库 的相关规范不够完善，我寻找了很久，查看了相关的 issues、PR，终于找到了合适的模块 otelsql 来进行 sql 的链路追踪。\notelsql 的使用很简单，只要使用 otelsql 提供的函数注册相应的数据库驱动，再使用 sql 包连接相应的数据库即可。\n但由于我们使用的 sql 包不是标准库 database/sql, 而是采用了 ent, ent 缺乏了对 database/sql 的集成，导致使用上有点困难，在 ent 的 issue(#1232) 有讨论过这个事情，ent 提供了 sql.DB 的支持，使我们的工作能够顺利进行。\n这时完整的代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; entsql \u0026#34;entgo.io/ent/dialect/sql\u0026#34; \u0026#34;github.com/XSAM/otelsql\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; \u0026#34;github.com/overstarry/ent-trace/ent\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/jaeger\u0026#34; \u0026#34;go.opentelemetry.io/otel/propagation\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; tracesdk \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.4.0\u0026#34; ) func tracerProvider(url string) (*tracesdk.TracerProvider, error) { // Create the Jaeger exporter exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url))) if err != nil { return nil, err } tp := tracesdk.NewTracerProvider( tracesdk.WithSampler(tracesdk.AlwaysSample()), tracesdk.WithBatcher(exp), tracesdk.WithResource(resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceNameKey.String(\u0026#34;opentelemetry-ent-trace\u0026#34;), // 服务名 semconv.ServiceVersionKey.String(\u0026#34;0.0.1\u0026#34;), attribute.String(\u0026#34;environment\u0026#34;, \u0026#34;test\u0026#34;), )), ) otel.SetTracerProvider(tp) otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{})) return tp, nil } func main() { _, err := tracerProvider(\u0026#34;http://localhost:14268/api/traces\u0026#34;) if err != nil { log.Fatal(err) } driverName, err := otelsql.Register(\u0026#34;mysql\u0026#34;, semconv.DBSystemMySQL.Value.AsString()) if err != nil { panic(err) } // Connect to database db, err := sql.Open(driverName, \u0026#34;root:a12345@tcp(127.0.0.1:3306)/trace?parseTime=True\u0026#34;) if err != nil { panic(err) } defer db.Close() drv := entsql.OpenDB(\u0026#34;mysql\u0026#34;, db) client := ent.NewClient(ent.Driver(drv)) // Run the auto migration tool. if err := client.Schema.Create(context.Background()); err != nil { log.Fatalf(\u0026#34;failed creating schema resources: %v\u0026#34;, err) } createUser(client) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } func createUser(client *ent.Client) { tracer := otel.GetTracerProvider() ctx, span := tracer.Tracer(\u0026#34;github.com/overstarry/ent-trace/example\u0026#34;).Start(context.Background(), \u0026#34;example\u0026#34;) defer span.End() u, err := client.User.Create(). SetName(\u0026#34;Overstarry\u0026#34;).Save(ctx) if err != nil { log.Fatal(err) } log.Printf(\u0026#34;Created: %v\u0026#34;, u) } 运行代码，我们打开 jaeger UI, 可以看到已经有了 sql 的 trace 情况。\n总结 本篇文章讲述了在 sql 中接入 tracing。\n本文的代码在：https://github.com/overstarry/ent-trace-demo\n参考 https://github.com/open-telemetry/opentelemetry-go-contrib/pull/505 https://github.com/ent/ent/issues/1232 https://github.com/open-telemetry/opentelemetry-go-contrib/issues/5 https://github.com/overstarry/ent-trace-demo ","permalink":"https://jasminides.com/posts/trace_in_sql/","summary":"\u003ch1 id=\"使用分布式链路追踪查看-sql-的执行情况\"\u003e使用分布式链路追踪查看 sql 的执行情况\u003c/h1\u003e\n\u003cp\u003e今天我们来讲一讲如何在 go 语言中使用 OpenTelemetry 链路追踪追踪 sql 的执行情况 (执行时间、语句等)。\u003c/p\u003e\n\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003cp\u003e我们这里需要有一个采用了数据库的项目，为了使用方便，我们这里采用了 ent 来进行数据库的操作。\u003c/p\u003e\n\u003ch3 id=\"初始化数据库实体\"\u003e初始化数据库实体\u003c/h3\u003e\n\u003cp\u003e为了演示方便，我们这里简单定义一个 user 实体，user 有 2 个成员字段 id 和 name。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ent init User\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eschema\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;entgo.io/ent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;entgo.io/ent/schema/field\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// User holds the schema definition for the User entity.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSchema\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Fields of the User.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eFields\u003c/span\u003e() []\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eField\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eField\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInt\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efield\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Edges of the User.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eEdges\u003c/span\u003e() []\u003cspan style=\"color:#a6e22e\"\u003eent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEdge\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行 \u003ccode\u003ego run -mod=mod entgo.io/ent/cmd/ent generate ./schema\u003c/code\u003e,就会生成一系列的文件。\u003c/p\u003e","title":"Trace_in_sql"},{"content":"今天我来讲一讲 gRPC 元数据的使用，以及如何获取元数据。gRPC 应用程序通常会通过 gRPC 服务和消费者之间的 RPC 来共享信息。在大多数场景中，某些与服务端业务逻辑相关的信息会作为远程调用方法的参数，但在某些场景可能存在与服务端业务上下文无关的数据，这些数据不应该通过参数来传递，而应该通过 gRPC 元数据来处理传递。元数据的结构构造是 K-V 形式，其中 k 为字符串，v 为任意类型。\n接下来就介绍如何在 客户端和服务端之间使用元数据来传递数据。\n创建和查询元数据 在 gRPC 应用程序中，创建元数据非常简单，在 go 语言中有两种方式创建元数据：1) 通过 metadata.New(map[string]string{\u0026ldquo;key1\u0026rdquo;:\u0026ldquo;val1\u0026rdquo;}) 函数创建；2) 通过 metadata.Pairs 来创建元数据对，相同的 key 会被合并为切片数组。\nmd := metadata.New(map[string]string{\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;}) md := metadata.Pairs( \u0026#34;key1\u0026#34;, \u0026#34;value1\u0026#34;, \u0026#34;key2\u0026#34;, \u0026#34;value2\u0026#34;, ) 二进制数据也可以设置为元数据值，以元数据值形式所设置的二进制数据在发送前都会进行 base4 编码，在传输过程中会被解码。\n在客户端或服务端读取元数据，可以通过传入的 RPC 上下文和 metadata.FromIncomingContext 函数来获取元数据。\nmd, metadataAvailble := metadata.FromIncomingContext(ctx) 接下来讲解客户端和服务端如何发送和接受元数据。\n客户端发送接收元数据 在客户端，要发送元数据，可以创建元数据并将其设置到 RPC 上下文中。在 go 语言中有两种方式实现，可以使用 NewOutgoingContext 函数创建，也可以使用 AppendToOutgoingContext 函数来将元数据附加到 RPC 上下文中，使用 NewOutgoingContext 会替换掉上下文中已有的元数据。在创建完带有元数据的上下文后，就可以用于 RPC 中了。在上下文中设置的元数据会转换成 header 信息。\n// 客户端发送元数据 // ****** Metadata : Creation ***** md := metadata.Pairs( \u0026#34;timestamp\u0026#34;, time.Now().Format(time.StampNano), \u0026#34;kn\u0026#34;, \u0026#34;vn\u0026#34;, ) mdCtx := metadata.NewOutgoingContext(context.Background(), md) ctxA := metadata.AppendToOutgoingContext(mdCtx, \u0026#34;k1\u0026#34;, \u0026#34;v1\u0026#34;, \u0026#34;k1\u0026#34;, \u0026#34;v2\u0026#34;, \u0026#34;k2\u0026#34;, \u0026#34;v3\u0026#34;) // Search Order searchStream, _ := client.SearchOrders(ctxA, \u0026amp;wrapper.StringValue{Value: \u0026#34;Google\u0026#34;}) for { searchOrder, err := searchStream.Recv() if err == io.EOF { log.Print(\u0026#34;EOF\u0026#34;) break } if err == nil { log.Print(\u0026#34;Search Result : \u0026#34;, searchOrder) } } // 在 gRPC 中接受元数据 var header,trailer metadata.MD r,err := client.SomeRPC( ctx, someReq, grpc.Header(\u0026amp;header), grpc.Trailer(trailer), ) stream, err := client.SomeStreamingRPC(ctx) header, err := stream.Header() trailer := stream.Trailer() 从对应的 RPC 获取到值时，就可以像处理 map 一样进行，对元数据进行相应处理。\n服务端接收和发送元数据 在服务端接收元数据非常简单，只需在方法调用方法 metadata.FromIncomingContext(ctx),即可读取元数据。\n要从服务端发送元数据，可以根据元数据发送头信息或设置 trailer，创建元数据的方法跟前面一样。在一元 RPC 和流 RPC 都可以通过 grpc.SendHeader 发送元数据，如果想要将元数据作为 trailer 的一部分发送，则需要使用 grpc.SetTrailer 方法设置。\n小结 本完先是介绍了如何创建和查询元数据，后面分别简单介绍了 客户端和服务端如何发送和接收元数据。\n","permalink":"https://jasminides.com/posts/grpc-%E5%85%83%E6%95%B0%E6%8D%AE/","summary":"\u003cp\u003e今天我来讲一讲 gRPC 元数据的使用，以及如何获取元数据。gRPC 应用程序通常会通过 gRPC 服务和消费者之间的 RPC\n来共享信息。在大多数场景中，某些与服务端业务逻辑相关的信息会作为远程调用方法的参数，但在某些场景可能存在与服务端业务上下文无关的数据，这些数据不应该通过参数来传递，而应该通过 gRPC 元数据来处理传递。元数据的结构构造是 K-V 形式，其中\nk 为字符串，v 为任意类型。\u003c/p\u003e\n\u003cp\u003e接下来就介绍如何在 客户端和服务端之间使用元数据来传递数据。\u003c/p\u003e\n\u003ch2 id=\"创建和查询元数据\"\u003e创建和查询元数据\u003c/h2\u003e\n\u003cp\u003e在 gRPC 应用程序中，创建元数据非常简单，在 go 语言中有两种方式创建元数据：1) 通过 metadata.New(map[string]string{\u0026ldquo;key1\u0026rdquo;:\u0026ldquo;val1\u0026rdquo;}) 函数创建；2) 通过\nmetadata.Pairs 来创建元数据对，相同的 key 会被合并为切片数组。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePairs\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value1\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value2\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e二进制数据也可以设置为元数据值，以元数据值形式所设置的二进制数据在发送前都会进行 base4 编码，在传输过程中会被解码。\u003c/p\u003e\n\u003cp\u003e在客户端或服务端读取元数据，可以通过传入的 RPC 上下文和 metadata.FromIncomingContext 函数来获取元数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emd\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emetadataAvailble\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFromIncomingContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来讲解客户端和服务端如何发送和接受元数据。\u003c/p\u003e\n\u003ch2 id=\"客户端发送接收元数据\"\u003e客户端发送接收元数据\u003c/h2\u003e\n\u003cp\u003e在客户端，要发送元数据，可以创建元数据并将其设置到 RPC 上下文中。在 go 语言中有两种方式实现，可以使用 NewOutgoingContext 函数创建，也可以使用 AppendToOutgoingContext\n函数来将元数据附加到 RPC 上下文中，使用 NewOutgoingContext 会替换掉上下文中已有的元数据。在创建完带有元数据的上下文后，就可以用于 RPC 中了。在上下文中设置的元数据会转换成 header 信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 客户端发送元数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ****** Metadata : Creation *****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePairs\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eFormat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStampNano\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kn\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;vn\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emdCtx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewOutgoingContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#a6e22e\"\u003emd\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ectxA\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAppendToOutgoingContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emdCtx\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;k1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;k1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;k2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v3\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Search Order\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esearchStream\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSearchOrders\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectxA\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewrapper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringValue\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eValue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Google\u0026#34;\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esearchOrder\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchStream\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRecv\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEOF\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EOF\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Search Result : \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esearchOrder\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 在 gRPC 中接受元数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheader\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etrailer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emetadata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMD\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSomeRPC\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t   \u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t   \u003cspan style=\"color:#a6e22e\"\u003esomeReq\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t   \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHeader\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eheader\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t   \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTrailer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etrailer\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003estream\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSomeStreamingRPC\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003eheader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estream\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHeader\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003etrailer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estream\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTrailer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从对应的 RPC 获取到值时，就可以像处理 map 一样进行，对元数据进行相应处理。\u003c/p\u003e","title":"GRPC 元数据"},{"content":"为什么要使用多个 go 版本 在我们的日常项目开发中，我们可能会使用多个不同的版本的 go 语言，来进行应用的测试，因为不同的版本有着不同的性能优化，可以通过对不同版本情况的测试，选择线上使用的版本。\n如何安装多个 go 版本 可能会有人说，可以通过多个不同的 go 安装包来安装，这种方法是可行的，但 go 官方提供了另一种方法来方便安装。\n1 使用 go install 命令安装相应版本的 go , 例如：\ngo install golang.org/dl/go1.18.0beta1@latest 2 使用相应命令下载，例如我前面安装的是 go1.18.0beta1，那就使用 go1.18.0beta1 download 下载。\n3 下载完毕可以使用对应的版本测试，例如：go1.18.0beta1 version\n参考 https://go.dev/doc/manage-install ","permalink":"https://jasminides.com/posts/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/","summary":"\u003ch2 id=\"为什么要使用多个-go-版本\"\u003e为什么要使用多个 go 版本\u003c/h2\u003e\n\u003cp\u003e在我们的日常项目开发中，我们可能会使用多个不同的版本的 go 语言，来进行应用的测试，因为不同的版本有着不同的性能优化，可以通过对不同版本情况的测试，选择线上使用的版本。\u003c/p\u003e\n\u003ch2 id=\"如何安装多个-go-版本\"\u003e如何安装多个 go 版本\u003c/h2\u003e\n\u003cp\u003e可能会有人说，可以通过多个不同的 go 安装包来安装，这种方法是可行的，但 go 官方提供了另一种方法来方便安装。\u003c/p\u003e\n\u003cp\u003e1 使用 go install 命令安装相应版本的 go , 例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e go install golang.org/dl/go1.18.0beta1@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2 使用相应命令下载，例如我前面安装的是 go1.18.0beta1，那就使用 go1.18.0beta1 download 下载。\u003c/p\u003e\n\u003cp\u003e3 下载完毕可以使用对应的版本测试，例如：go1.18.0beta1 version\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://go.dev/doc/manage-install\"\u003ehttps://go.dev/doc/manage-install\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Golang 多版本共存"},{"content":"今天来讲一讲 gRPC 错误处理的方式，以及如何自定义错误处理。当发起 gRPC 调用时，客户端会接受成功状态的响应或带有错误信息状态的错误响应。考虑程序的健壮性，我们需要在编写客户端处理信息时，要处理所有可能的错误。编写服务端代码也要处理错误，并构建合适的错误状态码。\n当 gRPC 发生错误时，会返回一个错误码。并附带一条可选的信息，错误状态信息由一个整形状态码和一条字符串消息组成，适用于不同的语言实现。\n下图展示了 gRPC 内置的错误码：\n缺陷 gRPC 提供的错误模型非常有限，并且与底层的数据格式无关，最常用的数据格式就是 protocol buffers。如果使用了 protocol buffers，google.rpc 提供了更丰富的错误模型，但语言兼容性待测试。\n错误处理例子 接下来继续沿用前面的代码，来讲解如何运用错误处理。假如我们需要在订单添加处理中处理非法 ID 请求。如果我们传了一个不合法的 ID 如 -1，需要返回错误给客户端消费者。\nfunc (s *server) AddOrder(ctx context.Context, orderReq *pb.Order) (*wrappers.StringValue, error) { if orderReq.Id == \u0026#34;-1\u0026#34; { log.Printf(\u0026#34;Order ID is vaild : %s\u0026#34;, orderReq.Id) errorStatus := status.New(codes.InvalidArgument, \u0026#34;Order ID is not valid\u0026#34;) ds, err := errorStatus.WithDetails( \u0026amp;epb.BadRequest_FieldViolation{ Field: \u0026#34;ID\u0026#34;, Description: fmt.Sprintf(\u0026#34;Order ID received is not valid %s : %s\u0026#34;, orderReq.Id, orderReq.Description), }, ) if err != nil { return nil, errorStatus.Err() } return nil, ds.Err() } orderMap[orderReq.Id] = *orderReq log.Println(\u0026#34;Order : \u0026#34;, orderReq.Id, \u0026#34; -\u0026gt; Added\u0026#34;) return \u0026amp;wrapper.StringValue{Value: \u0026#34;Order Added: \u0026#34; + orderReq.Id}, nil } 通过 status 包可以很方便的创建所需的错误码和相应错误详情。使用 Google API 的相应包可以设置更丰富的错误详情。\n客户端处理错误，只需处理相应 RPC 请求返回的错误即可。接下来的代码展示如何处理前面的 AddOrder 方法返回的错误。\norder1 := pb.Order{Id: \u0026#34;-1\u0026#34;, Items:[]string{\u0026#34;iPhone XS\u0026#34;, \u0026#34;Mac Book Pro\u0026#34;}, Destination:\u0026#34;San Jose, CA\u0026#34;, Price:2300.00} res, addOrderError := client.AddOrder(ctx, \u0026amp;order1) if addOrderError != nil { errorCode := status.Code(addOrderError) if errorCode == codes.InvalidArgument { log.Printf(\u0026#34;Invalid Argument Error : %s\u0026#34;, errorCode) errorStatus := status.Convert(addOrderError) for _, d := range errorStatus.Details() { switch info := d.(type) { case *epb.BadRequest_FieldViolation: log.Printf(\u0026#34;Request Field Invalid: %s\u0026#34;, info) default: log.Printf(\u0026#34;Unexpected error type: %s\u0026#34;, info) } } } else { log.Printf(\u0026#34;Unhandled error : %s \u0026#34;, errorCode) } } else { log.Print(\u0026#34;AddOrder Response -\u0026gt; \u0026#34;, res.Value) } 在 gRPC 处理中，尽可能使用适当的 gRPC 错误码和丰富的错误模型，这样可以大大的提供系统的健壮性。\n参考 https://grpc.github.io/grpc/core/md_doc_statuscodes.html https://grpc.io/ ","permalink":"https://jasminides.com/posts/grpc-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","summary":"\u003cp\u003e今天来讲一讲 gRPC 错误处理的方式，以及如何自定义错误处理。当发起 gRPC 调用时，客户端会接受成功状态的响应或带有错误信息状态的错误响应。考虑程序的健壮性，我们需要在编写客户端处理信息时，要处理所有可能的错误。编写服务端代码也要处理错误，并构建合适的错误状态码。\u003c/p\u003e\n\u003cp\u003e当 gRPC 发生错误时，会返回一个错误码。并附带一条可选的信息，错误状态信息由一个整形状态码和一条字符串消息组成，适用于不同的语言实现。\u003c/p\u003e\n\u003cp\u003e下图展示了 gRPC 内置的错误码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/grpc/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"缺陷\"\u003e缺陷\u003c/h3\u003e\n\u003cp\u003egRPC 提供的错误模型非常有限，并且与底层的数据格式无关，最常用的数据格式就是 protocol buffers。如果使用了 protocol buffers，google.rpc 提供了更丰富的错误模型，但语言兼容性待测试。\u003c/p\u003e\n\u003ch3 id=\"错误处理例子\"\u003e错误处理例子\u003c/h3\u003e\n\u003cp\u003e接下来继续沿用前面的代码，来讲解如何运用错误处理。假如我们需要在订单添加处理中处理非法 ID 请求。如果我们传了一个不合法的 ID 如 -1，需要返回错误给客户端消费者。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eserver\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAddOrder\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOrder\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewrappers\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringValue\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-1\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order ID is vaild : %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eerrorStatus\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecodes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInvalidArgument\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order ID is not valid\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eds\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrorStatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithDetails\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eepb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBadRequest_FieldViolation\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eField\u003c/span\u003e:       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ID\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eDescription\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order ID received is not valid %s : %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDescription\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerrorStatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErr\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eds\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErr\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eorderMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order : \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; -\u0026gt; Added\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewrapper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringValue\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eValue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order Added: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eorderReq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eId\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过 status 包可以很方便的创建所需的错误码和相应错误详情。使用 Google API 的相应包可以设置更丰富的错误详情。\u003c/p\u003e","title":"GRPC 错误处理"},{"content":"本篇文章我来介绍一下 gRPC 拦截器的使用，拦截器主要用于在服务器端和客户端拦截 RPC.\n拦截器可以在 gRPC 中拦截 RPC 的执行，来满足一些特殊的需求，如日志，认证，访问控制等。gRPC 提供了简单的接口，用来在客户端和服务端的 gRPC 协议中添加拦截器。\n根据所使用的 gRPC 通信模式的不同，主要分为 2 种拦截器：1）一元拦截器，2）流拦截器。既可以在客户端使用拦截器，也可以在服务端使用拦截器。\n接下来，我会依次介绍在服务端和客户端的使用。\n服务端拦截器 当客户端调用 gRPC 的远程调用方法时，可以通过服务端拦截器，在执行一些方法前，执行一些通用的操作。如果希望在 Rpc 服务中添加服务端拦截器，只需实现该拦截器，并在创建服务端时注册进来。\n下面依次介绍两种服务端拦截器：1）一元拦截器，2）流拦截器。\n一元拦截器 如果想在服务端拦截 一元 RPC 调用时，需要在服务端实现相应的函数，此函数的签名为：\ntype UnaryServerInterceptor func(ctx context.Context, req interface{}, info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error) 我们在上一篇文章的代码中添加如下代码：\nfunc orderUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) { log.Println(\u0026#34;======= [Server Interceptor] \u0026#34;, info.FullMethod) log.Printf(\u0026#34; Pre Proc Message : %s\u0026#34;, req) m, err := handler(ctx, req) if err != nil { log.Printf(\u0026#34;Error : %v\u0026#34;, err) } log.Printf(\u0026#34; Post Proc Message : %s\u0026#34;, m) return m, err } func main() { initSampleData() lis, err := net.Listen(\u0026#34;tcp\u0026#34;, port) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } s := grpc.NewServer(grpc.UnaryInterceptor(orderUnaryServerInterceptor)) pb.RegisterOrderManagementServer(s, \u0026amp;server{}) // Register reflection service on gRPC server. // reflection.Register(s) if err := s.Serve(lis); err != nil { log.Fatalf(\u0026#34;failed to serve: %v\u0026#34;, err) } } 一元拦截器的实现主要分为三个部分：前置处理、调用 RPC 服务、后置处理。在前置处理阶段可以通过检查参数获得 RPC 的信息，比如 RPC 上下文、请求和服务端信息。\n在调用阶段需要调用 Grpc UnaryHandler 来执行 RPC 服务，在后置处理阶段可以对返回值进行处理。接下来介绍服务端流拦截器。\n流拦截器 服务器流拦截器会处理 gRPC 服务器处理的所有流 RPC。流拦截器包括前置处理阶段和流操作拦截阶段。\n流拦截器需要实现特定的流拦截器类型：type StreamServerInterceptor func(srv interface{}, ss ServerStream, info *StreamServerInfo, handler StreamHandler) error\n与一元拦截器类似，在前置处理阶段，可以在流 RPC 进入服务实现前进行拦截，在前置处理完后，可以调用 streamhandler 完成方法的执行，。\n客户端拦截器 客户端的拦截器和服务端的类似，只是在相应的接口和函数签名方面有区别。\n当客户端发起 RPC 请求时，可以在客户端拦截 rpc 请求。\n一元拦截器 客户端一元拦截器用于一元 RPC 客户端的调用，主要的函数类型：\ntype UnaryClientInterceptor func(ctx context.Context, method string, req, reply interface{}, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption) error 与服务器一元拦截器一样，客户端一元拦截器也有不同的阶段，在前置阶段可以检查 RPC 的信息，我们甚至可以在原请求发送至服务端前，修改相应信息，处理阶段通过 UnaryInvoker 参数调用实际的一元 RPC, 后置阶段可以访问 RPC 的响应结果或错误结果。\n注册一元拦截器，通过在 grpc.Dial 方法中通过 grpc.WithUnaryInterceptor 方法注册。\n流拦截器 客户端流拦截器会处理所有的客户端流 RPC.具体的实现与服务端流拦截器类似，StreamClientInterceptor 是响应订单函数类型，其签名如下：\ntype StreamClientInterceptor func(ctx context.Context, desc *StreamDesc, cc *ClientConn, method string, streamer Streamer, opts ...CallOption) (ClientStream, error) 客户端流拦截器主要包括前置处理和流操作拦截。\n参考 https://pkg.go.dev/google.golang.org/grpc https://grpc.io/docs/languages/go/quickstart/ ","permalink":"https://jasminides.com/posts/grpc-%E6%8B%A6%E6%88%AA%E5%99%A8/","summary":"\u003cp\u003e本篇文章我来介绍一下 gRPC 拦截器的使用，拦截器主要用于在服务器端和客户端拦截 RPC.\u003c/p\u003e\n\u003cp\u003e拦截器可以在 gRPC 中拦截 RPC 的执行，来满足一些特殊的需求，如日志，认证，访问控制等。gRPC 提供了简单的接口，用来在客户端和服务端的 gRPC 协议中添加拦截器。\u003c/p\u003e\n\u003cp\u003e根据所使用的 gRPC 通信模式的不同，主要分为 2 种拦截器：1）一元拦截器，2）流拦截器。既可以在客户端使用拦截器，也可以在服务端使用拦截器。\u003c/p\u003e\n\u003cp\u003e接下来，我会依次介绍在服务端和客户端的使用。\u003c/p\u003e\n\u003ch2 id=\"服务端拦截器\"\u003e服务端拦截器\u003c/h2\u003e\n\u003cp\u003e当客户端调用 gRPC 的远程调用方法时，可以通过服务端拦截器，在执行一些方法前，执行一些通用的操作。如果希望在 Rpc 服务中添加服务端拦截器，只需实现该拦截器，并在创建服务端时注册进来。\u003c/p\u003e\n\u003cp\u003e下面依次介绍两种服务端拦截器：1）一元拦截器，2）流拦截器。\u003c/p\u003e\n\u003ch3 id=\"一元拦截器\"\u003e一元拦截器\u003c/h3\u003e\n\u003cp\u003e如果想在服务端拦截 一元 RPC 调用时，需要在服务端实现相应的函数，此函数的签名为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etype UnaryServerInterceptor func(ctx context.Context, req interface{}, info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们在上一篇文章的代码中添加如下代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eorderUnaryServerInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryServerInfo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehandler\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryHandler\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;======= [Server Interceptor] \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFullMethod\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; Pre Proc Message : %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Error : %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; Post Proc Message : %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einitSampleData\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to listen: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrpc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnaryInterceptor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eorderUnaryServerInterceptor\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterOrderManagementServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eserver\u003c/span\u003e{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Register reflection service on gRPC server.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// reflection.Register(s)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elis\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;failed to serve: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一元拦截器的实现主要分为三个部分：前置处理、调用 RPC 服务、后置处理。在前置处理阶段可以通过检查参数获得 RPC 的信息，比如 RPC 上下文、请求和服务端信息。\u003c/p\u003e","title":"GRPC 拦截器"},{"content":"在我们日常的客户端和服务端的通信中，往往是简单的请求 - 响应风格的通信，这里一个请求会得到一个响应。借助 gRPC，我们可以实现不同的进程间通信模式。\n接下来就由我来介绍 gRPC 的 4 种通信模式：一元 RPC, 服务端流式 RPC, 客户端流式 RPC, 客户端流式 RPC（双向流式），并会带有一些简单的例子展示各种模式，在这里客户端和服务端都由 go 编写。\n一元 RPC 我们先来介绍一元 RPC，这是一种单向通信，客户端调用服务端的远程方法时，客户端发送请求至服务端并获得一个响应。\n假设我们现在需要构建一个商城系统，商城系统有一个订单服务，提供了根据订单号查询订单的功能。\n下面来实现这个功能，先使用 protocol buffer 来定义服务，然后再使用 gRPC 实现一元 RPC。\nsyntax = \u0026#34;proto3\u0026#34;; import \u0026#34;google/protobuf/wrappers.proto\u0026#34;; service OrderManagement { rpc getOrder(google.protobuf.StringValue) returns (Order) {} } message Order{ string id = 1; string desc = 2; float price = 3; string destination = 4; repeated string items = 5; } 接下来编写相应的服务端实现代码：\nfunc (s *server) GetOrder(ctx context.Context, orderId *wrapper.StringValue) (*pb.Order, error) { ord, exists := orderMap[orderId.Value] if exists { return \u0026amp;ord, status.New(codes.OK, \u0026#34;\u0026#34;).Err() } return nil, status.Errorf(codes.NotFound, \u0026#34;Order does not exist. : \u0026#34;, orderId) } 由于只是简单的例子，所以使用了一个简单的 map 来存储订单信息，这里我们可以使用数据库来替代。\n接下来我们来实现客户端的代码，这里我采用 go 语言编写，代码比较简单，就是创建到服务器的连接并初始化客户端的存根，调用相应方法。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; pb \u0026#34;github.com/overstarry/grpc-demo/shopping/v1\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; wrapper \u0026#34;google.golang.org/protobuf/types/known/wrapperspb\u0026#34; ) const ( address = \u0026#34;localhost:8081\u0026#34; ) func main() { conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock()) if err != nil { log.Fatalf(\u0026#34;did not connect: %v\u0026#34;, err) } defer conn.Close() client := pb.NewOrderManagementClient(conn) ctx, cancel := context.WithTimeout(context.Background(), time.Second*5) defer cancel() // Get Order retrievedOrder, err := client.GetOrder(ctx, \u0026amp;wrapper.StringValue{Value: \u0026#34;106\u0026#34;}) log.Print(\u0026#34;GetOrder Response -\u0026gt; : \u0026#34;, retrievedOrder) 这样就实现了简单的一元 RPC, 还是十分简单易懂的，适用于大部分的场景。\n服务端流式 RPC 服务端流式 RPC 与一元 RPC 相比，服务端接受到客户端请求后，会发一个响应的序列，也称为流。在所有响应流发生完后，服务端会以 trailer 元数据发送给客户端，以标记流的结束。\n下面通过一个例子讲述 服务端流式 RPC. 继续上面的订单服务，这时需要一个订单搜索的功能，提供一个关键字就能得到想要的结果。\n1 编写 proto\nrpc searchOrders(google.protobuf.StringValue) returns (stream Order) {} 2 实现服务端代码\n接下来实现相应的服务端代码\nfunc (s *server) SearchOrders(searchQuery *wrappers.StringValue, stream pb.OrderManagement_SearchOrdersServer) error { for key, order := range orderMap { log.Print(key, order) for _, itemStr := range order.Items { log.Print(itemStr) if strings.Contains(itemStr, searchQuery.Value) { // Send the matching orders in a stream err := stream.Send(\u0026amp;order) if err != nil { return fmt.Errorf(\u0026#34;error sending message to stream : %v\u0026#34;, err) } log.Print(\u0026#34;Matching Order Found : \u0026#34; + key) break } } } return nil } 这里的逻辑很简单，主要是查找符合的订单，通过流依次发出去，使用了 send 方法。\n3 客户端\n接下来实现相应的客户端代码，客户端的代码和一元 RPC 模式很相似，区别在于服务端往流中发生了多个响应，因此需要循环处理多个响应，使用 recv 方法接收消息，直到流结束。\n代码：\nsearchStream, _ := client.SearchOrders(ctx, \u0026amp;wrapper.StringValue{Value: \u0026#34;overstarry\u0026#34;}) for { searchOrder, err := searchStream.Recv() if err == io.EOF { log.Print(\u0026#34;EOF\u0026#34;) break } if err == nil { log.Print(\u0026#34;Search Result : \u0026#34;, searchOrder) } } 客户端流式 RPC 客户端流式 RPC 和服务端流式 RPC 恰恰相反，客户端会发送多个请求给服务端，服务端会发送一个响应给客户端，但服务端不一定要处理完 所有请求才发送响应。\n接下来继续使用一个例子讲述 客户端流式 RPC 的代码如何处理。\n我们在 订单服务中添加一个方法 updateOrders 用来更新多个订单，客户端以 stream 的形式向服务端发送订单列表，服务端接收请求后处理完毕，会发送一个订单状态的响应给客户端。\n1 proto 代码\nrpc updateOrders(stream Order) returns (google.protobuf.StringValue) {} 可以看到与 服务端流式 RPC 不同的是，客户端流 RPC 使用了 stream order 作为参数。\n定义完 proto，通过命令生成新的代码。\n2 服务端实现\n具体就不多说了，看看实现的代码。\nfunc (s *server) UpdateOrders(stream pb.OrderManagement_UpdateOrdersServer) error { ordersStr := \u0026#34;Updated Order IDs : \u0026#34; for { order, err := stream.Recv() if err == io.EOF { // Finished reading the order stream. return stream.SendAndClose(\u0026amp;wrapper.StringValue{Value: \u0026#34;Orders processed \u0026#34; + ordersStr}) } if err != nil { return err } // Update order orderMap[order.Id] = *order log.Printf(\u0026#34;Order ID : %s - %s\u0026#34;, order.Id, \u0026#34;Updated\u0026#34;) ordersStr += order.Id + \u0026#34;, \u0026#34; } } 调用 SendAndClose 方法就可以向客户端发送响应。\n3 客户端\n客户端通过 updateStream.Send 发送多条消息，一旦消息全部发送完成，就可以接收服务端的响应。\nif err := updateStream.Send(\u0026amp;updOrder3); err != nil { log.Fatalf(\u0026#34;%v.Send(%v) = %v\u0026#34;, updateStream, updOrder3, err) } updateRes, err := updateStream.CloseAndRecv() if err != nil { log.Fatalf(\u0026#34;%v.CloseAndRecv() got error %v, want %v\u0026#34;, updateStream, err, nil) } log.Printf(\u0026#34;Update Orders Res : %s\u0026#34;, updateRes) 双向流 RPC 模式 在双向流 RPC 模式中，客户端通过流的形式向服务端发送请求，服务端接受请求后通过流的形式发送响应。调用必须由客户端发起。\n参考 https://grpc.io/docs/languages/go/quickstart/ ","permalink":"https://jasminides.com/posts/grpc-%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e在我们日常的客户端和服务端的通信中，往往是简单的请求 - 响应风格的通信，这里一个请求会得到一个响应。借助 gRPC，我们可以实现不同的进程间通信模式。\u003c/p\u003e\n\u003cp\u003e接下来就由我来介绍 gRPC 的 4 种通信模式：一元 RPC, 服务端流式 RPC, 客户端流式 RPC, 客户端流式 RPC（双向流式），并会带有一些简单的例子展示各种模式，在这里客户端和服务端都由 go 编写。\u003c/p\u003e\n\u003ch2 id=\"一元-rpc\"\u003e一元 RPC\u003c/h2\u003e\n\u003cp\u003e我们先来介绍一元 RPC，这是一种单向通信，客户端调用服务端的远程方法时，客户端发送请求至服务端并获得一个响应。\u003c/p\u003e\n\u003cp\u003e假设我们现在需要构建一个商城系统，商城系统有一个订单服务，提供了根据订单号查询订单的功能。\u003c/p\u003e\n\u003cp\u003e下面来实现这个功能，先使用 protocol buffer 来定义服务，然后再使用 gRPC 实现一元 RPC。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-protobuf\" data-lang=\"protobuf\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esyntax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;google/protobuf/wrappers.proto\u0026#34;\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eservice\u003c/span\u003e OrderManagement {\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003erpc\u003c/span\u003e getOrder(google.protobuf.StringValue) \u003cspan style=\"color:#66d9ef\"\u003ereturns\u003c/span\u003e (Order) {}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eOrder\u003c/span\u003e{\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e id \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e desc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e price \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e destination \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003erepeated\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e items \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来编写相应的服务端实现代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eserver\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eGetOrder\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderId\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewrapper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringValue\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOrder\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eord\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexists\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eorderMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eorderId\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eValue\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexists\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eord\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecodes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOK\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eErr\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrorf\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecodes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNotFound\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Order does not exist. : \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eorderId\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于只是简单的例子，所以使用了一个简单的 map 来存储订单信息，这里我们可以使用数据库来替代。\u003c/p\u003e","title":"GRPC 通信模式"},{"content":"静态分析是一种编译时的编译器检查，它可以检查代码的语法，语义，结构，等等，但是不能检查代码的运行时的错误。\n静态分析一般会集成在项目上线的 Ci 流程中，如果过程中出现了错误，那么项目就不能上线，避免了有问题的代码被部署上线。\n常见的 go linter 在 go 语言社区中，已经有了很多的 linter，这些 linter 可以帮助我们检查代码的语法，语义，结构等等，接下来我来介绍一些常见的 linter。\ngo lint go lint 是 go 官方推出的最早的 linter, 它可以检查导出函数是否有注释，变量、函数等名称是否符合官方规范。随着近年来的发展，各种 linter 已经层出不穷了，go lint 已经被 deprecated and frozen 了，官方推荐使用 Staticcheck 和 go vet 等 linter。\ngo vet go vet 也是官方提供的静态分析工具，其内置了锁拷贝检查、循环变量捕获问题、printf 参数不匹配等工具。 比如下面的例子：\npackage main import \u0026#34;sync\u0026#34; func main() { var wg sync.WaitGroup for _, v := range []int{0,1,2,3} { wg.Add(1) go func() { print(v) wg.Done() }() } wg.Wait() } 执行 go vet 命令会提示相应错误，如下图所示： 正确应该使用如下代码：\npackage main import \u0026#34;sync\u0026#34; func main() { var wg sync.WaitGroup for _, v := range []int{0,1,2,3} { wg.Add(1) v := v go func() { print(v) wg.Done() }() } wg.Wait() } 执行 go tool vet help 可以看到 go vet 已经内置了一些 linter，如下图所示： 在很多 IDE 中 已经内置了 go vet 的 linter，可以在代码修改时自动检查代码的错误，让我们可以快速发现代码错误。\nerrcheck 在我们编写 go 代码时，经常需要处理函数方法返回的 error 错误，但我们有时候对函数过于自信或忘记处理错误，这会导致出现各种不可知的错误，这时候我们可以使用 errcheck 工具来检查代码中的错误。\ngolangci-lint 随着各种各样的 linter 层出不穷，我们一个一个去使用 linter 工具去检查代码的问题，这样效率太低了，我们可以使用 golangci-lint 工具来检查代码的问题，它集成了较多的 linter, 我们可以通过配置文件选择我们需要的 linter 工具。\ngolangci-lint 的使用也很简单，只需在项目目录下执行 golangci-lint run 就可以执行 lint，找寻项目中存在的问题。\n参考链接 https://github.com/golang/lint https://github.com/golangci/golangci-lint ","permalink":"https://jasminides.com/posts/go-%E5%B8%B8%E8%A7%81-linter/","summary":"\u003cp\u003e静态分析是一种编译时的编译器检查，它可以检查代码的语法，语义，结构，等等，但是不能检查代码的运行时的错误。\u003c/p\u003e\n\u003cp\u003e静态分析一般会集成在项目上线的 Ci 流程中，如果过程中出现了错误，那么项目就不能上线，避免了有问题的代码被部署上线。\u003c/p\u003e\n\u003ch2 id=\"常见的-go-linter\"\u003e常见的 go linter\u003c/h2\u003e\n\u003cp\u003e在 go 语言社区中，已经有了很多的 linter，这些 linter 可以帮助我们检查代码的语法，语义，结构等等，接下来我来介绍一些常见的 linter。\u003c/p\u003e\n\u003ch3 id=\"go-lint\"\u003ego lint\u003c/h3\u003e\n\u003cp\u003ego lint 是 go 官方推出的最早的 linter, 它可以检查导出函数是否有注释，变量、函数等名称是否符合官方规范。随着近年来的发展，各种 linter 已经层出不穷了，go lint 已经被 deprecated and\nfrozen 了，官方推荐使用 Staticcheck 和 go vet 等 linter。\u003c/p\u003e\n\u003ch3 id=\"go-vet\"\u003ego vet\u003c/h3\u003e\n\u003cp\u003ego vet 也是官方提供的静态分析工具，其内置了锁拷贝检查、循环变量捕获问题、printf 参数不匹配等工具。\n比如下面的例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e} { \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tprint(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行 go vet 命令会提示相应错误，如下图所示：\n\u003cimg loading=\"lazy\" src=\"/img/lint/img.png\" alt=\"img.png\"  /\u003e\n\n正确应该使用如下代码：\u003c/p\u003e","title":"Go 常见 linter"},{"content":"WebAssembly 介绍 WebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C / C ++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。\nGo 1.11 向 WebAssembly 添加了一个实验性端口。Go 1.12 对其某些部分进行了改进，预计 Go 1.13 会进一步改进。\n简单入门 1 编写 main.go\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, WebAssembly!\u0026#34;) } 2 使用命令编译\nGOOS=js GOARCH=wasm go build -o main.wasm\n这将生成一个可以在浏览器中运行的 WebAssembly 文件。\n要在浏览器中执行 main.wasm，我们还需要一个 JavaScript 支持文件和一个 HTML 页面来将所有内容连接在一起。\n3 复制 js 支持文件\ncp \u0026quot;$(go env GOROOT)/misc/wasm/wasm_exec.js\u0026quot; .\n4 创建 HTML 页面\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;/\u0026gt; \u0026lt;script src=\u0026#34;wasm_exec.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const go = new Go(); WebAssembly.instantiateStreaming(fetch(\u0026#34;main.wasm\u0026#34;), go.importObject).then((result) =\u0026gt; { go.run(result.instance); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 5 启动 web 服务器\n在这里我使用 Python 启动一个简单 web 服务器\npython -m http.server 6 打开浏览器，访问 http://localhost:8000/index.html , 打开控制台查看输出，可以看到相应信息。\n你可以修改程序，重新编译 wasm, 刷新浏览器，可以看到新的变化。\n后记 使用 go 语言内置的 \u0026ldquo;syscall/js\u0026rdquo; 包，可以 go 语言中直接调用 javascript 的方法，包括对 DOM 树的操作。这里就不多介绍了。\n参考 https://github.com/golang/go/wiki/WebAssembly https://github.com/mbasso/awesome-wasm https://developer.mozilla.org/zh-CN/docs/WebAssembly ","permalink":"https://jasminides.com/posts/webassembly-in-go/","summary":"\u003ch2 id=\"webassembly-介绍\"\u003eWebAssembly 介绍\u003c/h2\u003e\n\u003cp\u003eWebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C / C\n++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。\u003c/p\u003e\n\u003cp\u003eGo 1.11 向 WebAssembly 添加了一个实验性端口。Go 1.12 对其某些部分进行了改进，预计 Go 1.13 会进一步改进。\u003c/p\u003e\n\u003ch2 id=\"简单入门\"\u003e简单入门\u003c/h2\u003e\n\u003cp\u003e1 编写 main.go\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, WebAssembly!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2 使用命令编译\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eGOOS=js GOARCH=wasm go build -o main.wasm\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这将生成一个可以在浏览器中运行的 WebAssembly 文件。\u003c/p\u003e\n\u003cp\u003e要在浏览器中执行 main.wasm，我们还需要一个 JavaScript 支持文件和一个 HTML 页面来将所有内容连接在一起。\u003c/p\u003e\n\u003cp\u003e3 复制 js 支持文件\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecp \u0026quot;$(go env GOROOT)/misc/wasm/wasm_exec.js\u0026quot; .\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e4 创建 HTML 页面\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wasm_exec.js\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGo\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eWebAssembly\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einstantiateStreaming\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efetch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main.wasm\u0026#34;\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003ego\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eimportObject\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ethen\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ego\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einstance\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e5 启动 web 服务器\u003c/p\u003e","title":"WebAssembly In Go"},{"content":"问题 今天在使用 K8S 部署应用时，遇到容器镜像拉取失败的错误 imagepullbackoff ，通过对应用整体资源清单的分析，发现是使用了使用私有仓库镜像，但是没有配置私有仓库，这样就会导致容器无法拉取镜像，这个问题可以通过配置私有仓库来解决。\n由于我使用了 Containerd 容器管理器，所以我需要配置私有仓库，并且配置私有仓库的地址为：https://docker.xx.vip. Containerd 没有 docker 配置私有仓库方便，需要修改 Containerd 配置文件进行配置，配置文件在 /etc/containerd/config.toml 中。\n配置私有仓库 Containerd 默认没有此配置文件，需要通过命令导出配置文件 containerd config default\u0026gt; /etc/containerd/config.toml (需要提前创建目录)。\n接下来我来讲解如何配置私有镜像仓库。\n打开配置文件 找到 [plugins.\u0026ldquo;io.containerd.grpc.v1.cri\u0026rdquo;.registry] 修改相应配置，具体配置如下： [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors.\u0026#34;docker.xx.vip\u0026#34;] endpoint = [\u0026#34;https://docker.xx.vip\u0026#34;] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.auths] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.configs] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.configs.\u0026#34;docker.xx.vip\u0026#34;.auth] username = \u0026#34;xx\u0026#34; password = \u0026#34;xx\u0026#34; [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.headers] 重启 containerd systemctl restart containerd.service\n查看 containerd systemctl status containerd.service\n回到 K8S 重新拉取镜像，可以看到镜像已经顺利拉取\n参考 https://colstuwjx.github.io/2018/02/%E5%8E%9F%E5%88%9B-%E5%B0%8F%E5%B0%9D-containerd%E4%B8%80/ https://github.com/containerd/containerd/issues/5246 ","permalink":"https://jasminides.com/posts/containerd-%E9%85%8D%E7%BD%AE%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e今天在使用 K8S 部署应用时，遇到容器镜像拉取失败的错误 imagepullbackoff\n，通过对应用整体资源清单的分析，发现是使用了使用私有仓库镜像，但是没有配置私有仓库，这样就会导致容器无法拉取镜像，这个问题可以通过配置私有仓库来解决。\u003c/p\u003e\n\u003cp\u003e由于我使用了 Containerd 容器管理器，所以我需要配置私有仓库，并且配置私有仓库的地址为：https://docker.xx.vip. Containerd 没有 docker 配置私有仓库方便，需要修改 Containerd\n配置文件进行配置，配置文件在 /etc/containerd/config.toml 中。\u003c/p\u003e\n\u003ch2 id=\"配置私有仓库\"\u003e配置私有仓库\u003c/h2\u003e\n\u003cp\u003eContainerd 默认没有此配置文件，需要通过命令导出配置文件 \u003ccode\u003econtainerd config default\u0026gt; /etc/containerd/config.toml\u003c/code\u003e (需要提前创建目录)。\u003c/p\u003e\n\u003cp\u003e接下来我来讲解如何配置私有镜像仓库。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e打开配置文件\u003c/li\u003e\n\u003cli\u003e找到 [plugins.\u0026ldquo;io.containerd.grpc.v1.cri\u0026rdquo;.registry]\u003c/li\u003e\n\u003cli\u003e修改相应配置，具体配置如下：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emirrors\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emirrors\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docker.xx.vip\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eendpoint\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://docker.xx.vip\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eauths\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econfigs\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econfigs\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docker.xx.vip\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eauth\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eusername\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003epassword\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e.\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io.containerd.grpc.v1.cri\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eregistry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eheaders\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\n\u003cp\u003e重启 containerd systemctl restart containerd.service\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e查看 containerd systemctl status containerd.service\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e回到 K8S 重新拉取镜像，可以看到镜像已经顺利拉取\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://colstuwjx.github.io/2018/02/%E5%8E%9F%E5%88%9B-%E5%B0%8F%E5%B0%9D-containerd%E4%B8%80/\"\u003ehttps://colstuwjx.github.io/2018/02/%E5%8E%9F%E5%88%9B-%E5%B0%8F%E5%B0%9D-containerd%E4%B8%80/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/containerd/containerd/issues/5246\"\u003ehttps://github.com/containerd/containerd/issues/5246\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Containerd 配置私有仓库"},{"content":"问题 最近在使用 MinIO SDK 上传资源对象时，出现了一个问题：The difference between the request time and the server's time is too large. 从错误信息可以看出客户端上传资源的时间与 Minio server 的时间相差太大，导致资源上传失败。\n解决 根据错误信息得出 server 端的时间出现异常，由于我采用容器部署的方式，因此可以先查看容器的时间是否正确。\n进入 Minio 容器 , 执行命令：date, 可以看到如图结果 ( UTC 时间): 而目前的时间是 ( CST 时间) :\n可以看出容器的时间与实际的时间相差太大，所以导致资源上传失败。\n方法 1 出现了时间异常的问题，可能很多人第一反应就是调整容器的时间，通过 ntpdate 等工具调整时间，这种解决方法方法适用于非容器的 MinIO SERVER 环境调整时间，容器因为一些限制无法使用此方法。\n方法 2 在网上查看了许多相关的问题，有了一个针对容器的解决方法，执行：\ndocker run --rm --privileged alpine hwclock -s 可以看到容器时间已经正常了：\n我对这条命令不太明白，不明白为什么会影响到其它运行中的容器，可能是与 docker for win 的一些容器实现机制相关。\n参考资料 https://stackoverflow.com/questions/4770635/s3-error-the-difference-between-the-request-time-and-the-current-time-is-too-la https://www.cnblogs.com/ryanlamp/p/13387358.html https://github.com/minio/minio-java/issues/701 ","permalink":"https://jasminides.com/posts/%E5%AE%B9%E5%99%A8%E5%87%BA%E7%8E%B0%E6%97%B6%E9%97%B4%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在使用 MinIO SDK 上传资源对象时，出现了一个问题：\u003ccode\u003eThe difference between the request time and the server's time is too large. \u003c/code\u003e\n从错误信息可以看出客户端上传资源的时间与 Minio server 的时间相差太大，导致资源上传失败。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e根据错误信息得出 server 端的时间出现异常，由于我采用容器部署的方式，因此可以先查看容器的时间是否正确。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e进入 Minio 容器 , 执行命令：\u003ccode\u003edate\u003c/code\u003e, 可以看到如图结果 ( UTC 时间):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/%e5%ae%b9%e5%99%a8%e5%87%ba%e7%8e%b0%e6%97%b6%e9%97%b4%e5%bc%82%e5%b8%b8%e9%97%ae%e9%a2%98%e5%8f%8a%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/date%e5%bc%82%e5%b8%b8.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e而目前的时间是 ( CST 时间) :\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/%e5%ae%b9%e5%99%a8%e5%87%ba%e7%8e%b0%e6%97%b6%e9%97%b4%e5%bc%82%e5%b8%b8%e9%97%ae%e9%a2%98%e5%8f%8a%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/%e6%ad%a3%e5%b8%b8%e6%97%b6%e9%97%b4.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看出容器的时间与实际的时间相差太大，所以导致资源上传失败。\u003c/p\u003e\n\u003ch3 id=\"方法-1\"\u003e方法 1\u003c/h3\u003e\n\u003cp\u003e出现了时间异常的问题，可能很多人第一反应就是调整容器的时间，通过 ntpdate 等工具调整时间，这种解决方法方法适用于非容器的 MinIO SERVER 环境调整时间，容器因为一些限制无法使用此方法。\u003c/p\u003e\n\u003ch3 id=\"方法-2\"\u003e方法 2\u003c/h3\u003e\n\u003cp\u003e在网上查看了许多相关的问题，有了一个针对容器的解决方法，执行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run --rm --privileged alpine hwclock -s\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到容器时间已经正常了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/%e5%ae%b9%e5%99%a8%e5%87%ba%e7%8e%b0%e6%97%b6%e9%97%b4%e5%bc%82%e5%b8%b8%e9%97%ae%e9%a2%98%e5%8f%8a%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/img.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e我对这条命令不太明白，不明白为什么会影响到其它运行中的容器，可能是与 docker for win 的一些容器实现机制相关。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e参考资料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/4770635/s3-error-the-difference-between-the-request-time-and-the-current-time-is-too-la\"\u003ehttps://stackoverflow.com/questions/4770635/s3-error-the-difference-between-the-request-time-and-the-current-time-is-too-la\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cnblogs.com/ryanlamp/p/13387358.html\"\u003ehttps://www.cnblogs.com/ryanlamp/p/13387358.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/minio/minio-java/issues/701\"\u003ehttps://github.com/minio/minio-java/issues/701\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"容器出现时间异常问题及解决方法"},{"content":"Consul 是一个全功能的服务网格解决方案，解决了操作微服务和云基础设施的网络和安全挑战。Consul 提供了一种软件驱动的路由和分段方法。它还带来了额外的好处，如故障处理、重试和网络可观察性。这些功能中的每一个都可以根据需要单独使用，也可以一起使用，建立一个完整的服务网格。\nConsul 是一个分布式系统，旨在运行在一个节点集群上。一个节点可以是一个物理服务器、云实例、虚拟机或容器。连接在一起的 Consul 运行的节点集被称为数据中心。在数据中心内，Consul 可以以服务器或客户端两种模式运行。服务器代理维护 Consul 的一致状态。客户端是一个轻量级的进程，运行在每个运行服务的节点上。一个数据中心将有 3-5 个服务器和许多客户端。\n安装 Consul Consul 的安装就不多介绍了，具体可以看看官网的教程 。\n运行 Consul 由于我采用了本地安装的方式，我将以开发模式运行 Consul , 在实际生产中不要使用这种方法运行部署。\n通过 consul agent -dev 在开发模式下启动 Consul 代理。\n可以看到 consul 代理已经顺利启动。\n通过 consul members 命令可以查看你的 consul 列表。\n输出显示代理、它的 IP 地址、它的健康状态、它在数据中心中的角色以及一些版本信息。您可以通过提供 - 详细标志来发现其他元数据。\n通过 members 命令查询的结果可能跟实际不太一样，通过 HTTP API 可以查询准确的结果 curl localhost:8500/v1/catalog/nodes。\n使用命令 consul leave 可以停止 consul 代理。\n注册服务 接下来介绍在 consul 注册一个服务。\nConsul 的主要功能之一是服务发现。Consul 提供了一个 DNS 接口，下游服务可以用它来寻找其上游依赖的 IP 地址。\nConsul 知道这些服务的位置，因为每个服务都在其本地 Consul 客户端注册。操作员可以手动注册服务，配置管理工具可以在部署服务时注册服务，或者容器编排平台可以通过集成自动注册服务。\n接下来我将通过配置文件手动注册服务。\n新建配置文件目录 mkdir ./consul.d 新建一个服务定义文件 echo \u0026#39;{ \u0026#34;service\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;rails\u0026#34; ], \u0026#34;port\u0026#34;: 80 } }\u0026#39; \u0026gt; ./consul.d/web.json 现在重新启动代理，使用命令行标志来指定配置目录，并在代理上启用脚本检查。 consul agent -dev -enable-script-checks -config-dir=./consul.d 可以看到服务已经注册好了。\n查询服务 上一节简单讲了如何注册服务，现在讲解通过 HTTP API 查询注册的服务。\ncurl http://localhost:8500/v1/catalog/service/web 小结 本篇文章主要简单的介绍了如何使用 consul，讲解的还不完全，其它的部分以后还会讲解。\n","permalink":"https://jasminides.com/posts/consul-%E5%AD%A6%E4%B9%A0/","summary":"\u003cp\u003eConsul 是一个全功能的服务网格解决方案，解决了操作微服务和云基础设施的网络和安全挑战。Consul 提供了一种软件驱动的路由和分段方法。它还带来了额外的好处，如故障处理、重试和网络可观察性。这些功能中的每一个都可以根据需要单独使用，也可以一起使用，建立一个完整的服务网格。\u003c/p\u003e\n\u003cp\u003eConsul 是一个分布式系统，旨在运行在一个节点集群上。一个节点可以是一个物理服务器、云实例、虚拟机或容器。连接在一起的 Consul 运行的节点集被称为数据中心。在数据中心内，Consul 可以以服务器或客户端两种模式运行。服务器代理维护 Consul 的一致状态。客户端是一个轻量级的进程，运行在每个运行服务的节点上。一个数据中心将有 3-5 个服务器和许多客户端。\u003c/p\u003e\n\u003ch2 id=\"安装-consul\"\u003e安装 Consul\u003c/h2\u003e\n\u003cp\u003eConsul 的安装就不多介绍了，具体可以看看官网的\u003ca href=\"https://learn.hashicorp.com/tutorials/consul/get-started-install?in=consul/getting-started%5D\"\u003e教程\u003c/a\u003e 。\u003c/p\u003e\n\u003ch2 id=\"运行-consul\"\u003e运行 Consul\u003c/h2\u003e\n\u003cp\u003e由于我采用了本地安装的方式，我将以开发模式运行 Consul , 在实际生产中不要使用这种方法运行部署。\u003c/p\u003e\n\u003cp\u003e通过 \u003ccode\u003econsul agent -dev\u003c/code\u003e 在开发模式下启动 Consul 代理。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/consul/consul1.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到 consul 代理已经顺利启动。\u003c/p\u003e\n\u003cp\u003e通过 consul members 命令可以查看你的 consul 列表。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/consul/consul2.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e输出显示代理、它的 IP 地址、它的健康状态、它在数据中心中的角色以及一些版本信息。您可以通过提供 - 详细标志来发现其他元数据。\u003c/p\u003e\n\u003cp\u003e通过 members 命令查询的结果可能跟实际不太一样，通过 HTTP API 可以查询准确的结果 \u003ccode\u003ecurl localhost:8500/v1/catalog/nodes\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/consul/consule3.png\" alt=\"consule3.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e使用命令 \u003ccode\u003econsul leave\u003c/code\u003e 可以停止 consul 代理。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/consul/consul4.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"注册服务\"\u003e注册服务\u003c/h2\u003e\n\u003cp\u003e接下来介绍在 consul 注册一个服务。\u003c/p\u003e\n\u003cp\u003eConsul 的主要功能之一是服务发现。Consul 提供了一个 DNS 接口，下游服务可以用它来寻找其上游依赖的 IP 地址。\u003c/p\u003e","title":"Consul 学习"},{"content":"今天介绍如何在 k8s 上安装 APISIX 相关组件 (Apache APISIX、Apache APISIX Dashboard、Apache APISIX Ingress Controller)。\nApache APISIX 由于 APISIX helm 组件将相关组件集合在一起了，所以只要装一个就好了。\n安装步骤 前提 要创建好相应的 PV . 命令 helm repo add apisix https://charts.apiseven.com helm repo update helm install apisix apisix/apisix --set gateway.type=NodePort --set ingress-controller.enabled=true --set dashboard.enabled=true --set etcd.volumePermissions.enabled=true --namespace ingress-apisix 如果看到如下信息并且执行 kubectl get pods -n ingress-apisix 就表示 apisix 安装成功。 NNAME: apisix LAST DEPLOYED: Wed Oct 27 03:00:23 2021 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: 1. Get the application URL by running these commands: export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; services apisix-gateway) export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\u0026#34;{.items[0].status.addresses[0].address}\u0026#34;) echo http://$NODE_IP:$NODE_PORT NAME READY STATUS RESTARTS AGE apisix-69459554d4-tc7sd 1/1 Running 0 8m49s apisix-etcd-0 1/1 Running 0 8m49s apisix-etcd-1 1/1 Running 0 8m49s apisix-etcd-2 1/1 Running 0 5m16s apisix-ingress-controller-678d8b5f6d-h6kq8 1/1 Running 0 8m49s 修改 apisix-dashboard service 的 spec.type 为 NodePort 安装过程的问题及解决 etcd pod 启动失败 2021-10-27 06:29:47.259764 C | etcdmain: cannot access data directory: mkdir /bitnami/etcd/data: permission denied\n解决 在安装时增加 \u0026mdash;set etcd.volumePermissions.enabled=true\n","permalink":"https://jasminides.com/posts/kubernetes-%E5%AE%89%E8%A3%85-apisix/","summary":"\u003cp\u003e今天介绍如何在 k8s 上安装 APISIX 相关组件 (Apache APISIX、Apache APISIX Dashboard、Apache APISIX Ingress Controller)。\u003c/p\u003e\n\u003ch2 id=\"apache-apisix\"\u003eApache APISIX\u003c/h2\u003e\n\u003cp\u003e由于 APISIX helm 组件将相关组件集合在一起了，所以只要装一个就好了。\u003c/p\u003e\n\u003ch3 id=\"安装步骤\"\u003e安装步骤\u003c/h3\u003e\n\u003col start=\"0\"\u003e\n\u003cli\u003e前提 要创建好相应的 PV .\u003c/li\u003e\n\u003cli\u003e命令\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm repo add apisix https://charts.apiseven.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm repo update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehelm install apisix apisix/apisix --set gateway.type=NodePort --set ingress-controller.enabled=true --set dashboard.enabled=true --set etcd.volumePermissions.enabled=true   --namespace ingress-apisix\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e如果看到如下信息并且执行 kubectl get pods -n ingress-apisix 就表示 apisix 安装成功。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNNAME: apisix\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLAST DEPLOYED: Wed Oct 27 03:00:23 2021\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNAMESPACE: default\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSTATUS: deployed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eREVISION: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTEST SUITE: None\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNOTES:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1. Get the application URL by running these commands:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; services apisix-gateway)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\u0026#34;{.items[0].status.addresses[0].address}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  echo http://$NODE_IP:$NODE_PORT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNAME                                         READY   STATUS    RESTARTS   AGE\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapisix-69459554d4-tc7sd                      1/1     Running   0          8m49s\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapisix-etcd-0                                1/1     Running   0          8m49s\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapisix-etcd-1                                1/1     Running   0          8m49s\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapisix-etcd-2                                1/1     Running   0          5m16s\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapisix-ingress-controller-678d8b5f6d-h6kq8   1/1     Running   0          8m49s\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e修改 apisix-dashboard service 的 spec.type 为 NodePort\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"安装过程的问题及解决\"\u003e安装过程的问题及解决\u003c/h2\u003e\n\u003ch3 id=\"etcd-pod-启动失败\"\u003eetcd pod 启动失败\u003c/h3\u003e\n\u003cp\u003e2021-10-27 06:29:47.259764 C | etcdmain: cannot access data directory: mkdir /bitnami/etcd/data: permission denied\u003c/p\u003e","title":"Kubernetes 安装 APISIX"},{"content":"本篇文章介绍如何在 k8s 集群上安装 rancher。\n前提 需要安装 kubectl 和 helm。\n安装 Rancher Helm Chart 添加 helm chart 仓库 使用 helm repo add rancher-\u0026lt;CHART_REPO\u0026gt; https://releases.rancher.com/server-charts/\u0026lt;CHART_REPO\u0026gt; 添加 helm 仓库。\n请将命令中的\u0026lt;CHART_REPO\u0026gt;，替换为 latest，stable 或 alpha。更多信息，请查看选择 Rancher 版本来选择最适合您的仓库。\nlatest: 建议在尝试新功能时使用。\nstable: 建议在生产环境中使用。（推荐）\nalpha: 未来版本的实验性预览。\n创建 Namespace 创建一个名为 cattle-system 的 Namespace。\nkubectl create namespace cattle-system 安装 cert-manager # 如果你手动安装了CRD，而不是在Helm安装命令中添加了`--set installCRDs=true`选项，你应该在升级Helm chart之前升级CRD资源。 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml # 添加 Jetstack Helm 仓库 helm repo add jetstack https://charts.jetstack.io # 更新本地 Helm chart 仓库缓存 helm repo update # 安装 cert-manager Helm chart helm install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.5.1 安装完 cert-manager 后，您可以通过检查 cert-manager 命名空间中正在运行的 Pod 来验证它是否已正确部署：\nkubectl get pods --namespace cert-manager master@master:~$ kubectl get pods --namespace cert-manager NAME READY STATUS RESTARTS AGE cert-manager-56b686b465-q7c4d 1/1 Running 0 51s cert-manager-cainjector-75c94654d-j9x6m 1/1 Running 0 51s cert-manager-webhook-69bd5c9d75-jxbgw 1/1 Running 0 51s 根据您选择的 SSL 选项，通过 Helm 安装 Rancher 将 设置为 hostname 您指向负载均衡器的 DNS 名称。将 设置 bootstrapPassword 为 admin 用户独特的东西。\nhelm install rancher rancher-stable/rancher --namespace cattle-system --set hostname=rancher.xx.vip 验证 Rancher Server 部署成功 执行 kubectl -n cattle-system get deploy rancher , 如看到 kubectl -n cattle-system get deploy rancher 就表示安装成功。\n","permalink":"https://jasminides.com/posts/%E8%AE%BE%E7%BD%AE-rancher-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0-kubernetes-%E9%9B%86%E7%BE%A4/","summary":"\u003cp\u003e本篇文章介绍如何在 k8s 集群上安装 rancher。\u003c/p\u003e\n\u003ch2 id=\"前提\"\u003e前提\u003c/h2\u003e\n\u003cp\u003e需要安装 kubectl 和 helm。\u003c/p\u003e\n\u003ch2 id=\"安装-rancher-helm-chart\"\u003e安装 Rancher Helm Chart\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e添加 helm chart 仓库\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e使用 helm repo add rancher-\u0026lt;CHART_REPO\u0026gt; \u003ca href=\"https://releases.rancher.com/server-charts/\"\u003ehttps://releases.rancher.com/server-charts/\u003c/a\u003e\u0026lt;CHART_REPO\u0026gt; 添加 helm 仓库。\u003c/p\u003e\n\u003cp\u003e请将命令中的\u0026lt;CHART_REPO\u0026gt;，替换为 latest，stable 或 alpha。更多信息，请查看选择 Rancher 版本来选择最适合您的仓库。\u003c/p\u003e\n\u003cp\u003elatest: 建议在尝试新功能时使用。\u003c/p\u003e\n\u003cp\u003estable: 建议在生产环境中使用。（推荐）\u003c/p\u003e\n\u003cp\u003ealpha: 未来版本的实验性预览。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e创建 Namespace\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e创建一个名为 cattle-system 的 Namespace。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl create namespace cattle-system\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e安装 cert-manager\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# 如果你手动安装了CRD，而不是在Helm安装命令中添加了\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e--set installCRDs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e选项，你应该在升级Helm chart之前升级CRD资源。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e# 添加 Jetstack Helm 仓库\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003ehelm repo add jetstack https://charts.jetstack.io\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e# 更新本地 Helm chart 仓库缓存\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003ehelm repo update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003e# 安装 cert-manager Helm chart\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003ehelm install cert-manager jetstack/cert-manager \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --namespace cert-manager \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --create-namespace \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --version v1.5.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装完 cert-manager 后，您可以通过检查 cert-manager 命名空间中正在运行的 Pod 来验证它是否已正确部署：\u003c/p\u003e","title":"设置 Rancher 服务器的本地 Kubernetes 集群"},{"content":"今天介绍使用 sealos 一键部署 Kubernetes 集群，sealos 是只能用丝滑一词形容的 kubernetes 高可用安装（kubernetes install）工具，一条命令，离线安装，包含所有依赖，内核负载不依赖 haproxy keepalived，纯 golang 开发，99 年证书，支持 v1.20.0 v1.19.5 v1.18.13 v1.17.15!\nsealos 支持的环境 Linux 发行版，CPU 架构 Debian 9+, x86_64/ arm64 Ubuntu 16.04, 18.04, 20.04, x86_64/ arm64 Centos/RHEL 7.6+, x86_64/ arm64 其他支持 systemd 的系统环境。x86_64/ arm64 Kylin arm64 kubernetes 版本 1.16+ 1.17+ 1.18+ 1.19+ 1.20+ 1.21+ 1.22+ 要求和建议 最低资源要求\n2 vCpu 4G Ram 40G+ 存储 操作系统要求\nssh 可以访问各安装节点 各节点主机名不相同，并满足 kubernetes 的主机名要求。 各节点时间同步 网卡名称如果是不常见的，建议修改成规范的网卡名称，如 (eth.|en.|em.*) kubernetes1.20+ 使用 containerd 作为 cri. 不需要用户安装 docker/containerd. sealos 会安装 1.3.9 版本 containerd。 kubernetes1.19 及以下 使用 docker 作为 cri。也不需要用户安装 docker。sealos 会安装 1.19.03 版本 docker 网络和 DNS 要求：\n确保 /etc/resolv.conf 中的 DNS 地址可用。否则，可能会导致群集中 coredns 异常。 如果使用阿里云/华为云主机部署。默认的 pod 网段会和阿里云的 dns 网段冲突，建议自定义修改 pod 网段，在 init 的时候指定--podcidr 来修改。 sealos 默认会关闭防火墙，如果需要打开防火墙，建议手动放行相关的端口。 内核要求：\ncni 组件选择 cilium 时要求内核版本不低于 5.4 安装部署 下载并安装 sealos, sealos 是个 golang 的二进制工具，直接下载拷贝到 bin 目录即可，release 页面也可下载 wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/latest/sealos \u0026amp;\u0026amp; \\ chmod +x sealos \u0026amp;\u0026amp; mv sealos /usr/bin 提前下载好对应 k8s 的离线资源包 kube1.22.1.tar.gz。 安装一个单 master 三个 node 的 kubernetes 集群 sealos init --passwd \u0026#39;123456\u0026#39; \\ --master 192.168.1.45 \\ --node 192.168.1.46 --node 192.168.1.47 --node 192.168.1.48 \\ --pkg-url ~/kube1.22.1.tar.gz \\ --version v1.22.1 过了一会儿，可以看到如下场景， 执行 kubectl cluster-info 和 kubectl get nodes ,可以看到如下场景，表示 K8S 顺利部署安装。 清理集群 使用 sealos clean \u0026ndash;all 可以清理集群\n参考 https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ https://github.com/fanux/sealos https://www.sealyun.com/instructions ","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-sealos-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4/","summary":"\u003cp\u003e今天介绍使用 sealos 一键部署 Kubernetes 集群，sealos 是只能用丝滑一词形容的 kubernetes 高可用安装（kubernetes\ninstall）工具，一条命令，离线安装，包含所有依赖，内核负载不依赖 haproxy keepalived，纯 golang 开发，99 年证书，支持 v1.20.0 v1.19.5 v1.18.13 v1.17.15!\u003c/p\u003e\n\u003ch2 id=\"sealos-支持的环境\"\u003esealos 支持的环境\u003c/h2\u003e\n\u003ch3 id=\"linux-发行版cpu-架构\"\u003eLinux 发行版，CPU 架构\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDebian 9+, x86_64/ arm64\u003c/li\u003e\n\u003cli\u003eUbuntu 16.04, 18.04, 20.04, x86_64/ arm64\u003c/li\u003e\n\u003cli\u003eCentos/RHEL 7.6+, x86_64/ arm64\u003c/li\u003e\n\u003cli\u003e其他支持 systemd 的系统环境。x86_64/ arm64\u003c/li\u003e\n\u003cli\u003eKylin arm64\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"kubernetes-版本\"\u003ekubernetes 版本\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e1.16+\u003c/li\u003e\n\u003cli\u003e1.17+\u003c/li\u003e\n\u003cli\u003e1.18+\u003c/li\u003e\n\u003cli\u003e1.19+\u003c/li\u003e\n\u003cli\u003e1.20+\u003c/li\u003e\n\u003cli\u003e1.21+\u003c/li\u003e\n\u003cli\u003e1.22+\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"要求和建议\"\u003e要求和建议\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e最低资源要求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e2 vCpu\u003c/li\u003e\n\u003cli\u003e4G Ram\u003c/li\u003e\n\u003cli\u003e40G+ 存储\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e操作系统要求\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003essh 可以访问各安装节点\u003c/li\u003e\n\u003cli\u003e各节点主机名不相同，并满足 kubernetes 的主机名要求。\u003c/li\u003e\n\u003cli\u003e各节点时间同步\u003c/li\u003e\n\u003cli\u003e网卡名称如果是不常见的，建议修改成规范的网卡名称，如 (eth.\u003cem\u003e|en.\u003c/em\u003e|em.*)\u003c/li\u003e\n\u003cli\u003ekubernetes1.20+ 使用 containerd 作为 cri. 不需要用户安装 docker/containerd. sealos 会安装 1.3.9 版本 containerd。\u003c/li\u003e\n\u003cli\u003ekubernetes1.19 及以下 使用 docker 作为 cri。也不需要用户安装 docker。sealos 会安装 1.19.03 版本 docker\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e网络和 DNS 要求：\u003c/p\u003e","title":"使用 sealos 部署 Kubernetes 集群"},{"content":"出现的问题 最近在使用 kratos 开发 api 的时候，由于通过 proto 生成的 server handler 不符合业务的需求，需要通过自定义 handlerFunc 来定义接口。在开发中为了程序的可观测性，我使用了 kratos 提供的 logging 中间件。\n在使用的过程中，我发现自定义的 HandlerFunc 的请求日志没有显示，而 proto 生成的请求正确显示了。\n问题的原因 为了找到出现这种情况的原因，我在官方的 Github 仓库提了个 issue(#1566), 得到了维护人员的解答。\n出现这种情况的原因是 自己定义的 handlerFunc 不走 middleware 中间件，需要自定义 http filter 才能解决。\n解决 经过对 http filter 例子的简单研究，参考了官方的 logging 中间件，我自己实现了 logging filter.\n代码：\npackage middleware import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/errors\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/log\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/transport\u0026#34; ) func Server(logger log.Logger) func(next http.Handler) http.Handler { return func(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { var ( code int32 reason string kind string operation string ) ctx := r.Context() startTime := time.Now() if info, ok := transport.FromServerContext(ctx); ok { kind = info.Kind().String() operation = info.Operation() } next.ServeHTTP(w, r) if se := errors.FromError(nil); se != nil { code = se.Code reason = se.Reason } level, stack := extractError(nil) _ = log.WithContext(ctx, logger).Log(level, \u0026#34;kind\u0026#34;, \u0026#34;server\u0026#34;, \u0026#34;component\u0026#34;, kind, \u0026#34;operation\u0026#34;, operation, \u0026#34;args\u0026#34;, extractArgs(r), \u0026#34;code\u0026#34;, code, \u0026#34;reason\u0026#34;, reason, \u0026#34;stack\u0026#34;, stack, \u0026#34;latency\u0026#34;, time.Since(startTime).Seconds(), ) }) } } // extractArgs returns the string of the req func extractArgs(req interface{}) string { if stringer, ok := req.(fmt.Stringer); ok { return stringer.String() } return fmt.Sprintf(\u0026#34;%+v\u0026#34;, req) } // extractError returns the string of the error func extractError(err error) (log.Level, string) { if err != nil { return log.LevelError, fmt.Sprintf(\u0026#34;%+v\u0026#34;, err) } return log.LevelInfo, \u0026#34;\u0026#34; } 顺利的显示了请求的日志：\nINFO ts=2021-10-22T21:21:23+08:00 caller=logging.go:34 service.id=DESKTOP-DE38CMV service.name= service.version= trace_id= span_id= kind=server component=http op eration=/test args=\u0026amp;{Method:GET URL:/test Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,image /avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9] Accept-Encoding:[gzip, deflate, br] Accept-Language:[zh,zh-CN;q=0.9] Cache-Control: [max-age=0] Connection:[keep-alive] Cookie:[Pycharm-c725b11f=c83c5d07-f28a-4c41-8b0f-c4c1664b7990; _ga=GA1.1.862586244.1625668431] Sec-Ch-Ua:[\u0026#34;Chromium\u0026#34;;v=\u0026#34;94\u0026#34;, \u0026#34;Google Chrome\u0026#34;;v=\u0026#34;94\u0026#34;, \u0026#34;;Not A Brand\u0026#34;;v=\u0026#34;99\u0026#34;] Sec-Ch-Ua-Mobile:[?0] Sec-Ch-Ua-Platform:[\u0026#34;Windows\u0026#34;] Sec-Fetch-Dest:[document] Sec-Fetch-Mode:[navigate] Sec-Fetch -Site:[none] Sec-Fetch-User:[?1] Upgrade-Insecure-Requests:[1] User-Agent:[Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrom e/94.0.4606.81 Safari/537.36]] Body:{} GetBody:\u0026lt;nil\u0026gt; ContentLength:0 TransferEncoding:[] Close:false Host:localhost:8000 Form:map[] PostForm:map[] MultipartForm: \u0026lt;nil\u0026gt; Trailer:map[] RemoteAddr:[::1]:8787 RequestURI:/test TLS:\u0026lt;nil\u0026gt; Cancel:\u0026lt;nil\u0026gt; Response:\u0026lt;nil\u0026gt; ctx:0xc0000f4c90} code=0 reason= stack= latency=0 参考 https://github.com/go-kratos/kratos/blob/main/examples/http/middlewares/middlewares.go https://github.com/go-kratos/kratos/issues/1566 ","permalink":"https://jasminides.com/posts/kratos-%E8%87%AA%E5%AE%9A%E4%B9%89-handler-func-%E6%B2%A1%E6%9C%89%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/","summary":"\u003ch2 id=\"出现的问题\"\u003e出现的问题\u003c/h2\u003e\n\u003cp\u003e最近在使用 kratos 开发 api 的时候，由于通过 proto 生成的 server handler 不符合业务的需求，需要通过自定义 handlerFunc 来定义接口。在开发中为了程序的可观测性，我使用了 kratos 提供的 logging 中间件。\u003c/p\u003e\n\u003cp\u003e在使用的过程中，我发现自定义的 HandlerFunc 的请求日志没有显示，而 proto 生成的请求正确显示了。\u003c/p\u003e\n\u003ch2 id=\"问题的原因\"\u003e问题的原因\u003c/h2\u003e\n\u003cp\u003e为了找到出现这种情况的原因，我在官方的 Github 仓库提了个 issue(#1566), 得到了维护人员的解答。\u003c/p\u003e\n\u003cp\u003e出现这种情况的原因是 自己定义的 handlerFunc 不走 middleware 中间件，需要自定义 http filter 才能解决。\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e经过对 http filter 例子的简单研究，参考了官方的 logging 中间件，我自己实现了 logging filter.\u003c/p\u003e\n\u003cp\u003e代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emiddleware\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-kratos/kratos/v2/errors\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-kratos/kratos/v2/log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-kratos/kratos/v2/transport\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandlerFunc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eResponseWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ecode\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ereason\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ekind\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003estartTime\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etransport\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFromServerContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ekind\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eKind\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOperation\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServeHTTP\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ese\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFromError\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003ese\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ecode\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ese\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ereason\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ese\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReason\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elevel\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eextractError\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWithContext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eLog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elevel\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;server\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;component\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekind\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;args\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eextractArgs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecode\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;reason\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereason\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;stack\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;latency\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSince\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estartTime\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eSeconds\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// extractArgs returns the string of the req\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eextractArgs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estringer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringer\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estringer\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%+v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// extractError returns the string of the error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eextractError\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLevel\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLevelError\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%+v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLevelInfo\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e顺利的显示了请求的日志：\u003c/p\u003e","title":"kratos 自定义 handler func 没有请求日志的问题及解决"},{"content":"test\n","permalink":"https://jasminides.com/posts/rsstest/","summary":"\u003cp\u003etest\u003c/p\u003e","title":"Rsstest"},{"content":"问题 最近需要使用 rand 包随机 time.Sleep() 的时间，我的代码是这样的：\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func main() { rand.Seed(time.Now().UTC().UnixNano()) n := rand.Intn(10) time.Sleep(n * time.Second) } 会遇到下面的问题：\nCannot use \u0026#39;n * time.Second\u0026#39; (type int) as the type Duration Invalid operation: n * time.Second (mismatched types int and Duration) 解决的方法 使用 time.Duration 转换类型，代码如下：\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func main() { rand.Seed(time.Now().UTC().UnixNano()) n := rand.Intn(10) time.Sleep(time.Duration(n) * time.Second) } 问题的原因 time.Sleep 方法接收的类型是 Duration 类型。\nfunc Sleep(d Duration) 当我们要 sleep 5s 时，参数是 5 * time.Second, Second 又是 1000 * Millisecond, Millisecond 是 1000 * Microsecond，Microsecond 是 1000 * Nanosecond,Nanosecond 是 1 纳秒，它的类型就是 Duration。最后 5s 就变成 5000000000 数值。\n问题的引申 在我们使用 sleep 方法时，可以发现我们可以直接使用 time.Sleep(2 * time.Second), 这是为什么呢？\npackage main import ( \u0026#34;time\u0026#34; ) func main() { time.Sleep(time.Duration(2) * time.Second) time.Sleep(2 * time.Second) } 通过 go tool compile -S main.go 生成汇编代码，通过分析可以看出 golang 已经帮我们优化了 time.Duration 的转换。\n","permalink":"https://jasminides.com/posts/golang-%E9%9A%8F%E6%9C%BA-time.sleep-%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近需要使用 rand 包随机 time.Sleep() 的时间，我的代码是这样的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSeed\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eUTC\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eUnixNano\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eIntn\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e会遇到下面的问题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCannot use \u0026#39;n * time.Second\u0026#39; (type int) as the type Duration\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInvalid operation: n * time.Second (mismatched types int and Duration)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"解决的方法\"\u003e解决的方法\u003c/h2\u003e\n\u003cp\u003e使用 time.Duration 转换类型，代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSeed\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eUTC\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eUnixNano\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eIntn\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDuration\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"问题的原因\"\u003e问题的原因\u003c/h2\u003e\n\u003cp\u003etime.Sleep 方法接收的类型是 Duration 类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDuration\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当我们要 sleep 5s 时，参数是 5 * time.Second, Second 又是 1000 * Millisecond, Millisecond 是 1000 * Microsecond，Microsecond 是 1000 *\nNanosecond,Nanosecond 是 1 纳秒，它的类型就是 Duration。最后 5s 就变成 5000000000 数值。\u003c/p\u003e","title":"golang 随机 time.Sleep 出现的问题"},{"content":"在我们的 go 应用程序中，我们如果想要查看应用程序的相关指标，该如何操作呢？\n解决 Prometheus 的官方 pkg 提供了 promhttp.Handler() 方法，但是该方法返回了一个 http.Handler 接口， 不满足 gin 所使用的类型，我们采用其他的方法进行。\n具体的代码：\npromhttp.InstrumentMetricHandler(prometheus.DefaultRegisterer, promhttp.HandlerFor(prometheus.DefaultGatherer, promhttp.HandlerOpts{ DisableCompression: true, })).ServeHTTP(c.Writer, c.Request) 通过在路由处理函数中添加此代码，就能顺利的展示与应用程序相关的指标。\n如果想要自定义指标，你只需将自定义的指标进行相应的注册。\n参考链接 https://github.com/prometheus/client_golang ","permalink":"https://jasminides.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8-gin-%E4%B8%AD%E6%9F%A5%E7%9C%8B-prometheus-%E6%8C%87%E6%A0%87/","summary":"\u003cp\u003e在我们的 go 应用程序中，我们如果想要查看应用程序的相关指标，该如何操作呢？\u003c/p\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003ePrometheus 的官方  \u003ca href=\"https://github.com/prometheus/client_golang\"\u003epkg\u003c/a\u003e 提供了 promhttp.Handler() 方法，但是该方法返回了一个 http.Handler 接口，\n不满足 gin 所使用的类型，我们采用其他的方法进行。\u003c/p\u003e\n\u003cp\u003e具体的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003epromhttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInstrumentMetricHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eprometheus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDefaultRegisterer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epromhttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandlerFor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eprometheus\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDefaultGatherer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epromhttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandlerOpts\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eDisableCompression\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})).\u003cspan style=\"color:#a6e22e\"\u003eServeHTTP\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWriter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequest\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过在路由处理函数中添加此代码，就能顺利的展示与应用程序相关的指标。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/gin_prometheus.png\" alt=\"img.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e如果想要自定义指标，你只需将自定义的指标进行相应的注册。\u003c/p\u003e\n\u003ch2 id=\"参考链接\"\u003e参考链接\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/prometheus/client_golang\"\u003ehttps://github.com/prometheus/client_golang\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"如何在 gin 中查看 Prometheus 指标"},{"content":"今天我来讲一讲如何使用 Prometheus 获取 MinIO 指标。\n前提 需要部署好 Prometheus、Minio 服务和配置好 Minio Client , MinIO 和 Prometheus 的网络需要可互相访问。\n步骤 1. 生成 JWT 令牌 使用以下命令生成 JWT bearer token\nmc admin Prometheus generate ALIAS 请将 ALIAS 替换成你的 MinIO 主机服务名。\n该命令会产生如下的信息输出：\nscrape_configs: - job_name: minio-job bearer_token: token metrics_path: /minio/v2/metrics/cluster scheme: http static_configs: - targets: [minIOip] 配置 Prometheus Targets 将上一个步骤输出的信息添加至 Targets 配置文件 (Prometheus.yml) 中，重新启动 Prometheus 服务。\n查询 Prometheus 指标 添加重启完 Prometheus 服务后，我们就可以在 Prometheus 界面查询 Minio 相关的指标。例如：我们可以通过 minio_bucket_usage_object_total 指标查询 bucket 的对象总数。\n使用 grafana 可视化指标 Minio 官方还提供了一个 grafana 仪表盘来可视化展示指标 (仪表盘 ID 13502).\n","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-prometheus-%E6%94%B6%E9%9B%86-minio-%E6%8C%87%E6%A0%87/","summary":"\u003cp\u003e今天我来讲一讲如何使用 Prometheus 获取 MinIO 指标。\u003c/p\u003e\n\u003ch2 id=\"前提\"\u003e前提\u003c/h2\u003e\n\u003cp\u003e需要部署好 Prometheus、Minio 服务和配置好 Minio Client , MinIO 和 Prometheus 的网络需要可互相访问。\u003c/p\u003e\n\u003ch2 id=\"步骤\"\u003e步骤\u003c/h2\u003e\n\u003ch3 id=\"1-生成-jwt-令牌\"\u003e1. 生成 JWT 令牌\u003c/h3\u003e\n\u003cp\u003e使用以下命令生成 JWT bearer token\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003emc admin Prometheus generate ALIAS\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请将 ALIAS 替换成你的 MinIO 主机服务名。\u003c/p\u003e\n\u003cp\u003e该命令会产生如下的信息输出：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003escrape_configs:\n- job_name: minio-job\n  bearer_token: token\n  metrics_path: /minio/v2/metrics/cluster\n  scheme: http\n  static_configs:\n  - targets: [minIOip]\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"配置-prometheus-targets\"\u003e配置 Prometheus Targets\u003c/h3\u003e\n\u003cp\u003e将上一个步骤输出的信息添加至 Targets 配置文件 (Prometheus.yml) 中，重新启动 Prometheus 服务。\u003c/p\u003e\n\u003ch3 id=\"查询-prometheus-指标\"\u003e查询 Prometheus 指标\u003c/h3\u003e\n\u003cp\u003e添加重启完 Prometheus 服务后，我们就可以在 Prometheus 界面查询 Minio 相关的指标。例如：我们可以通过 minio_bucket_usage_object_total 指标查询 bucket 的对象总数。\u003c/p\u003e","title":"使用 Prometheus 收集 MinIO 指标"},{"content":"上一篇文章介绍了分布式链路的标准 OpenTracing, 在 OpenTracing 的官网我们可以看到这样一条信息 OpenTracing and OpenCensus have merged to form OpenTelemetry!。 可以看到 OpenTracing 和 OpenCensus 已经被合并为 OpenTelemetry 了。\nOpenCensus 是什么呢？OpenTracing 是最早为分布式追踪制定了一套平台无关、厂商无关的协议标准的项目，并以此成为了 CNCF 的孵化项目。在之后，谷歌牵头，微软加入，创建了 OpenCensus 项目统一 Metrics 基础指标监控的使用方式，还做了 OpenTracing 的老本行：分布式追踪。\nOpenTelemetry OpenTelemetry 的自身定位十分明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。\nOpenTelemetry 的终极目标十分伟大：实现 Metrics、Tracing、Logging 的融合及大一统，作为 APM 的数据采集终极解决方案。\n目前 OpenTelemetry 正式成为 CNCF 的孵化项目，OpenTracing 和 OpenCensus 不再维护，OpenTracing 目前是 CNCF 的存档项目。\nOpenTelemetry 的一些基础知识是兼容 OpenTracing 的，只有一些 API 是不同的。\nOpenTelemetry for go 我们继续使用上文的代码，对上文的代码进行修改。\ninstall 依赖 go get go.opentelemetry.io/otel@v1.0.0-RC1 go.opentelemetry.io/otel/sdk@v1.0.0-RC1 go.opentelemetry.io/otel/exporters/stdout/stdouttrace@v1.0.0-RC1 go.opentelemetry.io/otel/trace@v1.0.0-RC1 go get -u go.opentelemetry.io/otel/exporters/jaeger OpenTelemetry 官方为多种开源框架提供了开箱即用的 Instrumentation Packages，如 gin , beego , mux , go-kit 等，当然也支持 net/http 标准库 ，更多可浏览 opentelemetry-go-contrib 仓库。\n我们使用的是 gin, 所以安装相应的依赖 :\ngo get go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin 对原有代码进行修改，修改后的代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/jaeger\u0026#34; \u0026#34;go.opentelemetry.io/otel/propagation\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; tracesdk \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.4.0\u0026#34; \u0026#34;go.opentelemetry.io/otel/trace\u0026#34; ) var ( addr = \u0026#34;:8080\u0026#34; ) // tracerProvider returns an OpenTelemetry TracerProvider configured to use // the Jaeger exporter that will send spans to the provided url. The returned // TracerProvider will also use a Resource configured with all the information // about the application. func tracerProvider(url string) (*tracesdk.TracerProvider, error) { // Create the Jaeger exporter exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url))) if err != nil { return nil, err } tp := tracesdk.NewTracerProvider( tracesdk.WithSampler(tracesdk.AlwaysSample()), tracesdk.WithBatcher(exp), tracesdk.WithResource(resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceNameKey.String(\u0026#34;opentelemetry-overstarry\u0026#34;), // 服务名 semconv.ServiceVersionKey.String(\u0026#34;0.0.1\u0026#34;), attribute.String(\u0026#34;environment\u0026#34;, \u0026#34;test\u0026#34;), )), ) otel.SetTracerProvider(tp) otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{})) return tp, nil } func main() { tp, err := tracerProvider(\u0026#34;http://localhost:14268/api/traces\u0026#34;) if err != nil { log.Fatal(err) } ctx, cancel := context.WithCancel(context.Background()) defer cancel() // Cleanly shutdown and flush telemetry when the application exits. defer func(ctx context.Context) { // Do not make the application hang when it is shutdown. ctx, cancel = context.WithTimeout(ctx, time.Second*5) defer cancel() if err := tp.Shutdown(ctx); err != nil { log.Fatal(err) } }(ctx) engine := gin.New() engine.Use(otelgin.Middleware(\u0026#34;server\u0026#34;)) engine.GET(\u0026#34;/\u0026#34;, indexHandler) engine.GET(\u0026#34;/home\u0026#34;, homeHandler) engine.GET(\u0026#34;/async\u0026#34;, serviceHandler) engine.GET(\u0026#34;/service\u0026#34;, serviceHandler) engine.GET(\u0026#34;/db\u0026#34;, dbHandler) err = engine.Run(addr) if err != nil { return } } func dbHandler(c *gin.Context) { ctx := c.Request.Context() span := trace.SpanFromContext(otel.GetTextMapPropagator().Extract(ctx, propagation.HeaderCarrier(c.Request.Header))) defer span.End() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func serviceHandler(c *gin.Context) { ctx := c.Request.Context() // 通过 http header，提取 span 元数据信息 span := trace.SpanFromContext(otel.GetTextMapPropagator().Extract(ctx, propagation.HeaderCarrier(c.Request.Header))) defer span.End() dbReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/db\u0026#34;, nil) otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(dbReq.Header)) if _, err := http.DefaultClient.Do(dbReq); err != nil { span.RecordError(err) attribute.String(\u0026#34;请求 /db error\u0026#34;, err.Error()) } time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func homeHandler(c *gin.Context) { c.Header(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html; charset=utf-8\u0026#34;) c.String(200, \u0026#34;开始请求...\\n\u0026#34;) ctx := c.Request.Context() // 设置一个根节点 span span := trace.SpanFromContext(ctx) defer span.End() asyncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/async\u0026#34;, nil) otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(asyncReq.Header)) go func() { if _, err := http.DefaultClient.Do(asyncReq); err != nil { span.RecordError(err) span.SetAttributes(attribute.String(\u0026#34;请求 /async error\u0026#34;, err.Error())) } }() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) syncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/service\u0026#34;, nil) otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(syncReq.Header)) if _, err := http.DefaultClient.Do(syncReq); err != nil { span.RecordError(err) span.SetAttributes(attribute.String(\u0026#34;请求 /service error\u0026#34;, err.Error())) } c.String(200, \u0026#34;请求结束！\u0026#34;) } func indexHandler(c *gin.Context) { c.Header(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html; charset=utf-8\u0026#34;) c.String(200, string(`\u0026lt;a href=\u0026#34;/home\u0026#34;\u0026gt; 点击发起请求 \u0026lt;/a\u0026gt;`)) } 运行项目 代码修改完，现在运行项目，现在访问 Jaeger UI, 可以看到已经有请求调用的链条了。 小结 今天继续讲了分布式链路追踪的最新标准 OpenTelemetry, 并使用相应 SDK 编写了相应的代码。\n相应代码：https://github.com/overstarry/tracing-demo\n参考链接 https://opentelemetry.io/docs/concepts/components/ https://github.com/open-telemetry https://github.com/overstarry/tracing-demo ","permalink":"https://jasminides.com/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%88%9D%E6%8E%A2-2/","summary":"\u003cp\u003e上一篇文章介绍了分布式链路的标准 OpenTracing, 在 OpenTracing 的官网我们可以看到这样一条信息  \u003cstrong\u003eOpenTracing and OpenCensus have merged to form\nOpenTelemetry!。\u003c/strong\u003e 可以看到 OpenTracing 和 OpenCensus 已经被合并为 OpenTelemetry 了。\u003c/p\u003e\n\u003cp\u003eOpenCensus 是什么呢？OpenTracing 是最早为分布式追踪制定了一套平台无关、厂商无关的协议标准的项目，并以此成为了 CNCF 的孵化项目。在之后，谷歌牵头，微软加入，创建了 OpenCensus 项目统一\nMetrics 基础指标监控的使用方式，还做了 OpenTracing 的老本行：分布式追踪。\u003c/p\u003e\n\u003ch2 id=\"opentelemetry\"\u003eOpenTelemetry\u003c/h2\u003e\n\u003cp\u003eOpenTelemetry 的自身定位十分明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。\u003c/p\u003e\n\u003cp\u003eOpenTelemetry 的终极目标十分伟大：实现 Metrics、Tracing、Logging 的融合及大一统，作为 APM 的数据采集终极解决方案。\u003c/p\u003e\n\u003cp\u003e目前 OpenTelemetry 正式成为 CNCF 的孵化项目，OpenTracing 和 OpenCensus 不再维护，OpenTracing 目前是 CNCF 的存档项目。\u003c/p\u003e\n\u003cp\u003eOpenTelemetry 的一些基础知识是兼容 OpenTracing 的，只有一些 API 是不同的。\u003c/p\u003e\n\u003ch2 id=\"opentelemetry-for-go\"\u003eOpenTelemetry for go\u003c/h2\u003e\n\u003cp\u003e我们继续使用上文的代码，对上文的代码进行修改。\u003c/p\u003e\n\u003ch3 id=\"install-依赖\"\u003einstall 依赖\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get go.opentelemetry.io/otel@v1.0.0-RC1 go.opentelemetry.io/otel/sdk@v1.0.0-RC1 go.opentelemetry.io/otel/exporters/stdout/stdouttrace@v1.0.0-RC1 go.opentelemetry.io/otel/trace@v1.0.0-RC1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get -u go.opentelemetry.io/otel/exporters/jaeger\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOpenTelemetry 官方为多种开源框架提供了开箱即用的 Instrumentation Packages，如 gin , beego , mux , go-kit 等，当然也支持 net/http 标准库\n，更多可浏览 opentelemetry-go-contrib 仓库。\u003c/p\u003e","title":"分布式链路追踪初探 2"},{"content":"微服务架构 作为云原生核心技术之一，提倡将单体应用程序 (巨石架构) 划分成一组小的服务（微服务），服务之间互相协调、互相配合，为用户提供最终价值。\n微服务架构设计中，通常由多个微服务组件组成，有 1) API 网关 ( apisix, kong, traefik ) 负责认证鉴权、负载均衡、限流和静态响应处理; 2) 服务注册发现中心 ( ZooKeeper、Consul、ETCD ) ,负责服务的注册和发现。3) 可观测性 负责日志收集查看的 ELK、Loki，负责服务性能指标告警的指标 Metrics 监控 Prometheus, 负责追踪请求的 Tracing 链路追踪。在多个组件的组成下，才能顺利组成一个好的微服务架构。\n今天我就来简单的讲一讲微服务组成中可观测性的分布式链路追踪。\nOpenTracing 介绍 OpenTracing 是一个新的、开放的分布式追踪标准，用于应用程序和 OSS 包。有过大规模构建微服务经验的开发者都知道分布式追踪的作用和重要性：每个进程的日志和指标监控都有它们的用武之地，但它们都无法重建事务在分布式系统中传播时的复杂旅程。分布式跟踪就是这些旅程。\nOpenTracing 项目定义了一套分布式追踪的标准，以统一各种分布式追踪系统的实现。OpenTracing 中包含了一套分布式追踪的标准规范，各种语言的 API，以及实现了该标准的编程框架和函数库。\nOpenTracing 提供了平台无关、厂商无关的 API，因此开发者只需要对接 OpenTracing API，无需关心后端采用的到底是什么分布式追踪系统，Jager、Skywalking、LightStep 等都可以无缝切换。\n数据模型 OpenTracing 定义了以下数据模型：\nTrace（调用链）：一个 Trace 代表一个事务或者流程在（分布式）系统中的执行过程。例如来自客户端的一个请求从接收到处理完成的过程就是一个 Trace。\nSpan（跨度）：Span 是分布式追踪的最小跟踪单位，一个 Trace 由多段 Span 组成。可以被理解为一次方法调用，一个程序块的调用，或者一次 RPC/数据库访问。只要是一个具有完整时间周期的程序访问，都可以被认为是一个 Span。\nSpanContext（跨度上下文）：分布式追踪的上下文信息，包括 Trace id，Span id 以及其它需要传递到下游服务的内容。一个 OpenTracing 的实现需要将 SpanContext 通过某种序列化协议 (Wire Protocol) 在进程边界上进行传递，以将不同进程中的 Span 关联到同一个 Trace 上。对于 HTTP 请求来说，SpanContext 一般是采用 HTTP header 进行传递的。\nOpenTracing for go 接下来 创建 main.go，实现一个 Web 服务，并在请求流程中使用 OpenTracing API 进行埋点处理。\ncode:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/opentracing/opentracing-go\u0026#34; ) var ( port = \u0026#34;8080\u0026#34; addr = \u0026#34;:8080\u0026#34; ) func main() { engine := gin.New() engine.GET(\u0026#34;/\u0026#34;, indexHandler) engine.GET(\u0026#34;/home\u0026#34;, homeHandler) engine.GET(\u0026#34;/async\u0026#34;, serviceHandler) engine.GET(\u0026#34;/service\u0026#34;, serviceHandler) engine.GET(\u0026#34;/db\u0026#34;, dbHandler) fmt.Printf(\u0026#34;http://localhost:%s\\n\u0026#34;, port) engine.Run(addr) } func dbHandler(c *gin.Context) { var sp opentracing.Span opName := c.Request.URL.Path wireContext, err := opentracing.GlobalTracer().Extract( opentracing.TextMap, opentracing.HTTPHeadersCarrier(r.Header)) if err != nil { // 获取失败，则直接新建一个根节点 span sp = opentracing.StartSpan(opName) } else { sp = opentracing.StartSpan(opName, opentracing.ChildOf(wireContext)) } defer sp.Finish() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func serviceHandler(c *gin.Context) { // 通过 http header，提取 span 元数据信息 var sp opentracing.Span opName := c.Request.URL.Path wireContext, err := opentracing.GlobalTracer().Extract( opentracing.TextMap, opentracing.HTTPHeadersCarrier(c.Request.Header)) if err != nil { // 获取失败，则直接新建一个根节点 span sp = opentracing.StartSpan(opName) } else { sp = opentracing.StartSpan(opName, opentracing.ChildOf(wireContext)) } defer sp.Finish() dbReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/db\u0026#34;, nil) err = sp.Tracer().Inject(sp.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(dbReq.Header)) if err != nil { log.Fatalf(\u0026#34;[dbReq]无法添加span context到http header: %v\u0026#34;, err) } if _, err = http.DefaultClient.Do(dbReq); err != nil { sp.SetTag(\u0026#34;error\u0026#34;, true) sp.LogKV(\u0026#34;请求 /db error\u0026#34;, err) } time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func homeHandler(c *gin.Context) { c.String(200, \u0026#34;开始请求...\\n\u0026#34;) // 设置一个根节点 span span := opentracing.StartSpan(\u0026#34;请求 /home\u0026#34;) defer span.Finish() asyncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/async\u0026#34;, nil) err := span.Tracer().Inject(span.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(asyncReq.Header)) if err != nil { log.Fatalf(\u0026#34;[asyncReq]无法添加span context到http header: %v\u0026#34;, err) } go func() { if _, err := http.DefaultClient.Do(asyncReq); err != nil { span.SetTag(\u0026#34;error\u0026#34;, true) span.LogKV(fmt.Sprintf(\u0026#34;请求 /async error: %v\u0026#34;, err)) } }() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) syncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/service\u0026#34;, nil) err = span.Tracer().Inject(span.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(syncReq.Header)) if err != nil { log.Fatalf(\u0026#34;[syncReq]无法添加span context到http header: %v\u0026#34;, err) } if _, err = http.DefaultClient.Do(syncReq); err != nil { span.SetTag(\u0026#34;error\u0026#34;, true) span.LogKV(fmt.Sprintf(\u0026#34;请求 /service error: %v\u0026#34;, err)) } c.String(200, \u0026#34;请求结束！\u0026#34;) } func indexHandler(c *gin.Context) { c.String(200, string(`\u0026lt;a href=\u0026#34;/home\u0026#34;\u0026gt; 点击开始发起请求 \u0026lt;/a\u0026gt;`)) } 就这样一个使用 OpenTracing API 进行链路追踪的 web 服务就这样完成了，接下来只需要在应用程序启动时连接到任意实现了 OpenTracing 标准的链路追踪系统即可。\nJaeger 接下来介绍实现了 OpenTracing API 标准的链路追踪系统 Jaeger。\nJaeger 受 Dapper 和 OpenZipkin 的启发，是 Uber Technologies 开源的分布式跟踪系统，遵循 OpenTracing 标准，功能包括：\n分布式上下文传播 监控分布式事务 执行根原因分析 服务依赖分析 优化性能和延迟时间 Jaeger 是云原生计算基金会 ( CNCF ) 毕业项目。\n架构 Jaeger 可以被部署为一体式二进制，即所有 Jaeger 后端组件在一个单一进程中运行，也可以被部署为可扩展的分布式系统。\nJaeger 部署 因为环境所限，就采用最简单的部署方式，下载 jaeger-1.26.0-windows-amd64.tar ,解压。\n进入解压后的文件夹，执行命令行 jaeger-all-in-one \u0026ndash;processor.zipkin-compact.server-host-port=9411。\n然后在浏览器输入 http://localhost:16686/ ，就可以看到 Jaeger UI。如下图： Jaeger 使用 上面已经成功安装运行 Jaeger 了，接下来给我们的应用程序接入 Jaeger。\n安装 Jaeger go Client\ngo get -u github.com/uber/jaeger-client-go 修改后的代码：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/opentracing/opentracing-go\u0026#34; \u0026#34;github.com/uber/jaeger-client-go\u0026#34; jaegercfg \u0026#34;github.com/uber/jaeger-client-go/config\u0026#34; jaegerlog \u0026#34;github.com/uber/jaeger-client-go/log\u0026#34; \u0026#34;github.com/uber/jaeger-lib/metrics\u0026#34; ) var ( port = \u0026#34;8080\u0026#34; addr = \u0026#34;:8080\u0026#34; ) func init() { cfg := jaegercfg.Configuration{ Sampler: \u0026amp;jaegercfg.SamplerConfig{ Type: jaeger.SamplerTypeConst, Param: 1, }, Reporter: \u0026amp;jaegercfg.ReporterConfig{ LogSpans: true, }, } _, err := cfg.InitGlobalTracer( \u0026#34;jaeger-example\u0026#34;, // 服务名 jaegercfg.Logger(jaegerlog.StdLogger), jaegercfg.Metrics(metrics.NullFactory), ) if err != nil { panic(err) } } func main() { engine := gin.New() engine.GET(\u0026#34;/\u0026#34;, indexHandler) engine.GET(\u0026#34;/home\u0026#34;, homeHandler) engine.GET(\u0026#34;/async\u0026#34;, serviceHandler) engine.GET(\u0026#34;/service\u0026#34;, serviceHandler) engine.GET(\u0026#34;/db\u0026#34;, dbHandler) engine.Run(addr) } func dbHandler(c *gin.Context) { var sp opentracing.Span opName := c.Request.URL.Path wireContext, err := opentracing.GlobalTracer().Extract( opentracing.TextMap, opentracing.HTTPHeadersCarrier(c.Request.Header)) if err != nil { // 获取失败，则直接新建一个根节点 span sp = opentracing.StartSpan(opName) } else { sp = opentracing.StartSpan(opName, opentracing.ChildOf(wireContext)) } defer sp.Finish() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func serviceHandler(c *gin.Context) { // 通过 http header，提取 span 元数据信息 var sp opentracing.Span opName := c.Request.URL.Path wireContext, err := opentracing.GlobalTracer().Extract( opentracing.TextMap, opentracing.HTTPHeadersCarrier(c.Request.Header)) if err != nil { // 获取失败，则直接新建一个根节点 span sp = opentracing.StartSpan(opName) } else { sp = opentracing.StartSpan(opName, opentracing.ChildOf(wireContext)) } defer sp.Finish() dbReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/db\u0026#34;, nil) err = sp.Tracer().Inject(sp.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(dbReq.Header)) if err != nil { log.Fatalf(\u0026#34;[dbReq]无法添加span context到http header: %v\u0026#34;, err) } if _, err = http.DefaultClient.Do(dbReq); err != nil { sp.SetTag(\u0026#34;error\u0026#34;, true) sp.LogKV(\u0026#34;请求 /db error\u0026#34;, err) } time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) } func homeHandler(c *gin.Context) { c.Header(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html; charset=utf-8\u0026#34;) c.String(200, \u0026#34;开始请求...\\n\u0026#34;) // 设置一个根节点 span span := opentracing.StartSpan(\u0026#34;请求 /home\u0026#34;) defer span.Finish() asyncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/async\u0026#34;, nil) err := span.Tracer().Inject(span.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(asyncReq.Header)) if err != nil { log.Fatalf(\u0026#34;[asyncReq]无法添加span context到http header: %v\u0026#34;, err) } go func() { if _, err := http.DefaultClient.Do(asyncReq); err != nil { span.SetTag(\u0026#34;error\u0026#34;, true) span.LogKV(fmt.Sprintf(\u0026#34;请求 /async error: %v\u0026#34;, err)) } }() time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond) syncReq, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/service\u0026#34;, nil) err = span.Tracer().Inject(span.Context(), opentracing.TextMap, opentracing.HTTPHeadersCarrier(syncReq.Header)) if err != nil { log.Fatalf(\u0026#34;[syncReq]无法添加span context到http header: %v\u0026#34;, err) } if _, err = http.DefaultClient.Do(syncReq); err != nil { span.SetTag(\u0026#34;error\u0026#34;, true) span.LogKV(fmt.Sprintf(\u0026#34;请求 /service error: %v\u0026#34;, err)) } c.String(200, \u0026#34;请求结束！\u0026#34;) } func indexHandler(c *gin.Context) { c.Header(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html; charset=utf-8\u0026#34;) c.String(200, string(`\u0026lt;a href=\u0026#34;/home\u0026#34;\u0026gt; 点击开始发起请求 \u0026lt;/a\u0026gt;`)) } 启动程序，浏览器访问 http://localhost:8080/\n点击链接，访问 Jaeger UI，可以看到刚才的请求链。\n小结 今天就简单介绍了 opentracing 和 使用 Jaeger 进行链路追踪。\n参考链接：\nhttps://rainmakerho.github.io/2019/01/04/2019002/ https://opentracing.io/ ","permalink":"https://jasminides.com/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%88%9D%E6%8E%A2/","summary":"\u003cp\u003e微服务架构 作为云原生核心技术之一，提倡将单体应用程序 (巨石架构) 划分成一组小的服务（微服务），服务之间互相协调、互相配合，为用户提供最终价值。\u003c/p\u003e\n\u003cp\u003e微服务架构设计中，通常由多个微服务组件组成，有 1) API 网关 ( apisix, kong, traefik ) 负责认证鉴权、负载均衡、限流和静态响应处理; 2) 服务注册发现中心 ( ZooKeeper、Consul、ETCD )\n,负责服务的注册和发现。3) 可观测性 负责日志收集查看的 ELK、Loki，负责服务性能指标告警的指标 Metrics 监控 Prometheus, 负责追踪请求的 Tracing\n链路追踪。在多个组件的组成下，才能顺利组成一个好的微服务架构。\u003c/p\u003e\n\u003cp\u003e今天我就来简单的讲一讲微服务组成中可观测性的分布式链路追踪。\u003c/p\u003e\n\u003ch2 id=\"opentracing-介绍\"\u003eOpenTracing 介绍\u003c/h2\u003e\n\u003cp\u003eOpenTracing 是一个新的、开放的分布式追踪标准，用于应用程序和 OSS 包。有过大规模构建微服务经验的开发者都知道分布式追踪的作用和重要性：每个进程的日志和指标监控都有它们的用武之地，但它们都无法重建事务在分布式系统中传播时的复杂旅程。分布式跟踪就是这些旅程。\u003c/p\u003e\n\u003cp\u003eOpenTracing 项目定义了一套分布式追踪的标准，以统一各种分布式追踪系统的实现。OpenTracing 中包含了一套分布式追踪的标准规范，各种语言的 API，以及实现了该标准的编程框架和函数库。\u003c/p\u003e\n\u003cp\u003eOpenTracing 提供了平台无关、厂商无关的 API，因此开发者只需要对接 OpenTracing API，无需关心后端采用的到底是什么分布式追踪系统，Jager、Skywalking、LightStep 等都可以无缝切换。\u003c/p\u003e\n\u003ch3 id=\"数据模型\"\u003e数据模型\u003c/h3\u003e\n\u003cp\u003eOpenTracing 定义了以下数据模型：\u003c/p\u003e\n\u003cp\u003eTrace（调用链）：一个 Trace 代表一个事务或者流程在（分布式）系统中的执行过程。例如来自客户端的一个请求从接收到处理完成的过程就是一个 Trace。\u003c/p\u003e\n\u003cp\u003eSpan（跨度）：Span 是分布式追踪的最小跟踪单位，一个 Trace 由多段 Span 组成。可以被理解为一次方法调用，一个程序块的调用，或者一次 RPC/数据库访问。只要是一个具有完整时间周期的程序访问，都可以被认为是一个\nSpan。\u003c/p\u003e\n\u003cp\u003eSpanContext（跨度上下文）：分布式追踪的上下文信息，包括 Trace id，Span id 以及其它需要传递到下游服务的内容。一个 OpenTracing 的实现需要将 SpanContext 通过某种序列化协议 (Wire\nProtocol) 在进程边界上进行传递，以将不同进程中的 Span 关联到同一个 Trace 上。对于 HTTP 请求来说，SpanContext 一般是采用 HTTP header 进行传递的。\u003c/p\u003e","title":"分布式链路追踪初探"},{"content":"遍历 map 列表的 Golang 模板遇到的问题及解决方式 出现了什么问题？ 今天在使用 go template 渲染文本的时候，在运行的时候，遇到了一个问题导致渲染不成功，具体的问题是：\n2021/09/10 09:47:05 template: test:2:3: executing \u0026#34;test\u0026#34; at \u0026lt;.Attributes\u0026gt;: can\u0026#39;t evaluate field Attributes in type interface {} 具体的代码如下：\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;text/template\u0026#34; ) type TestData struct { Name string `json:\u0026#34;name\u0026#34;` Attributes map[string]interface{} } const testTemplate = `{{ range $key, $value := .Attributes }} {{.Name}} {{ $key }}: {{ $value }}{{- end }}` func main() { tmpl, err := template.New(\u0026#34;test\u0026#34;).Parse(strings.TrimSpace(testTemplate)) if err != nil { log.Println(err) return } data := TestData{ \u0026#34;hello\u0026#34;, map[string]interface{}{ \u0026#34;key\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;json\u0026#34;, }, } err = tmpl.Execute(os.Stdout, data) if err != nil { log.Println(err) return } } 问题出现的原因？ 模板在 range 循环中会把。设置为当前 Attributes 变量，在 Attributes 变量中没有 name 这个成员结构，这就导致模板没有渲染成功。\n解决 只要在 {{ .Name}} 中在变量前加个 $ 符号 {{ $.Name}}, $表示传递给模板执行的参数，不是 range 循环值，通过添加符号就可以成功渲染 Name。\n最终代码：\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;text/template\u0026#34; ) type TestData struct { Name string `json:\u0026#34;name\u0026#34;` Attributes map[string]interface{} } const testTemplate = `{{ range $key, $value := .Attributes }} {{ $.Name}} {{ $key }}: {{ $value }}{{- end }}` func main() { tmpl, err := template.New(\u0026#34;test\u0026#34;).Parse(strings.TrimSpace(testTemplate)) if err != nil { log.Println(err) return } data := TestData{ \u0026#34;hello\u0026#34;, map[string]interface{}{ \u0026#34;key\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;json\u0026#34;, }, } err = tmpl.Execute(os.Stdout, data) if err != nil { log.Println(err) return } } 运行结果：\nhello key: hello hello value: json 参考链接 https://stackoverflow.com/questions/44734529/compare-two-variables-inside-go-template/44734585#44734585 https://stackoverflow.com/questions/42507958/golang-template-engine-pipelines/42508255#42508255 ","permalink":"https://jasminides.com/posts/%E9%81%8D%E5%8E%86-map-%E5%88%97%E8%A1%A8%E7%9A%84-golang-%E6%A8%A1%E6%9D%BF/","summary":"\u003ch1 id=\"遍历-map-列表的-golang-模板遇到的问题及解决方式\"\u003e遍历 map 列表的 Golang 模板遇到的问题及解决方式\u003c/h1\u003e\n\u003ch2 id=\"出现了什么问题\"\u003e出现了什么问题？\u003c/h2\u003e\n\u003cp\u003e今天在使用 go template 渲染文本的时候，在运行的时候，遇到了一个问题导致渲染不成功，具体的问题是：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e2021/09/10 09:47:05 template: test:2:3: executing \u0026#34;test\u0026#34; at \u0026lt;.Attributes\u0026gt;: can\u0026#39;t evaluate field Attributes in type interface {}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e具体的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text/template\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestData\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;name\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003eAttributes\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestTemplate\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e{{\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e$key\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e$value\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e.Attributes\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e}}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e{{\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e.Name\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e}}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e{{\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e$key\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e}}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e: \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e{{\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e$value\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e}}{{-\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e}}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003etmpl\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etemplate\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTrimSpace\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etestTemplate\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestData\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e:   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003etmpl\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eExecute\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStdout\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"问题出现的原因\"\u003e问题出现的原因？\u003c/h2\u003e\n\u003cp\u003e模板在 range 循环中会把。设置为当前 Attributes 变量，在 Attributes 变量中没有 name 这个成员结构，这就导致模板没有渲染成功。\u003c/p\u003e","title":"遍历 map 列表的 Golang 模板"},{"content":"Golang Template 今天来讲讲 golang 中的标准库 template, Go 标准库提供了几个 package 可以产生输出结果，主要有 2 个：text/template 和 html/template, text/template 提供根据模板输出内容，html/template 产生安全的 HTML 的输出，这两个库的使用方式很相似，文中的例子大部分是基于 html/template 展示的。\n解析和创建模板 模板命名 template 所使用的库没有限定扩展名，但最经常使用的后缀是 .tmpl, 编辑器对.tmpl 的支持最好，官方的例子也是使用 .tmpl, .tpl 也经常使用。\n创建模板 通过 Parse 方法可以创建文件名为名字的模板。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;html/template\u0026#34; \u0026#34;log\u0026#34; ) func main() { tpl, err := template.New(\u0026#34;index\u0026#34;).Parse(\u0026#34;index.tmpl\u0026#34;) if err != nil { log.Fatalln(err) } } 解析多个模板 通过 template.ParseFiles(filenames \u0026hellip;string) 方法可以解析一组模板，使用各个文件名作为模板名称。\ntemplate.ParseGlob(pattern) 方法会根据 pattern 解析所有匹配的模板并保存。\npackage main import \u0026#34;html/template\u0026#34; func main() { template.ParseFiles(\u0026#34;index.tmpl\u0026#34;, \u0026#34;index2.tmpl\u0026#34;) } 解析字符串模板 除了可以解析文件，还可以解析字符串模板。\npackage main import \u0026#34;html/template\u0026#34; const goTemplate = ` package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;hello\u0026#34;) } ` func main() { t, err := template.New(\u0026#34;go\u0026#34;).Parse(goTemplate) } 解析模板 解析模板 模板 tpl 可以通过 tpl.Execute(io.Writer, data) 去执行，模板渲染后的内容写入到 io.Writer 中。Data 是传给模板的动态数据。\npackage main import ( \u0026#34;html/template\u0026#34; \u0026#34;net/http\u0026#34; ) func tmpl(w http.ResponseWriter, r *http.Request) { t1, err := template.ParseFiles(\u0026#34;c2.1/index.tmpl\u0026#34;) if err != nil { panic(err) } t1.Execute(w, \u0026#34;hello world\u0026#34;) } func main() { server := http.Server{ Addr: \u0026#34;127.0.0.1:8080\u0026#34;, } http.HandleFunc(\u0026#34;/tmpl\u0026#34;, tmpl) server.ListenAndServe() } 模板文件：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 我们来看看解析后的文件吧： 怎么样，很神奇吧。\n模板变量 . 模板变量可以是 boolean, string, character, integer, floating-point, imaginary 或者 complex constant。传给模板这样的数据就可以通过点号。来访问： {{ . }} 如果想访问复杂的变量，可以通过 {{ .fileds }} 的方式访问。\n模板语句 在模板里也可以使用我们编程中常用的判断和循环逻辑。\n判断 我们可以使用 if 检查数据，如果不满足可以执行 else 逻辑。空值是是 false , 0、nil、空字符串或者长度为 0 的字符串都是 false。\n\u0026lt;h1\u0026gt;Hello, { {if .Name}} { {.Name}} { {else}} Anonymous { {end}}!\u0026lt;/h1\u0026gt; 如果 .Name 变量存在，会输出 Hello, Name，否则输出 Hello, Anonymous。模板也提供了{ { else if .Name2 }}处理多个分支。\nRange 模板也提供了 range 关键字用来循环读取变量。\n小结 以上就是我今天讲述的 go 标准库 template 的简单使用，在以后可能还会讲一讲在模板中如何自定义函数。\n参考链接 https://github.com/overstarry/template-example ","permalink":"https://jasminides.com/posts/golang-templates/","summary":"\u003ch1 id=\"golang-template\"\u003eGolang Template\u003c/h1\u003e\n\u003cp\u003e今天来讲讲 golang 中的标准库 template, Go 标准库提供了几个 package 可以产生输出结果，主要有 2 个：text/template 和 html/template, text/template\n提供根据模板输出内容，html/template 产生安全的 HTML 的输出，这两个库的使用方式很相似，文中的例子大部分是基于 html/template 展示的。\u003c/p\u003e\n\u003ch2 id=\"解析和创建模板\"\u003e解析和创建模板\u003c/h2\u003e\n\u003ch3 id=\"模板命名\"\u003e模板命名\u003c/h3\u003e\n\u003cp\u003etemplate 所使用的库没有限定扩展名，但最经常使用的后缀是 .tmpl, 编辑器对.tmpl 的支持最好，官方的例子也是使用 .tmpl, .tpl 也经常使用。\u003c/p\u003e\n\u003ch3 id=\"创建模板\"\u003e创建模板\u003c/h3\u003e\n\u003cp\u003e通过 Parse 方法可以创建文件名为名字的模板。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;html/template\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etpl\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etemplate\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index.tmpl\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatalln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解析多个模板\"\u003e解析多个模板\u003c/h3\u003e\n\u003cp\u003e通过 template.ParseFiles(filenames \u0026hellip;string) 方法可以解析一组模板，使用各个文件名作为模板名称。\u003c/p\u003e\n\u003cp\u003etemplate.ParseGlob(pattern) 方法会根据 pattern 解析所有匹配的模板并保存。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;html/template\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etemplate\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParseFiles\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index.tmpl\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index2.tmpl\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解析字符串模板\"\u003e解析字符串模板\u003c/h3\u003e\n\u003cp\u003e除了可以解析文件，还可以解析字符串模板。\u003c/p\u003e","title":"Golang Templates"},{"content":"今天我们来讲一讲 Wire 的入门使用。\nWire 是什么 go 的依赖注入工具常见有 2 种，一类是通过反射在运行时进行依赖注入，典型代表是 uber 开源的 dig，另外一类是通过 generate 进行代码生成，典型代表就是我今天要将的 Google 开源的 wire。使用 dig 功能会强大一些，但是缺点就是错误只能在运行时才能发现，这样如果不小心的话可能会导致一些隐藏的 bug 出现。使用 wire 的缺点就是功能限制多一些，但是好处就是编译的时候就可以发现问题，并且生成的代码其实和我们自己手写相关代码差不太多，更符合直觉，心智负担更小。\nWire 使用 安装 Wire 的安装十分简单，只要执行 go get github.com/google/wire/cmd/wire , wire 命令行工具就会被安装到 $GOPATH/bin 目录下。\n核心概念 在正式使用前，我来介绍一下 Wire 中的 2 个重要概念：Provider 和 Injector。\nProvider Provider 是一个普通的函数，这个函数会返回构建依赖关系所需的组件。如下所示，就是一个 provider 函数，在实际使用的时候，往往是一些简单工厂函数。\nfunc NewDb(opt *DbOpt)(*Db, error){...} 在使用中，不能存在 2 个 Provider 返回相同的类型。\nInjector Injector 是由 wire 自动生成的函数。函数内部会按根据依赖顺序调用相关 Provider。\n我们往往在 wire.go 文件中定义 Injector 函数签名。然后通过 wire 命令行工具生成完整函数。由于 wire.go 中的函数并没有真正返回值，为避免编译器报错，简单地用 panic 函数包装起来即可。不用担心执行时报错，因为它不会实际运行，只是用来生成真正的代码的依据。\n下面看一个 wire.go 的例子：\nfunc initApp(*conf.Server, *conf.Data, log.Logger) (*kratos.App, func(), error) { panic(wire.Build(server.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, newApp)) }// +build wireinject // The build tag makes sure the stub is not built in the final build. package main import ( \u0026#34;helloworld/internal/biz\u0026#34; \u0026#34;helloworld/internal/conf\u0026#34; \u0026#34;helloworld/internal/data\u0026#34; \u0026#34;helloworld/internal/server\u0026#34; \u0026#34;helloworld/internal/service\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/log\u0026#34; \u0026#34;github.com/google/wire\u0026#34; ) // initApp init kratos application. func initApp(*conf.Server, *conf.Data, log.Logger) (*kratos.App, func(), error) { panic(wire.Build(server.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, newApp)) } 运行 wire . 命令就会生成 wire_gen.go 文件，会生成 Injector 函数的真正实现，wire_gen.go:\n// Code generated by Wire. DO NOT EDIT. //go:generate go run github.com/google/wire/cmd/wire //+build !wireinject package main import ( \u0026#34;github.com/go-kratos/kratos/v2\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/log\u0026#34; \u0026#34;helloworld/internal/biz\u0026#34; \u0026#34;helloworld/internal/conf\u0026#34; \u0026#34;helloworld/internal/data\u0026#34; \u0026#34;helloworld/internal/server\u0026#34; \u0026#34;helloworld/internal/service\u0026#34; ) // Injectors from wire.go: // initApp init kratos application. func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) { dataData, cleanup, err := data.NewData(confData, logger) if err != nil { return nil, nil, err } greeterRepo := data.NewGreeterRepo(dataData, logger) greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger) greeterService := service.NewGreeterService(greeterUsecase, logger) httpServer := server.NewHTTPServer(confServer, greeterService, logger) grpcServer := server.NewGRPCServer(confServer, greeterService, logger) app := newApp(logger, httpServer, grpcServer) return app, func() { cleanup() }, nil } 然后我们就可以使用生成的函数了，如下：\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;os\u0026#34; \u0026#34;helloworld/internal/conf\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/config\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/config/file\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/log\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/transport/grpc\u0026#34; \u0026#34;github.com/go-kratos/kratos/v2/transport/http\u0026#34; ) func main() { // ... app, cleanup, err := initApp(bc.Server, bc.Data, logger) if err != nil { panic(err) } defer cleanup() // start and wait for stop signal if err := app.Run(); err != nil { panic(err) } } 如果不小心忘记了某个 Provider, wire 会报出具体的错误，帮忙开发人员迅速定位问题。\n","permalink":"https://jasminides.com/posts/wire-%E5%85%A5%E9%97%A8/","summary":"\u003cp\u003e今天我们来讲一讲 Wire 的入门使用。\u003c/p\u003e\n\u003ch2 id=\"wire-是什么\"\u003eWire 是什么\u003c/h2\u003e\n\u003cp\u003ego 的依赖注入工具常见有 2 种，一类是通过反射在运行时进行依赖注入，典型代表是 uber 开源的 dig，另外一类是通过 generate 进行代码生成，典型代表就是我今天要将的 Google 开源的 wire。使用 dig 功能会强大一些，但是缺点就是错误只能在运行时才能发现，这样如果不小心的话可能会导致一些隐藏的 bug 出现。使用 wire 的缺点就是功能限制多一些，但是好处就是编译的时候就可以发现问题，并且生成的代码其实和我们自己手写相关代码差不太多，更符合直觉，心智负担更小。\u003c/p\u003e\n\u003ch2 id=\"wire-使用\"\u003eWire 使用\u003c/h2\u003e\n\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cp\u003eWire 的安装十分简单，只要执行 go get github.com/google/wire/cmd/wire , wire 命令行工具就会被安装到 $GOPATH/bin 目录下。\u003c/p\u003e\n\u003ch3 id=\"核心概念\"\u003e核心概念\u003c/h3\u003e\n\u003cp\u003e在正式使用前，我来介绍一下 Wire 中的 2 个重要概念：Provider 和 Injector。\u003c/p\u003e\n\u003ch4 id=\"provider\"\u003eProvider\u003c/h4\u003e\n\u003cp\u003eProvider 是一个普通的函数，这个函数会返回构建依赖关系所需的组件。如下所示，就是一个 provider 函数，在实际使用的时候，往往是一些简单工厂函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewDb\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eopt\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eDbOpt\u003c/span\u003e)(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eDb\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e){\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在使用中，不能存在 2 个 Provider 返回相同的类型。\u003c/p\u003e\n\u003ch4 id=\"injector\"\u003eInjector\u003c/h4\u003e\n\u003cp\u003eInjector 是由 wire 自动生成的函数。函数内部会按根据依赖顺序调用相关 Provider。\u003c/p\u003e\n\u003cp\u003e我们往往在 wire.go 文件中定义 Injector 函数签名。然后通过 wire 命令行工具生成完整函数。由于 wire.go 中的函数并没有真正返回值，为避免编译器报错，简单地用 panic 函数包装起来即可。不用担心执行时报错，因为它不会实际运行，只是用来生成真正的代码的依据。\u003c/p\u003e","title":"Wire 入门"},{"content":"go 泛型初探 go1.17 于几天前正式发布，虽然 go 的泛型还没正式发布，但 go 的泛型代码已经并入 master 分支，所以我们可以在 go1.17 版本中提前试用泛型。\n下载 go1.17 如果你目前没有 go 的任何版本，你只能去官网链接下载 1.17 版本，如果已有了 go 的其它版本，你可以通过以下方式下载使用 go1.17:\ngo get golang.org/dl/go1.17 go1.17 download go1.17 version 这样就 1.17 就下好了。\n例子 接下来我们来看看 2 个使用泛型的例子。\n例子 1:\npackage main import (\u0026#34;fmt\u0026#34;) func print[T any](s []T) { for _, v := range s { fmt.Println(v) } } func main() { print([]string{\u0026#34;Hello, \u0026#34;, \u0026#34;overstarry\\n\u0026#34;}) print([]int64{1, 2, 3}) print([]float64{1, 2, 3}) } go 使用[] 定义类型参数，与 java、c++ 等的\u0026lt;\u0026gt;有很大不同，any 关键字来表示任意类型约束。然后怎么运行呢？简单的 go run\\build 是肯定不行的，要运行泛型代码，你需要在 run\\build 后加-G 参数， 运行的命令是：\ngo1.17 run -gcflags=-G=3 main.go 可以看到，成功输出了相应的值。\n接下来再来看个经典的例子，由于 go 没有函数重载，我们在写 2 数相加的时候，为了应对不同的类型情况，往往需要写很多不同的函数，现在来看看在泛型的情况下的 add 函数：\npackage main import \u0026#34;fmt\u0026#34; type Addable interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, complex64, complex128 } func add[T Addable](a, b T) T { return a + b } func main() { fmt.Println(add(1, 2)) fmt.Println(add(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;)) } 可以看到我们定义了一个 Addable 的接口，接口定义了一系列类型，用来约束泛型函数的类型，不在接口中的类型不能使用。\n我们来运行看看吧，\n可以看到，程序无法运行，提示 string 类型没有在接口约束中。我们加上 string 类型再试试看看，\n这次程序顺利运行，输出了相应的值。\n总结 本文主要是 go 泛型的简单初探，让我们静静等待明年 2 月份的 go1.18, 那时我们就能正式使用泛型了，目前的 go1.17 的泛型还不够完善，还存在一些问题，如泛型函数不能导出 (即首字母不能大写)。\n","permalink":"https://jasminides.com/posts/go-%E6%B3%9B%E5%9E%8B%E5%88%9D%E6%8E%A2/","summary":"\u003ch1 id=\"go-泛型初探\"\u003ego 泛型初探\u003c/h1\u003e\n\u003cp\u003ego1.17 于几天前正式发布，虽然 go 的泛型还没正式发布，但 go 的泛型代码已经并入 master 分支，所以我们可以在 go1.17 版本中提前试用泛型。\u003c/p\u003e\n\u003ch2 id=\"下载-go117\"\u003e下载 go1.17\u003c/h2\u003e\n\u003cp\u003e如果你目前没有 go 的任何版本，你只能去官网链接下载 1.17 版本，如果已有了 go 的其它版本，你可以通过以下方式下载使用 go1.17:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e go  get golang.org/dl/go1.17\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e go1.17 download\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e go1.17 version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样就 1.17 就下好了。\u003c/p\u003e\n\u003ch2 id=\"例子\"\u003e例子\u003c/h2\u003e\n\u003cp\u003e接下来我们来看看 2 个使用泛型的例子。\u003c/p\u003e\n\u003cp\u003e例子 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e](\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint([]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;overstarry\\n\u0026#34;\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint([]\u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint([]\u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ego 使用[] 定义类型参数，与 java、c++ 等的\u0026lt;\u0026gt;有很大不同，any 关键字来表示任意类型约束。然后怎么运行呢？简单的 go run\\build 是肯定不行的，要运行泛型代码，你需要在 run\\build 后加-G 参数，\n运行的命令是：\u003c/p\u003e","title":"Go 泛型初探"},{"content":"Functional Options 今天我来讲一下在 go 语言编程中一种很常用的编程模式 - Functional Options 模式。Functional Options 模式是目前在 Go 语言中最流行的一种编程模式，在 Kubernetes 等开源项目中就有 Functional Options 的影子。接下来我们就来聊一聊 Functional Options 和它解决的问题。\n常见的使用场景 在我们编程中，我们会经常性的需要对一个对象进行相关的配置。比如下面这个结构实体：\ntype Server struct { Addr string Port int Protocol string TLS *tls.Config } 在这个 Server 对象中，我们可以看到： 有侦听的 IP 地址 Addr 和端口号 Port，这两个配置选项是必填的。 然后，还有协议 Protoco 字段，这几个字段是不能为空的，但是有默认值的，例如协议的默认值是 tcp。 还有一个 TLS 这个是 HTTPS 安全链接，需要配置相关的证书和私钥。这个是可以为空的，为空就是不使用 HTTPS。\n所以根据上述结构体的描述，我们需要有多种不同的创建不同配置 Server 的函数签名，如下所示：\nfunc NewDefaultServer(addr string, port int) (*Server, error) { return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, nil}, nil } func NewTLSServerWithMaxConnAndTimeout(addr string, port int, tls *tls.Config) (*Server, error) { return \u0026amp;Server{addr, port, \u0026#34;tcp\u0026#34;, tls}, nil } 因为 go 语言与 Python 等语言是不同的，没用重载函数，所你得用不同的函数名来应对不同的配置选项。\n新增配置对象 要解决这个问题，最常见的方式是使用一个配置对象，如下所示：\ntype Config struct { Protocol string TLS *tls.Config } type Server struct { Addr string Port int Conf *Config } 我们将那些不是必填的字段存入新的结构体中，于是 Server 结构体就变成如上图所示的样子。 于是，我们只需要一个 NewServer() 的函数了，在使用前需要构造 Config 对象。\nfunc NewServer(addr string, port int, conf *Config) (*Server, error) { } conf := ServerConfig{Protocol:\u0026#34;tcp\u0026#34;} srv, _ := NewServer(\u0026#34;locahost\u0026#34;, 9000, \u0026amp;conf) 这个代码要对 config 对象判断是否为 nil。\n使用 Functional Options 模式 接下来针对上面的场景，我们使用 Functional Options 模式进行编程。\n首先我们先定义个函数类型：\ntype Option func(*Server) 然后我们根据需求定义如下一组函数\nfunc Protocol(p string) Option { return func(s *Server) { s.Protocol = p } } func TLS(tls *tls.Config) Option { return func(s *Server) { s.TLS = tls } } 上面这组代码传入一个参数，然后返回一个函数，返回的这个函数会设置自己的 Server 结构体的参数。例如：\n当我们调用其中的一个函数用 Protocol(\u0026ldquo;tcp\u0026rdquo;) 时 其返回值是一个 func(s* Server) { s.Protocol = \u0026ldquo;tcp\u0026rdquo; } 的函数。 这个叫高阶函数在一些函数式编程语言中是经常使用的，可能不太好理解。\n好了，现在我们再定一个 NewServer() 的函数，其中，有一个可变参数 options 其可以传出多个上面上的函数，然后使用一个 for-loop 来设置我们的 Server 对象。\nunc NewServer(addr string, port int, options ...func(*Server)) (*Server, error) { srv := Server{ Addr: addr, Port: port, Protocol: \u0026#34;tcp\u0026#34;, TLS: nil, } for _, option := range options { option(\u0026amp;srv) } return \u0026amp;srv, nil } 于是根据上面的定义，我们可以这样使用函数 s1, _ := NewServer(\u0026ldquo;localhost\u0026rdquo;, 1024)，这样就是使用 Functional Options 模式解决上面的问题。\nFunctional Options 模式带来了如下好处：\n直觉式的编程 高度的可配置化 很容易维护和扩展 对于新来的人很容易上手 如下就是著名的 Kubernetes 项目中使用到的 Functional Options 模式 的一段代码。\n// Option is a functional option type for Kubelet type Option func(*Kubelet) func WithRunAllFilters(runAllFilters bool) Option { return func(o *frameworkOptions) { o.runAllFilters = runAllFilters } } // WithPodNominator sets podNominator for the scheduling frameworkImpl. func WithPodNominator(nominator framework.PodNominator) Option { return func(o *frameworkOptions) { o.podNominator = nominator } } // WithExtenders sets extenders for the scheduling frameworkImpl. func WithExtenders(extenders []framework.Extender) Option { return func(o *frameworkOptions) { o.extenders = extenders } } 以后在遇到类似的问题时，推荐大家使用 Functional Options 模式。\n","permalink":"https://jasminides.com/posts/functional_options/","summary":"\u003ch1 id=\"functional-options\"\u003eFunctional Options\u003c/h1\u003e\n\u003cp\u003e今天我来讲一下在 go 语言编程中一种很常用的编程模式 - Functional Options 模式。Functional Options 模式是目前在 Go 语言中最流行的一种编程模式，在 Kubernetes 等开源项目中就有 Functional Options 的影子。接下来我们就来聊一聊 Functional Options 和它解决的问题。\u003c/p\u003e\n\u003ch1 id=\"常见的使用场景\"\u003e常见的使用场景\u003c/h1\u003e\n\u003cp\u003e在我们编程中，我们会经常性的需要对一个对象进行相关的配置。比如下面这个结构实体：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eAddr\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ePort\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eProtocol\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eTLS\u003c/span\u003e      \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个 Server 对象中，我们可以看到：\n有侦听的 IP 地址 Addr 和端口号 Port，这两个配置选项是必填的。\n然后，还有协议 Protoco 字段，这几个字段是不能为空的，但是有默认值的，例如协议的默认值是 tcp。\n还有一个 TLS 这个是 HTTPS 安全链接，需要配置相关的证书和私钥。这个是可以为空的，为空就是不使用 HTTPS。\u003c/p\u003e\n\u003cp\u003e所以根据上述结构体的描述，我们需要有多种不同的创建不同配置 Server 的函数签名，如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewDefaultServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewTLSServerWithMaxConnAndTimeout\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e) (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eaddr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e}, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因为 go 语言与 Python 等语言是不同的，没用重载函数，所你得用不同的函数名来应对不同的配置选项。\u003c/p\u003e\n\u003ch2 id=\"新增配置对象\"\u003e新增配置对象\u003c/h2\u003e\n\u003cp\u003e要解决这个问题，最常见的方式是使用一个配置对象，如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eProtocol\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eTLS\u003c/span\u003e      \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eAddr\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ePort\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eConf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们将那些不是必填的字段存入新的结构体中，于是 Server 结构体就变成如上图所示的样子。\n于是，我们只需要一个 NewServer() 的函数了，在使用前需要构造 Config 对象。\u003c/p\u003e","title":"Functional_Options"},{"content":"Docker grafana 启动失败 今天在使用 Docker 启动 grafana 的时候，遇到了一个问题，问题如图： 为什么会出现这个问题 根据错误日志的提示，打开 http://docs.grafana.org/installation/docker/#migrate-to-v51-or-later 网址，根据官方的描述，grafana Docker 镜像在版本 5.1 及以后有了重大改变：\n* 在容器启动过程中不会改变文件的权限 * 默认用户 ID 由 104 变为 472 * 删除了以下的隐式卷： * /var/lib/grafana * /etc/grafana * /var/log/grafana 解决 根据官方文档的提示，我仔细查看了我的 compose 文件，发现我加了 user: \u0026lsquo;104\u0026rsquo; , 应该是此行的原因导致 grafana 没有启动成功，删除此行，顺利启动。\n","permalink":"https://jasminides.com/posts/docker_grafana-%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/","summary":"\u003ch1 id=\"docker-grafana-启动失败\"\u003eDocker grafana 启动失败\u003c/h1\u003e\n\u003cp\u003e今天在使用 Docker 启动 grafana 的时候，遇到了一个问题，问题如图：\n\u003cimg loading=\"lazy\" src=\"/img/grafana1.png\" alt=\"grafana1.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"为什么会出现这个问题\"\u003e为什么会出现这个问题\u003c/h2\u003e\n\u003cp\u003e根据错误日志的提示，打开  \u003ca href=\"http://docs.grafana.org/installation/docker/#migrate-to-v51-or-later\"\u003ehttp://docs.grafana.org/installation/docker/#migrate-to-v51-or-later\u003c/a\u003e 网址，根据官方的描述，grafana Docker 镜像在版本 5.1 及以后有了重大改变：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e* 在容器启动过程中不会改变文件的权限\n* 默认用户 ID 由 104 变为 472\n* 删除了以下的隐式卷：\n    * /var/lib/grafana\n    * /etc/grafana\n    * /var/log/grafana\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"解决\"\u003e解决\u003c/h2\u003e\n\u003cp\u003e根据官方文档的提示，我仔细查看了我的 compose 文件，发现我加了 user: \u0026lsquo;104\u0026rsquo; , 应该是此行的原因导致 grafana 没有启动成功，删除此行，顺利启动。\u003c/p\u003e","title":"Docker_grafana 启动失败"},{"content":"Nginx 搭建静态图片资源服务器 本文介绍使用 Docker Nginx 搭建静态图片资源服务器的过程和搭建中间遇到的问题。\n我使用 Docker compose 搭建静态图片资源服务器，我使用的 compose 文件内容如下：\nversion: \u0026#39;3.1\u0026#39; services: nginx: restart: always image: nginx container_name: asset ports: - 80:80 volumes: - ./nginx.conf:/etc/nginx/nginx.conf - ./uploads:/usr/share/nginx/uploads - ./conf.d:/etc/nginx/conf.d /srv/msg/storage/uploads:/usr/share/nginx/uploads 将本地的图片文件夹挂载到容器内的 /usr/share/nginx/uploads 文件夹 nginx.conf 是 Nginx 的主配置文件，conf.d 是各个网站配置的文件夹。我的 nginx.conf 内容如下：\nuser nginx; worker_processes 1; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name 192.168.1.117; root /usr/share/nginx/uploads/; location /{ autoindex on; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } 静态资源图片服务器的配置文件如下：\nserver { listen 80; # 设置你访问服务的ip或域名 server_name 192.168.1.117; default_type \u0026#39;text/html\u0026#39;; charset utf-8; # 避免中文乱码 # 图片文件夹的路径 root /usr/share/nginx/uploads/; location / { # autoindex on; autoindex_exact_size on; # 显示文件大小 autoindex_localtime on; # 显示文件时间 } } 设置 autoindex on；autoindex_exact_size on; autoindex_localtime on; 这三项是为了访问 192.168.1.117 时可以显示图片的大小、创建时间等信息。\n执行 docker-compose up -d 启动服务。访问 http://192.168.1.117/，发现显示 403，我又重新检查了配置文件，没有找到有问题的地方，网上参考了他人的解决方法，发行好像是 autoindex on 的问题，在相应的静态资源服务器中也要开启。修改后的配置文件：\nserver { listen 80; # 设置你访问服务的 ip 或域名 server_name 192.168.1.117; default_type \u0026#39;text/html\u0026#39;; charset utf-8; # 避免中文乱码 # 图片文件夹的路径 root /usr/share/nginx/uploads/; location / { autoindex on; autoindex_exact_size on; # 显示文件大小 autoindex_localtime on; # 显示文件时间 } } 访问 http://192.168.1.117/ , 图片列表可以正常显示了 考虑到没有显示图片列表的需求，于是把 autoindex on；autoindex_exact_size on; autoindex_localtime on; 注释掉。只允许在已知文件名的情况下才能访问。\n","permalink":"https://jasminides.com/posts/nginx-%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/","summary":"\u003ch1 id=\"nginx-搭建静态图片资源服务器\"\u003eNginx 搭建静态图片资源服务器\u003c/h1\u003e\n\u003cp\u003e本文介绍使用 Docker Nginx 搭建静态图片资源服务器的过程和搭建中间遇到的问题。\u003c/p\u003e\n\u003cp\u003e我使用 Docker compose 搭建静态图片资源服务器，我使用的 compose 文件内容如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3.1\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003enginx\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003econtainer_name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003easset\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./nginx.conf:/etc/nginx/nginx.conf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./uploads:/usr/share/nginx/uploads\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./conf.d:/etc/nginx/conf.d\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/srv/msg/storage/uploads:/usr/share/nginx/uploads 将本地的图片文件夹挂载到容器内的 /usr/share/nginx/uploads 文件夹 nginx.conf 是 Nginx\n的主配置文件，conf.d 是各个网站配置的文件夹。我的 nginx.conf 内容如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39;\n                      \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39;\n                      \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;;\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  192.168.1.117;\n        root /usr/share/nginx/uploads/;\n        location /{\n              autoindex on;\n        }\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n    }\n     \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e静态资源图片服务器的配置文件如下：\u003c/p\u003e","title":"Nginx 搭建静态图片资源服务器"},{"content":"Traefik 入门使用 简介 Traefik（发音为 traffic）是一个现代 HTTP 反向代理和负载均衡设施，使部署微服务变得容易。Traefik 与你现有的基础设施组件（Docker、Swarm 模式、Kubernetes、Consul、Etcd、\u0026hellip;）集成，并自动和动态地配置自己。将 Traefik 指向你的基础设施组件应该是你唯一需要的配置步骤。\n快速入门 在这里我使用 Docker 来快速使用 Traefik。\n先创建一个 docker-compose.yml 文件，写入如下内容： version: \u0026#39;3\u0026#39; services: reverse-proxy: # 使用的 traefik2.4 Docker 镜像版本 image: traefik:v2.4 # 通过命令行参数启动 traefik，启用不安全模式以使用 dashboard，配置发现使用了 docker command: --api.insecure=true --providers.docker ports: # The HTTP port - \u0026#34;80:80\u0026#34; # dashboard 端口 - \u0026#34;8080:8080\u0026#34; volumes: # 监听 docker 事件 - /var/run/docker.sock:/var/run/docker.sock 执行 docker-compose up -d reverse-proxy 启动 docker-compose up -d reverse-proxy 打开浏览器输入 http://localhost:8080/api/rawdata 访问看见 Traefik\u0026rsquo;s API rawdata，就表示安装成功了。\n打开浏览器输入 http://localhost:8080/dashboard#/ 可以看到由 Traefik 官方提供的简易的 dashboard 页面 我们继续来操作，在前面创建的 docker-compose.yml 中继续写入以下内容。\nwhoami: image: traefik/whoami labels: - \u0026#34;traefik.http.routers.whoami.rule=PathPrefix(`/whoami`)\u0026#34; 执行 docker-compose up -d whoami\n打开浏览器输入 http://localhost/whoami, 即可看到一系列信息 快速入门就这样结束了，在实际的使用中不推荐这样部署使用，接下来介绍比较推荐的部署过程。 安装 在实际部署中，我还是使用 docker-compose 部署的。\n创建一个新的 docker 网络 docker network create traefik_net\nTraefik 和 containers（容器）需要在同一网络上。Compose 会自动创建一个，但事实是隐藏的，以后可能会发生混乱。最好仅创建自己的网络并将其设置为每个 compose 文件中的默认网络。\ndocker-compose 我的 docker-compose 文件如下：\nversion: \u0026#39;3\u0026#39; networks: default: external: name: traefik_net services: reverse-proxy: # The official v2 Traefik docker image image: traefik:v2.4 # Enables the web UI and tells Traefik to listen to docker command: traefik --configFile /etc/traefik/traefik.yml ports: - \u0026#34;8000:8000\u0026#34; - \u0026#34;443:443\u0026#34; - \u0026#34;8080:8080\u0026#34; volumes: # So that Traefik can listen to the Docker events - /var/run/docker.sock:/var/run/docker.sock # 配置文件 - ./traefik.yml:/etc/traefik/traefik.yml # https 证书 - ./certs/:/etc/traefik/certs/:ro # 动态配置 - ./config/:/etc/traefik/config/:ro 前面的 traefik 的配置使用了命令行的方式，在实际生产部署中，推荐使用配置文件的方式来配置 traefik。在生产部署中往往需要使用 Https 来保证应用的安全性，因此挂载了保存证书的文件夹。\ntraefik 中的配置有 2 种，一种是静态配置就是 traefik.yml 文件，另一种是动态配置，这里将动态配置保存在 config 文件夹的文件中，可以很好的更改和无缝热重载，不会出现任何请求中断或连接丢失。\n接下来依次介绍 traefik 的配置文件和相关的动态配置。\ntraefik.yml 接下来介绍 traefik.yml 的配置。我的 traefik.yml 内容如下：\n--- global: checkNewVersion: false sendAnonymousUsage: false log: level: WARN format: common api: dashboard: true ping: { } accessLog: { } providers: docker: watch: true exposedByDefault: true endpoint: unix:///var/run/docker.sock swarmMode: false useBindPortIP: false network: traefik_net file: watch: true directory: /etc/traefik/config debugLogGeneratedTemplate: true entryPoints: web: address: :8000 websecure: address: :443 通过 dashboard: true 开启 dashboard，方便查看服务等相关信息。\n设置 2 个入口点 web 和 websecure 分别监听 8000 端口和 443 端口。\n配置发行的提供者，因为目前的项目部署主要采用 docker 的方式和方便进行动态配置，于是我选择了 docker 和 file 两个提供者。\n动态配置 接下来介绍一些我动态配置相关的文件。\nHTTPS TLS 配置 这是我的 TLS 配置：\n# tls.yml tls: stores: default: { } certificates: - certFile: /etc/traefik/certs/overstarry.vip.pem keyFile: /etc/traefik/certs/overstarry.vip.key stores: - default 就简单的设置了我的证书。\nDashboard 配置 Traefik 官方推荐使用 Secure Mode 使用 Dashboard, 于是设置 insecure: false 开启安全模式。\n由于采用了 Secure Mode , 就不能通过 ip:8080 的方式访问 Dashboard 了，需要配置相应的 Dashboard 路由规则。Dashboard 路由规则必须匹配前缀/api 和/dashboard。于是我的配置如下：\n# dashboard.yml http: routers: dashboard: rule: PathPrefix(`/api`) || PathPrefix(`/dashboard`) service: api@internal tls: { } entryPoints: - \u0026#34;web\u0026#34; 路由规则匹配了/api 和 /dashboard 前缀路径，服务为 api@internal ,开启了 tls, 使用了入口点 web。\n启动 Traefik 执行命令 docker-compose up -d 启动 Traefik，启动后浏览器访问 https://traefik.overstarry.vip:8000/dashboard/#/ 看到 Dashboard 页面就表示部署成功了。\n结合 Traefik 部署 Golang 项目 接下来介绍使用 Traefik 来作为 go 项目的网关的实践。\n我的 go 项目也是采用了 docker compose 方式部署。我原本的 compose 文件如下：\nversion: \u0026#39;3.0\u0026#39; services: web: image: \u0026#34;docker.overstarry.vip:8000/test:latest\u0026#34; restart: always container_name: test ports: - \u0026#34;8000:8000\u0026#34; volumes: - ./data/webconfig:/configs 为了使用 Traefik 作为网关，只需在 compose 文件中添加 label 配置，我修改后的 compose 文件如下：\nversion: \u0026#39;3.0\u0026#39; networks: default: external: name: traefik_net services: web1: image: \u0026#34;docker.overstarry.vip:8000/test:latest\u0026#34; restart: always container_name: test volumes: - /srv/webhook/webconfig:/configs labels: - \u0026#34;traefik.http.routers.test.entrypoints=web\u0026#34; - \u0026#34;traefik.http.routers.test.rule=PathPrefix(`/fbbot/msg`)\u0026#34; - \u0026#34;traefik.http.middlewares.test.stripprefix.prefixes=/fbbot/msg\u0026#34; - \u0026#34;traefik.http.routers.test.middlewares=test@docker\u0026#34; - \u0026#34;traefik.http.routers.test.tls=true\u0026#34; - \u0026#34;traefik.http.services.test.loadbalancer.server.port=8000\u0026#34; - \u0026#34;traefik.http.middlewares.test.stripprefix.forceSlash=false\u0026#34; 通过设置 traefik.http.routers.test.entrypoints=web 表示使用了入口点 web\ntraefik.http.routers.test.rule=PathPrefix(/fbbot/msg) 表示设置匹配的路由规则为 /fbbot/msg, 由于项目的实际路由不是 /fbbot/msg，这是需要使用官方提供的中间件 StripPrefix。\n为了安全性考虑，需要开启 HTTPS 访问，通过 traefik.http.routers.test.tls=true 开启 HTTPS。\n执行 docker-compose up -d 即可在你的 traefik dashboard 中看到。\n注意：label 中的 .test. 需要更换为相关的名字。\n总结 文章主要介绍了 traefik 的安装和在实际项目中的使用。\n参考链接 https://doc.traefik.io/traefik/ ","permalink":"https://jasminides.com/posts/traefik-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","summary":"\u003ch1 id=\"traefik-入门使用\"\u003eTraefik 入门使用\u003c/h1\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003eTraefik（发音为 traffic）是一个现代 HTTP 反向代理和负载均衡设施，使部署微服务变得容易。Traefik 与你现有的基础设施组件（Docker、Swarm 模式、Kubernetes、Consul、Etcd、\u0026hellip;）集成，并自动和动态地配置自己。将 Traefik\n指向你的基础设施组件应该是你唯一需要的配置步骤。\u003c/p\u003e\n\u003ch2 id=\"快速入门\"\u003e快速入门\u003c/h2\u003e\n\u003cp\u003e在这里我使用 Docker 来快速使用 Traefik。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先创建一个 docker-compose.yml 文件，写入如下内容：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ereverse-proxy\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 使用的 traefik2.4 Docker 镜像版本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etraefik:v2.4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 通过命令行参数启动 traefik，启用不安全模式以使用 dashboard，配置发现使用了 docker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: --\u003cspan style=\"color:#ae81ff\"\u003eapi.insecure=true --providers.docker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e# The HTTP port\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;80:80\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e# dashboard 端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;8080:8080\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e# 监听 docker 事件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e/var/run/docker.sock:/var/run/docker.sock\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e执行 docker-compose up -d reverse-proxy 启动\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker-compose up -d reverse-proxy\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\n\u003cp\u003e打开浏览器输入 http://localhost:8080/api/rawdata 访问看见 Traefik\u0026rsquo;s API rawdata，就表示安装成功了。\u003c/p\u003e","title":"Traefik 入门使用"},{"content":"Go Modules 简明使用 Go Modules 是从 go1.11 开始初步支持，到现在的 1.16、1.17 默认开启，是目前 go 项目的推荐包管理方式。接下来让我们看一下 go modules 的简单使用方法。\n使用 Go Modules 初始化 # go mod init [包路径] go mod init github.com/overstarry/go-mod-example 执行上述命令会生成 go.mod 文件\nmodule github.com/overstarry/kratos-demo go 1.16 添加依赖 在当前项目的目录中执行 go get 命令，会添加相应的库到 mod 文件中\ngo get github.com/go-kratos/kratos/v2 这个命令会在 mod 文件里添加以下信息\nrequire ( github.com/go-kratos/kratos/v2 v2.0.1 ) 在 go get 的时候如果不手动指定版本信息，会自动拉取最新的版本的包 如果想要拉取指定版本可以通过 go get github.com/go-kratos/kratos/v2 v2.0.1 的方式，支持 @版本号 例如 @v2.0.1 @分支名 例如 @master @commit tag 例如 @6cff360233dc4457f1536e4f3df4e4e740fd3410 // indirect 表示，我们在代码中没有直接应用这个包 执行完 go get 命令之后还会在目录下生成一个 go.sum 文件 github.com/go-kratos/kratos/v2 v2.0.0-rc7 h1:Qvpz07BefgMFQycSDb57NlWhtYGz4me3wh8E1naI9/k= github.com/go-kratos/kratos/v2 v2.0.0-rc7/go.mod h1:/2bGobqE+/F9kKOe4Re0OO5X2NWNGt+7n2e8Y5DHFRc= github.com/go-kratos/kratos/v2 v2.0.1 h1:iFteVlcLWnAQu5n4I5bTN63svW+0YylGwhNTYO2MkOQ= github.com/go-kratos/kratos/v2 v2.0.1/go.mod h1:Jz6fuJFF2SLczQ7Y8ocKieVGgstQKa+R9NX09bCHekU= 这个文件主要包含当前依赖的所有的包。\n清理未使用的依赖 通过 go mod tidy 命令可以清理在项目中未使用的依赖包。\n生成依赖文件夹 如果你的项目需要切换到新的开发环境，需要重新下载相关的依赖，这时如果你的网络不好或者其它情况，会大大影响你的开发。这时通过 go mod vendor 命令，可以将原本下载在你的 GoPath 中的 go mod 缓存至你的项目根目录下。 可以有效的避免一系列问题。\n下载依赖至本地缓存 使用 go mod download 将你的项目依赖下载到本地缓存，一般是存放在 GoPath 的 pkg 目录的 mod 目录下。\n常见问题 上面介绍完基础的使用方法，接下来介绍一些 Go Modules 常见的问题。\n拉取依赖很慢，有的包还拉取不到 Go 默认的 GOPROXY 配置是 proxy.golang.org , 默认国内无法访问，我们可以配置国内镜像，推荐 goproxy.cn 或者 goproxy.io\ngo env -w GOPROXY=https://goproxy.cn,direct go1.16 之前 Go Module 并未默认开启还需要配置\ngo env -w GO111MODULE=on 公司私有仓库包如何获取 Go 获取包的时候默认会走 PROXY，这个只要你们的库没有对公网发布，那就获取不到，可以通过设置环境变量解决\ngo env -w GOPRIVATE=overstarry.gitlab.com/xxx 包的源代码仓库删库了怎么办？\n这个其实在 Go Modules 上还好一些，因为 Go Modules 默认使用 Go Proxy 只要你使用的库的 LICENSE 和 GOPROXY 没有问题，一般都会有缓存\n建议公司需要搭建一套自己的 GOPROXY 或者使用官方的 GOPROXY 或者是 goproxy.cn\n参考链接 https://github.com/golang/go/wiki/Modules ","permalink":"https://jasminides.com/posts/go_modules-%E6%8C%87%E5%8D%97%E5%92%8C%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","summary":"\u003ch1 id=\"go-modules-简明使用\"\u003eGo Modules 简明使用\u003c/h1\u003e\n\u003cp\u003eGo Modules 是从 go1.11 开始初步支持，到现在的 1.16、1.17 默认开启，是目前 go 项目的推荐包管理方式。接下来让我们看一下 go modules 的简单使用方法。\u003c/p\u003e\n\u003ch2 id=\"使用-go-modules\"\u003e使用 Go Modules\u003c/h2\u003e\n\u003ch3 id=\"初始化\"\u003e初始化\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# go mod init [包路径]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego mod init github.com/overstarry/go-mod-example\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行上述命令会生成 go.mod 文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodule github.com/overstarry/kratos-demo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego 1.16\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"添加依赖\"\u003e添加依赖\u003c/h3\u003e\n\u003cp\u003e在当前项目的目录中执行 go get 命令，会添加相应的库到 mod 文件中\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get github.com/go-kratos/kratos/v2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个命令会在 mod 文件里添加以下信息\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequire \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tgithub.com/go-kratos/kratos/v2 v2.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在 go get 的时候如果不手动指定版本信息，会自动拉取最新的版本的包\u003c/li\u003e\n\u003cli\u003e如果想要拉取指定版本可以通过 go get github.com/go-kratos/kratos/v2 v2.0.1 的方式，支持\n\u003cul\u003e\n\u003cli\u003e@版本号 例如 \u003ccode\u003e@v2.0.1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e@分支名 例如 @master\u003c/li\u003e\n\u003cli\u003e@commit tag 例如 @6cff360233dc4457f1536e4f3df4e4e740fd3410\u003c/li\u003e\n\u003cli\u003e// indirect 表示，我们在代码中没有直接应用这个包\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e执行完 go get 命令之后还会在目录下生成一个 go.sum 文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egithub.com/go-kratos/kratos/v2 v2.0.0-rc7 h1:Qvpz07BefgMFQycSDb57NlWhtYGz4me3wh8E1naI9/k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egithub.com/go-kratos/kratos/v2 v2.0.0-rc7/go.mod h1:/2bGobqE+/F9kKOe4Re0OO5X2NWNGt+7n2e8Y5DHFRc\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egithub.com/go-kratos/kratos/v2 v2.0.1 h1:iFteVlcLWnAQu5n4I5bTN63svW+0YylGwhNTYO2MkOQ\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egithub.com/go-kratos/kratos/v2 v2.0.1/go.mod h1:Jz6fuJFF2SLczQ7Y8ocKieVGgstQKa+R9NX09bCHekU\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个文件主要包含当前依赖的所有的包。\u003c/p\u003e","title":"Go_Modules 指南和常见问题"},{"content":"Gitlab CI 构建 docker 镜像 利用 Gitlab CI 结合 Docker 构建 docker 镜像主要有三种方法。\n将 Docker 执行器与 Docker 镜像一起使用。 使用 shell 执行器 Docker socket 绑定 现在来讲讲我的具体使用过程和遇到的一些问题，由于我的 gitlab-runners 使用了 docker 执行器，所以我主要使用了 1 和 3 两种方法。\n由于网上的相关文章主要是采用 Docker in Docker 的方式，所以最开始我也是采用这种方式。 我的 ci 脚本是：\nservices: - docker:dind variables: OUTPUT_NAME: bot DOCKER_HOST: tcp://localhost:2375 DOCKER_DRIVER: overlay2 DOCKER_TLS_CERTDIR: \u0026#34;\u0026#34; build_docker_image_and_push_to_nexus: stage: build image: docker:stable extends: .go-cache script: - docker info - docker build -t docker.overtsarry.vip/bot:1.0.1 . - docker login --username=$username docker.overtsarry.vip --password $pwd - docker push docker.overtsarry.vip/bot:1.0.1 运行 CI，发现 CI 运行失败，具体报错是\nCannot connect to the Docker daemon at tcp://localhost:2375. Is the docker daemon running? 没有发现 docker daemon 运行，由于 gitlab doc 宕机了，在网上又看了一些文章，根据那些文章进行了十几次的修改，还是没有运行成功。后来查看 gitlab 相关文档，发现 docker 需要在 privileged 下运行。(The Docker image has all of the docker tools installed and can run the job script in context of the image in privileged mode.) 就需要修改 gitlab-runners 的配置文件，设置 privileged = true 即可。 修改完配置文件，再次运行 CI，docker 镜像顺利构建上传。 使用 Docker in Docker 构建成功后，我还顺便尝试使用 Docker socket 绑定来构建 docker 镜像。 这次有了文档辅助进度快了许多，具体的流程:\n安装 gitlab-runner 注册 gitlab-runner，向 docker 执行程序注册一个运行程序并共享/var/run/docker.socket sudo gitlab-runner register -n \\ --url https://overstarry.gitlab.com/ \\ --registration-token REGISTRATION_TOKEN \\ --executor docker \\ --description \u0026#34;My Docker Runner\u0026#34; \\ --docker-image \u0026#34;docker:19.03.12\u0026#34; \\ --docker-volumes /var/run/docker.sock:/var/run/docker.sock gitlab-runner 就注册成功了，你会发现在你的 runner 配置文件中有一行相关的条目。\nvolumes = [\u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34;,\u0026#34;/cache\u0026#34;] 接下来编写你的 ci 文件，我的文件如下： build: image: docker:20.10.7 stage: build before_script: - echo \u0026#34;docker build\u0026#34; script: - docker login --username=$username docker.overtsarry.vip --password $pwd - docker build -t docker.overstarry.vip/messenger-service:\u0026#34;$CI_COMMIT_SHA\u0026#34; . # 本地构建 docker 镜像 - docker push docker.overstarry.vip/messenger-service:\u0026#34;$CI_COMMIT_SHA\u0026#34; # 根据 CI_COMMIT_SHA push 镜像 - docker tag docker.overstarry.vip/messenger-service:\u0026#34;$CI_COMMIT_SHA\u0026#34; docker.overstarry.vip/messenger-service:latest - docker push docker.overstarry.vip/messenger-service:latest # 替换 registry latest 镜像 - docker rmi docker.overstarry.vip/messenger-service:\u0026#34;$CI_COMMIT_SHA\u0026#34; - docker rmi docker.overstarry.vip/messenger-service:latest 运行 CI，运行成功。 参考文章 https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-socket-binding ","permalink":"https://jasminides.com/posts/gitlab-ci-%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/","summary":"\u003ch1 id=\"gitlab-ci-构建-docker-镜像\"\u003eGitlab CI 构建 docker 镜像\u003c/h1\u003e\n\u003cp\u003e利用 Gitlab CI 结合 Docker 构建 docker 镜像主要有三种方法。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e将 Docker 执行器与 Docker 镜像一起使用。\u003c/li\u003e\n\u003cli\u003e使用 shell 执行器\u003c/li\u003e\n\u003cli\u003eDocker socket 绑定\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e现在来讲讲我的具体使用过程和遇到的一些问题，由于我的 gitlab-runners 使用了 docker 执行器，所以我主要使用了 1 和 3 两种方法。\u003c/p\u003e\n\u003cp\u003e由于网上的相关文章主要是采用 Docker in Docker 的方式，所以最开始我也是采用这种方式。\n我的 ci 脚本是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003edocker:dind\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003evariables\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eOUTPUT_NAME\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eDOCKER_HOST\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etcp://localhost:2375\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eDOCKER_DRIVER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eoverlay2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eDOCKER_TLS_CERTDIR\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ebuild_docker_image_and_push_to_nexus\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003estage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebuild\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edocker:stable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eextends\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e.go-cache\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003edocker info\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003edocker build -t docker.overtsarry.vip/bot:1.0.1 .\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003edocker login --username=$username docker.overtsarry.vip --password $pwd\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#ae81ff\"\u003edocker push docker.overtsarry.vip/bot:1.0.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行 CI，发现 CI 运行失败，具体报错是\u003c/p\u003e","title":"Gitlab CI 构建 docker 镜像"},{"content":"部署好 GithubPage 后，觉得提供的域名不好，想要换成自己的域名，该如何操作呢。下面来介绍下给 Github Page 设置自定义域的方式。\n在 Github 上，打开 GithubPage 所在仓库。 在仓库名称下，单击 Settings（设置）。 在左侧边栏中，单击 Pages（页面）。 在 \u0026ldquo;Custom domain（自定义域）\u0026ldquo;下，输入自定义域，然后单击 Save（保存）。这将创建一个在发布源根目录中添加 CNAME 文件的提交。 导航到您的 DNS 提供程序并创建 CNAME 记录，使子域指向您站点的默认域。就是在你域名的提供商进行相应域名的解析，添加对应的 CNAME 记录集。 6.（可选）要为您的站点实施 HTTPS 加密，请选择 Enforce HTTPS（实施 HTTPS）。可能要过 24 小时才能使用此选项。 上面这是常规的标准做法，由于我是采用 Github actions 构建生成站点，每次 CI 运行时，都会重新生成仓库文件，CNAME 文件都需要重新创建，十分不方便。于是在 Hugo site static 文件夹创建 CNAME 文件，这样每次运行 CI 时，都不需要重复上面步骤。\n参考链接 https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site ","permalink":"https://jasminides.com/posts/hugo-github_page-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/","summary":"\u003cp\u003e部署好 GithubPage 后，觉得提供的域名不好，想要换成自己的域名，该如何操作呢。下面来介绍下给 Github Page 设置自定义域的方式。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在 Github 上，打开 GithubPage 所在仓库。\u003c/li\u003e\n\u003cli\u003e在仓库名称下，单击  Settings（设置）。\u003c/li\u003e\n\u003cli\u003e在左侧边栏中，单击 Pages（页面）。\u003c/li\u003e\n\u003cli\u003e在 \u0026ldquo;Custom domain（自定义域）\u0026ldquo;下，输入自定义域，然后单击 Save（保存）。这将创建一个在发布源根目录中添加 CNAME 文件的提交。\u003c/li\u003e\n\u003cli\u003e导航到您的 DNS 提供程序并创建 CNAME 记录，使子域指向您站点的默认域。就是在你域名的提供商进行相应域名的解析，添加对应的 CNAME 记录集。\n6.（可选）要为您的站点实施 HTTPS 加密，请选择 Enforce HTTPS（实施 HTTPS）。可能要过 24 小时才能使用此选项。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e上面这是常规的标准做法，由于我是采用 Github actions 构建生成站点，每次 CI 运行时，都会重新生成仓库文件，CNAME 文件都需要重新创建，十分不方便。于是在 Hugo site static 文件夹创建 CNAME 文件，这样每次运行 CI 时，都不需要重复上面步骤。\u003c/p\u003e\n\u003ch2 id=\"参考链接\"\u003e参考链接\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site\"\u003ehttps://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Hugo Github_page 自定义域名"},{"content":"panic 在程序启动的时候，如果有强依赖的服务出现故障时 panic 退出 在程序启动的时候，如果发现有配置明显不符合要求，可以 panic 退出（防御编程） 其他情况下只要不是不可恢复的程序错误，都不应该直接 panic 应该返回 error 在程序入口处，例如 gin 中间件需要使用 recover 预防 panic 程序退出 在程序中我们应该避免使用野生的 goroutine 如果是在请求中需要执行异步任务，应该使用异步 worker，消息通知的方式进行处理，避免请求量大时大量 goroutine 创建 如果需要使用 goroutine 时，应该使用同一的 Go 函数进行创建，这个函数中会进行 recover，避免因为野生 goroutine panic 导致主进程退出 func fn(f func()){ go func(){ defer func(){ if err := recover(); err != nil { log.Printf(\u0026#34;panic: %+v\u0026#34;, err) } }() f() }() } error 我们在应用程序中使用 github.com/pkg/errors 处理应用错误，注意在公共库当中，我们一般不使用这个 error 应该是函数的最后一个返回值，当 error 不为 nil 时，函数的其他返回值是不可用的状态，不应该对其他返回值做任何期待 func f() (io.Reader, *S1, error) 在这里，我们不知道 io.Reader 中是否有数据，可能有，也有可能有一部分 错误处理的时候应该先判断错误，if err != nil 出现错误及时返回，使代码是一条流畅的直线，避免过多的嵌套。 在应用程序中出现错误时，使用 errors.New 或者 errors.Errorf 返回错误 如果是调用应用程序的其他函数出现错误，请直接返回，如果需要携带信息，请使用 errors.WithMessage 如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用 errors.Wrap 添加堆栈信息 切记，不要每个地方都是用 errors.Wrap 只需要在错误第一次出现时进行 errors.Wrap 即可 根据场景进行判断是否需要将其他库的原始错误吞掉，例如可以把 repository 层的数据库相关错误吞掉，返回业务错误码，避免后续我们分割微服务或者更换 ORM 库时需要去修改上层代码 注意我们在基础库，被大量引入的第三方库编写时一般不使用 errors.Wrap 避免堆栈信息重复 func f() error { err := json.Unmashal(\u0026amp;a, data) if err != nil { return errors.Wrap(err, \u0026#34;其他附加信息\u0026#34;) } // 其他逻辑 return nil } 禁止每个出错的地方都打日志，只需要在进程的最开始的地方使用 %+v 进行统一打印，例如 http/rpc 服务的中间件 错误判断使用 errors.Is 进行比较 func f() error { err := A() if errors.Is(err, io.EOF){ return nil } // 其他逻辑 return nil } 错误类型判断，使用 errors.As 进行赋值 func f() error { err := A() var errA errorA if errors.As(err, \u0026amp;errA){ // ... } // 其他逻辑 return nil } 如何判定错误的信息是否足够，想一想当你的代码出现问题需要排查的时候你的错误信息是否可以帮助你快速的定位问题，例如我们在请求中一般会输出参数信息，用于辅助判断错误 对于业务错误，推荐在一个统一的地方创建一个错误字典，错误字典里面应该包含错误的 code，并且在日志中作为独立字段打印，方便做业务告警的判断，错误必须有清晰的错误文档 不需要返回，被忽略的错误必须输出日志信息 同一个地方不停的报错，最好不要不停输出错误日志，这样可能会导致被大量的错误日志信息淹没，无法排查问题，比较好的做法是打印一次错误详情，然后打印出错误出现的次数 对同一个类型的错误，采用相同的模式，例如参数错误，不要有的返回 404 有的返回 200 处理错误的时候，需要处理已分配的资源，使用 defer 进行清理，例如文件句柄 ","permalink":"https://jasminides.com/posts/go-%E9%94%99%E8%AF%AF%E5%AE%9E%E8%B7%B5/","summary":"\u003ch3 id=\"panic\"\u003epanic\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e在程序启动的时候，如果有强依赖的服务出现故障时 panic 退出\u003c/li\u003e\n\u003cli\u003e在程序启动的时候，如果发现有配置明显不符合要求，可以 panic 退出（防御编程）\u003c/li\u003e\n\u003cli\u003e其他情况下只要不是不可恢复的程序错误，都不应该直接 panic 应该返回 error\u003c/li\u003e\n\u003cli\u003e在程序入口处，例如 gin 中间件需要使用 recover 预防 panic 程序退出\u003c/li\u003e\n\u003cli\u003e在程序中我们应该避免使用野生的 goroutine\n\u003col\u003e\n\u003cli\u003e如果是在请求中需要执行异步任务，应该使用异步 worker，消息通知的方式进行处理，避免请求量大时大量 goroutine 创建\u003c/li\u003e\n\u003cli\u003e如果需要使用 goroutine 时，应该使用同一的 Go 函数进行创建，这个函数中会进行 recover，避免因为野生 goroutine panic 导致主进程退出\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e recover(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;panic: %+v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"error\"\u003eerror\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e我们在应用程序中使用 github.com/pkg/errors 处理应用错误，\u003cstrong\u003e注意在公共库当中，我们一般不使用这个\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eerror 应该是函数的最后一个返回值，当 error 不为 nil 时，函数的其他返回值是不可用的状态，不应该对其他返回值做任何期待\n\u003col\u003e\n\u003cli\u003efunc f() (io.Reader, *S1, error) 在这里，我们不知道 io.Reader 中是否有数据，可能有，也有可能有一部分\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e错误处理的时候应该先判断错误，if err != nil 出现错误及时返回，使代码是一条流畅的直线，避免过多的嵌套。\u003c/li\u003e\n\u003cli\u003e在\u003cstrong\u003e应用程序\u003c/strong\u003e中出现错误时，使用 errors.New 或者 errors.Errorf 返回错误\u003c/li\u003e\n\u003cli\u003e如果是调用\u003cstrong\u003e应用程序的\u003c/strong\u003e其他函数出现错误，请直接返回，如果需要携带信息，请使用 errors.WithMessage\u003c/li\u003e\n\u003cli\u003e如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用 errors.Wrap 添加堆栈信息\n\u003col\u003e\n\u003cli\u003e切记，不要每个地方都是用 errors.Wrap 只需要在错误第一次出现时进行 errors.Wrap 即可\u003c/li\u003e\n\u003cli\u003e根据场景进行判断是否需要将其他库的原始错误吞掉，例如可以把 repository 层的数据库相关错误吞掉，返回业务错误码，避免后续我们分割微服务或者更换 ORM 库时需要去修改上层代码\u003c/li\u003e\n\u003cli\u003e注意我们在基础库，被大量引入的第三方库编写时一般不使用 errors.Wrap 避免堆栈信息重复\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmashal\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWrap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;其他附加信息\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 其他逻辑\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"7\"\u003e\n\u003cli\u003e\u003cstrong\u003e禁止\u003c/strong\u003e每个出错的地方都打日志，\u003cstrong\u003e只需要\u003c/strong\u003e在进程的最开始的地方使用 %+v 进行统一打印，例如 http/rpc 服务的中间件\u003c/li\u003e\n\u003cli\u003e错误判断使用 errors.Is 进行比较\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eIs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEOF\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 其他逻辑\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"9\"\u003e\n\u003cli\u003e错误类型判断，使用 errors.As 进行赋值\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrA\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrorA\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eerrA\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t\u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 其他逻辑\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"10\"\u003e\n\u003cli\u003e如何判定错误的信息是否足够，想一想当你的代码出现问题需要排查的时候你的错误信息是否可以帮助你快速的定位问题，例如我们在请求中一般会输出参数信息，用于辅助判断错误\u003c/li\u003e\n\u003cli\u003e对于业务错误，推荐在一个统一的地方创建一个错误字典，错误字典里面应该包含错误的 code，并且在日志中作为独立字段打印，方便做业务告警的判断，错误必须有清晰的错误文档\u003c/li\u003e\n\u003cli\u003e不需要返回，被忽略的错误\u003cstrong\u003e必须\u003c/strong\u003e输出日志信息\u003c/li\u003e\n\u003cli\u003e同一个地方不停的报错，最好不要不停输出错误日志，这样可能会导致被大量的错误日志信息淹没，无法排查问题，比较好的做法是打印一次错误详情，然后打印出错误出现的次数\u003c/li\u003e\n\u003cli\u003e对同一个类型的错误，采用相同的模式，例如参数错误，不要有的返回 404 有的返回 200\u003c/li\u003e\n\u003cli\u003e处理错误的时候，需要处理已分配的资源，使用 defer 进行清理，例如文件句柄\u003c/li\u003e\n\u003c/ol\u003e","title":"Go 错误实践"},{"content":"使用 Redis 实现消息队列主要有三种方法：\nList 队列 发布/订阅模型 Pub/Sub Stream (Redis5+) 下面分别对这三种方法进行介绍，并编写简单例子。\nList 队列 看到队列，你会想到 Redis 有个数据类型 List，List 能很好符合队列的要求。List 的底层是一个链表，在头部和尾部进行操作的时间复杂度都是 O(1)。 使用 List 进行队列操作，你可以这样使用。 生产者使用 LPUSH 进行消息发布 消费者使用 RPOP 对消息进行消费 这里存在着一个问题，如果 LIST 没有消息时，消费者执行 RPOP 时，会返回 null(nil)。 我们在编写消费者逻辑时，一般是循环不断从队列中消费数据进行处理，如果此时队列为空，那消费者依旧会频繁拉取消息，这会造成「CPU 空转」，不仅浪费 CPU 资源，还会对 Redis 造成压力。Redis 提供了阻塞式拉起命令 BRPOP / BLPOP，使用 BRPOP 这种阻塞式方式拉取消息时，还支持传入一个「超时时间」，如果设置为 0，则表示不设置超时，直到有新消息才返回，否则会在指定的超时时间后返回 null，既兼顾了效率还避免了 CPU 空转问题。 这是 List 队列的代码例子：\n// 生产者 package main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) data :=[]string{`{\u0026#34;name\u0026#34;: \u0026#34;jinzhu11221212321\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`,`{\u0026#34;name\u0026#34;: \u0026#34;asd\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`} rdb.LPush(context.Background(), \u0026#34;queue\u0026#34;, data) } // 消费者 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) for true { //result, err := rdb.RPop(context.Background(), \u0026#34;queue\u0026#34;).Result() result, err := rdb.BRPop(context.Background(), 0, \u0026#34;queue\u0026#34;).Result() if err == redis.Nil { continue } else if err != nil { log.Println(err) } fmt.Printf(\u0026#34;consumer msg %v\\n\u0026#34;, result) } } List 队列的缺点：\n不支持重复消费：消费者拉取消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费，即不支持多个消费者消费同一批数据，仅支持 1 对 1。 消息丢失：消费者拉取到消息后，如果发生异常宕机，那这条消息就丢失了，无论消费者是否处理成功，这条消息都没办法再次消费了。 发布/订阅模型 Pub/Sub 从名字就能看出来，这个模块是 Redis 专门是针对「发布/订阅」这种队列模型设计的。 它正好可以解决前面提到的第一个问题：重复消费。 即多组生产者、消费者的场景，我们来看它是如何做的。 Redis 提供了 PUBLISH / SUBSCRIBE 命令，来完成发布、订阅的操作。 使用 Pub/Sub 就能很好的解决不能重复消费的问题，多个消费者能够消费同一个生产的消息。 除此之外，Pub/Sub 还提供了「匹配订阅」模式，允许消费者根据一定规则，订阅「多个」自己感兴趣的队列。 代码：\n// 订阅 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) sub := rdb.Subscribe(context.TODO(), \u0026#34;queue\u0026#34;) ch := sub.Channel() for msg := range ch { fmt.Println(msg.Channel, msg.Payload) } } // 发布 package main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) data :=[]string{`{\u0026#34;name\u0026#34;: \u0026#34;jinzhu11221212321\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`,`{\u0026#34;name\u0026#34;: \u0026#34;asd\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`} for i:=range data { err := rdb.Publish(context.TODO(), \u0026#34;queue\u0026#34;, data[i]).Err() if err != nil { panic(err) } } } Pub/Sub 最大问题是：丢数据。 如果发生以下场景，就有可能导致数据丢失：\n消费者下线 Redis 宕机 消息堆积 Pub/Sub的优缺点：\n支持发布 / 订阅，支持多组生产者、消费者处理消息 消费者下线，数据会丢失 不支持数据持久化，Redis 宕机，数据也会丢失 消息堆积，缓冲区溢出，消费者会被强制踢下线，数据也会丢失 Stream 首先，Stream 通过 XADD 和 XREAD 完成最简单的生产、消费模型：\nXADD：发布消息 XREAD：读取消息 生产者发布 2 条消息：\n// *表示让Redis自动生成消息ID 127.0.0.1:6379\u0026gt; XADD queue * name zhangsan \u0026#34;1618469123380-0\u0026#34; 127.0.0.1:6379\u0026gt; XADD queue * name lisi \u0026#34;1618469127777-0\u0026#34; 使用 XADD 命令发布消息，其中的「*」表示让 Redis 自动生成唯一的消息 ID。 这个消息 ID 的格式是「时间戳 - 自增序号」。 消费者拉取消息：\n// 从开头读取5条消息，0-0表示从开头读取 127.0.0.1:6379\u0026gt; XREAD COUNT 5 STREAMS queue 0-0 1) 1) \u0026#34;queue\u0026#34; 2) 1) 1) \u0026#34;1618469123380-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;zhangsan\u0026#34; 2) 1) \u0026#34;1618469127777-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;lisi\u0026#34; 如果想继续拉取消息，需要传入上一条消息的 ID：\n127.0.0.1:6379\u0026gt; XREAD COUNT 5 STREAMS queue 1618469127777-0 (nil) 没有消息，Redis 会返回 NULL。\n以上就是 Stream 最简单的生产、消费。\nStream 是否支持「阻塞式」拉取消息？ 可以的，在读取消息时，只需要增加 BLOCK 参数即可。 // BLOCK 0 表示阻塞等待，不设置超时时间 127.0.0.1:6379\u0026gt; XREAD COUNT 5 BLOCK 0 STREAMS queue 1618469127777-0 这时，消费者就会阻塞等待，直到生产者发布新的消息才会返回。 2) Stream 是否支持发布 / 订阅模式？ 也没问题，Stream 通过以下命令完成发布订阅：\nXGROUP：创建消费者组 XREADGROUP：在指定消费组下，开启消费者拉取消息 下面我们来看具体如何做？ 首先，生产者依旧发布 2 条消息：\n127.0.0.1:6379\u0026gt; XADD queue * name zhangsan \u0026#34;1618470740565-0\u0026#34; 127.0.0.1:6379\u0026gt; XADD queue * name lisi \u0026#34;1618470743793-0\u0026#34; 之后，我们想要开启 2 组消费者处理同一批数据，就需要创建 2 个消费者组：\n// 创建消费者组1，0-0表示从头拉取消息 127.0.0.1:6379\u0026gt; XGROUP CREATE queue group1 0-0 OK // 创建消费者组2，0-0表示从头拉取消息 127.0.0.1:6379\u0026gt; XGROUP CREATE queue group2 0-0 OK 消费者组创建好之后，我们可以给每个「消费者组」下面挂一个「消费者」，让它们分别处理同一批数据。 第一个消费组开始消费：\n// group1的consumer开始消费，\u0026gt;表示拉取最新数据 127.0.0.1:6379\u0026gt; XREADGROUP GROUP group1 consumer COUNT 5 STREAMS queue \u0026gt; 1) 1) \u0026#34;queue\u0026#34; 2) 1) 1) \u0026#34;1618470740565-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;zhangsan\u0026#34; 2) 1) \u0026#34;1618470743793-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;lisi\u0026#34; 同样地，第二个消费组开始消费：\n// group2的consumer开始消费，\u0026gt;表示拉取最新数据 127.0.0.1:6379\u0026gt; XREADGROUP GROUP group2 consumer COUNT 5 STREAMS queue \u0026gt; 1) 1) \u0026#34;queue\u0026#34; 2) 1) 1) \u0026#34;1618470740565-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;zhangsan\u0026#34; 2) 1) \u0026#34;1618470743793-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;lisi\u0026#34; 我们可以看到，这 2 组消费者，都可以获取同一批数据进行处理了。 这样一来，就达到了多组消费者「订阅」消费的目的。\n消息处理时异常，Stream 能否保证消息不丢失，重新消费？ 除了上面拉取消息时用到了消息 ID，这里为了保证重新消费，也要用到这个消息 ID。 当一组消费者处理完消息后，需要执行 XACK 命令告知 Redis，这时 Redis 就会把这条消息标记为「处理完成」。 // group1下的 1618472043089-0 消息已处理完成 127.0.0.1:6379\u0026gt; XACK queue group1 1618472043089-0 如果消费者异常宕机，肯定不会发送 XACK，那么 Redis 就会依旧保留这条消息。 待这组消费者重新上线后，Redis 就会把之前没有处理成功的数据，重新发给这个消费者。这样一来，即使消费者异常，也不会丢失数据了。\n// 消费者重新上线，0-0表示重新拉取未ACK的消息 127.0.0.1:6379\u0026gt; XREADGROUP GROUP group1 consumer1 COUNT 5 STREAMS queue 0-0 // 之前没消费成功的数据，依旧可以重新消费 1) 1) \u0026#34;queue\u0026#34; 2) 1) 1) \u0026#34;1618472043089-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;zhangsan\u0026#34; 2) 1) \u0026#34;1618472045158-0\u0026#34; 2) 1) \u0026#34;name\u0026#34; 2) \u0026#34;lisi\u0026#34; Stream 数据会写入到 RDB 和 AOF 做持久化吗？ Stream 是新增加的数据类型，它与其它数据类型一样，每个写操作，也都会写入到 RDB 和 AOF 中。 我们只需要配置好持久化策略，这样的话，就算 Redis 宕机重启，Stream 中的数据也可以从 RDB 或 AOF 中恢复回来。 消息堆积时，Stream 是怎么处理的？ 其实，当消息队列发生消息堆积时，一般只有 2 个解决方案： 生产者限流：避免消费者处理不及时，导致持续积压 丢弃消息：中间件丢弃旧消息，只保留固定长度的新消息 而 Redis 在实现 Stream 时，采用了第 2 个方案。 在发布消息时，你可以指定队列的最大长度，防止队列积压导致内存爆炸。\n// 队列长度最大10000 127.0.0.1:6379\u0026gt; XADD queue MAXLEN 10000 * name zhangsan \u0026#34;1618473015018-0\u0026#34; 当队列长度超过上限后，旧消息会被删除，只保留固定长度的新消息。 这么来看，Stream 在消息积压时，如果指定了最大长度，还是有可能丢失消息的。 代码：\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) data := []string{`{\u0026#34;name\u0026#34;: \u0026#34;jinzhu11221212321\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`, `{\u0026#34;name\u0026#34;: \u0026#34;asd\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`} rdb.XAdd(context.TODO(), \u0026amp;redis.XAddArgs{ Stream: \u0026#34;queue1\u0026#34;, Values: data, }) } package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { rdb := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 1, }) result, err := rdb.XRead(context.TODO(), \u0026amp;redis.XReadArgs{ Streams: []string{\u0026#34;queue1\u0026#34;,\u0026#34;0\u0026#34;}, Count: 0, Block: 0, }).Result() if err != nil { panic(err) } for r:= range result { for m:=range result[r].Messages { fmt.Println(result[r].Messages[m].Values) } } } 参考 [1] https://redis.uptrace.dev/ [2] https://redis.io/commands [3] https://mp.weixin.qq.com/s/RthQvzLHZRGNo-z6X_7jQQ [4] https://github.com/overstarry/queue\n","permalink":"https://jasminides.com/posts/%E4%BD%BF%E7%94%A8-redis-%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","summary":"\u003cp\u003e使用 Redis 实现消息队列主要有三种方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eList 队列\u003c/li\u003e\n\u003cli\u003e发布/订阅模型 Pub/Sub\u003c/li\u003e\n\u003cli\u003eStream (Redis5+)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面分别对这三种方法进行介绍，并编写简单例子。\u003c/p\u003e\n\u003ch2 id=\"list-队列\"\u003eList 队列\u003c/h2\u003e\n\u003cp\u003e看到队列，你会想到 Redis 有个数据类型 List，List 能很好符合队列的要求。List 的底层是一个链表，在头部和尾部进行操作的时间复杂度都是 O(1)。\n使用 List 进行队列操作，你可以这样使用。\n生产者使用 LPUSH 进行消息发布\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1622614623389-8c0c502b-8b2e-441a-8d5d-2ca7c1c14b95.png#align=left\u0026amp;display=inline\u0026amp;height=793\u0026amp;margin=%5Bobject%20Object%5D\u0026amp;name=image.png\u0026amp;originHeight=793\u0026amp;originWidth=1431\u0026amp;size=42061\u0026amp;status=done\u0026amp;style=none\u0026amp;width=1431\" alt=\"image.png\"  /\u003e\n\n消费者使用 RPOP 对消息进行消费\n\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1667524/1622614727548-479e3f6f-181b-4f23-9e0f-a34a36686fc6.png#align=left\u0026amp;display=inline\u0026amp;height=491\u0026amp;margin=%5Bobject%20Object%5D\u0026amp;name=image.png\u0026amp;originHeight=491\u0026amp;originWidth=1428\u0026amp;size=22030\u0026amp;status=done\u0026amp;style=none\u0026amp;width=1428\" alt=\"image.png\"  /\u003e\n\n这里存在着一个问题，如果 LIST 没有消息时，消费者执行 RPOP 时，会返回 null(nil)。\n我们在编写消费者逻辑时，一般是循环不断从队列中消费数据进行处理，如果此时队列为空，那消费者依旧会频繁拉取消息，这会造成「CPU 空转」，不仅浪费 CPU 资源，还会对 Redis 造成压力。Redis 提供了阻塞式拉起命令 BRPOP / BLPOP，使用 BRPOP 这种阻塞式方式拉取消息时，还支持传入一个「超时时间」，如果设置为 0，则表示不设置超时，直到有新消息才返回，否则会在指定的超时时间后返回 null，既兼顾了效率还避免了 CPU 空转问题。\n这是 List 队列的代码例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 生产者\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-redis/redis/v8\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erdb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eredis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eredis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOptions\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eAddr\u003c/span\u003e:     \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;localhost:6379\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ePassword\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eDB\u003c/span\u003e:       \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e[]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;name\u0026#34;: \u0026#34;jinzhu11221212321\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;name\u0026#34;: \u0026#34;asd\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;tags\u0026#34;: [\u0026#34;tag211\u0026#34;, \u0026#34;tag2\u0026#34;], \u0026#34;orgs\u0026#34;: {\u0026#34;orga\u0026#34;: \u0026#34;orga\u0026#34;}`\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erdb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLPush\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;queue\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 消费者\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/go-redis/redis/v8\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003erdb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eredis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eredis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOptions\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eAddr\u003c/span\u003e:     \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;localhost:6379\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ePassword\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eDB\u003c/span\u003e:       \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//result, err := rdb.RPop(context.Background(), \u0026#34;queue\u0026#34;).Result()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erdb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBRPop\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBackground\u003c/span\u003e(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;queue\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eResult\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eredis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;consumer msg %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eList 队列的缺点：\u003c/p\u003e","title":"使用 Redis 实现消息队列"},{"content":"Hello Hugo! ","permalink":"https://jasminides.com/posts/my-first-post/","summary":"\u003ch1 id=\"hello-hugo\"\u003eHello Hugo!\u003c/h1\u003e","title":"My First Post"}]