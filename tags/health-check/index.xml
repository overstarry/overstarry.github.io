<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Health Check on Overstarry Site</title>
    <link>https://jasminides.com/tags/health-check/</link>
    <description>Recent content in Health Check on Overstarry Site</description>
    <image>
      <title>Overstarry Site</title>
      <url>https://jasminides.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jasminides.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh</language>
    <copyright>Copyright © 2024-now - overstarry · All rights reserved </copyright>
    <lastBuildDate>Fri, 23 Jun 2023 22:42:41 +0800</lastBuildDate>
    <atom:link href="https://jasminides.com/tags/health-check/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Health check</title>
      <link>https://jasminides.com/posts/kubernetes-healthcheck/</link>
      <pubDate>Fri, 23 Jun 2023 22:42:41 +0800</pubDate>
      <guid>https://jasminides.com/posts/kubernetes-healthcheck/</guid>
      <description>&lt;p&gt;本文我来讲解 Kubernetes 中的一个重要概念：容器的健康检查。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，你可以为 Pod 里的容器定义一个健康检查“探针”（Probe）。
这样，kubelet 就会根据这个 Probe 的返回值决定这个容器的状态，而不是直接以容器镜像是否运行（来自 Docker 返回的信息）作为依据。
这种机制，是生产环境中保证应用健康存活的重要手段。&lt;/p&gt;
&lt;p&gt;k8s 主要有三种健康检查的探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针 3) StartupProbe 启动探针&lt;/p&gt;
&lt;p&gt;kubelet 使用存活探针来确定什么时候要重启容器。例如，存活探针可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。&lt;/p&gt;
&lt;p&gt;存活探针的常见模式是为就绪探针使用相同的低成本 HTTP 端点，但具有更高的 failureThreshold。这样可以确保在硬性终止 Pod 之前，将观察到 Pod 在一段时间内处于非就绪状态。&lt;/p&gt;
&lt;p&gt;kubelet 使用就绪探针可以知道容器何时准备好接受请求流量，当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。&lt;/p&gt;
&lt;p&gt;kubelet 使用启动探针来了解应用容器何时启动。如果配置了这类探针，你就可以控制容器在启动成功后再进行存活性和就绪态检查，确保这些存活、就绪探针不会影响应用的启动。启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。&lt;/p&gt;
&lt;h2 id=&#34;probe-介绍&#34;&gt;probe 介绍&lt;/h2&gt;
&lt;p&gt;接下来我来讲解用的较多的 2 个探针：1) LivenessProbe 存活探针 2) ReadinessProbe 就绪探针&lt;/p&gt;
&lt;h3 id=&#34;livenessprobe&#34;&gt;LivenessProbe&lt;/h3&gt;
&lt;p&gt;许多应用由于长时间运行导致程序异常，需要重启服务才能继续正常使用，Kubernetes 提供了存活探针 (LivenessProbe) 来发现并处理这种情况。&lt;/p&gt;
&lt;p&gt;我们先创建一个 pod, pod 的文件如下：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
